{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce \uff3c( \uff3e\u2200\uff3e) \u00b6 \u7b2c\u4e00\u6b21\u642d\u535a\u5ba2\uff0c\u6b22\u8fce\u9875\u5b9e\u5728\u4e0d\u77e5\u9053\u5199\u4ec0\u4e48\uff0c\u5c31\u653e\u4e00\u53e5\u300a\u4e54\u5e03\u65af\u4f20\u300b\u91cc\u5f88\u559c\u6b22\u7684\u8bdd\u5427\uff1a \u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a \u8c28\u4ee5\u6b64\u5171\u52c9\uff01 \u5176\u5b9e\u641e\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u4e0d\u662f\u4e00\u65f6\u5fc3\u8840\u6765\u6f6e\uff0c\u4e00\u6765\u5f88\u4e45\u4e4b\u524d\u5c31\u542c\u8bf4\u6709\u81ea\u5df1\u7684\u535a\u5ba2\u6709\u5229\u4e8e\u4ee5\u540e\u627e\u5de5\u4f5c\uff0c\u4e8c\u6765\u6700\u8fd1\u53d1\u73b0\u4e4b\u524d\u5b66\u7684\u597d\u591a\u7b97\u6cd5\u90fd\u4e0d\u8bb0\u5f97\u4e86\uff0c\u518d\u52a0\u4e0a Mkdocs-Material \u5b9e\u5728\u662f\u5f88\u597d\u770b\uff0c\u6240\u4ee5\u7ec8\u4e8e\u51b3\u5fc3\u5f00\u59cb\u641e\u4e00\u4e2a\u5c5e\u4e8e\u81ea\u5df1\u7684\u535a\u5ba2 \u5728\u8fd9\u91cc\u7acb\u4e00\u4e2a flag\uff1a\u4ee5\u540e\u6bcf\u5b66\u4e00\u4e2a\u7b97\u6cd5\u3001\u6570\u636e\u7ed3\u6784\u6216\u8005\u5176\u4ed6\u4e1c\u897f\uff0c\u81f3\u5c11\u628a\u5199\u7684\u4ee3\u7801\u8d34\u4e0a\u6765\uff0c\u81ea\u5df1\u8ba4\u4e3a\u6bd4\u8f83\u91cd\u8981\u6216\u8005\u96be\u61c2\u7684\u5c31\u8bb0\u70b9\u7b14\u8bb0\uff0c\u65b9\u4fbf\u81ea\u5df1\u4ee5\u540e\u590d\u4e60\u4e5f\u65b9\u4fbf\u5927\u5bb6\u5b66\u4e60 \u5927\u5bb6\u6709\u4ec0\u4e48\u7591\u95ee\u7684\u4e5f\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u76f8\u4e92\u8ba8\u8bba\uff08\u672c\u4eba\u4e0d\u4fdd\u8bc1\u4f1a\u770b\uff09\uff0c\u5982\u679c\u6709\u5e2e\u5230\u5927\u5bb6\uff0c\u8fd8\u671b Star \u4e00\u4e0b\u54c8 \u2014\u2014 Stardust \u4e8e 2020.10.4","title":"\u6b22\u8fce"},{"location":"#_1","text":"\u7b2c\u4e00\u6b21\u642d\u535a\u5ba2\uff0c\u6b22\u8fce\u9875\u5b9e\u5728\u4e0d\u77e5\u9053\u5199\u4ec0\u4e48\uff0c\u5c31\u653e\u4e00\u53e5\u300a\u4e54\u5e03\u65af\u4f20\u300b\u91cc\u5f88\u559c\u6b22\u7684\u8bdd\u5427\uff1a \u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a \u8c28\u4ee5\u6b64\u5171\u52c9\uff01 \u5176\u5b9e\u641e\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u4e0d\u662f\u4e00\u65f6\u5fc3\u8840\u6765\u6f6e\uff0c\u4e00\u6765\u5f88\u4e45\u4e4b\u524d\u5c31\u542c\u8bf4\u6709\u81ea\u5df1\u7684\u535a\u5ba2\u6709\u5229\u4e8e\u4ee5\u540e\u627e\u5de5\u4f5c\uff0c\u4e8c\u6765\u6700\u8fd1\u53d1\u73b0\u4e4b\u524d\u5b66\u7684\u597d\u591a\u7b97\u6cd5\u90fd\u4e0d\u8bb0\u5f97\u4e86\uff0c\u518d\u52a0\u4e0a Mkdocs-Material \u5b9e\u5728\u662f\u5f88\u597d\u770b\uff0c\u6240\u4ee5\u7ec8\u4e8e\u51b3\u5fc3\u5f00\u59cb\u641e\u4e00\u4e2a\u5c5e\u4e8e\u81ea\u5df1\u7684\u535a\u5ba2 \u5728\u8fd9\u91cc\u7acb\u4e00\u4e2a flag\uff1a\u4ee5\u540e\u6bcf\u5b66\u4e00\u4e2a\u7b97\u6cd5\u3001\u6570\u636e\u7ed3\u6784\u6216\u8005\u5176\u4ed6\u4e1c\u897f\uff0c\u81f3\u5c11\u628a\u5199\u7684\u4ee3\u7801\u8d34\u4e0a\u6765\uff0c\u81ea\u5df1\u8ba4\u4e3a\u6bd4\u8f83\u91cd\u8981\u6216\u8005\u96be\u61c2\u7684\u5c31\u8bb0\u70b9\u7b14\u8bb0\uff0c\u65b9\u4fbf\u81ea\u5df1\u4ee5\u540e\u590d\u4e60\u4e5f\u65b9\u4fbf\u5927\u5bb6\u5b66\u4e60 \u5927\u5bb6\u6709\u4ec0\u4e48\u7591\u95ee\u7684\u4e5f\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u76f8\u4e92\u8ba8\u8bba\uff08\u672c\u4eba\u4e0d\u4fdd\u8bc1\u4f1a\u770b\uff09\uff0c\u5982\u679c\u6709\u5e2e\u5230\u5927\u5bb6\uff0c\u8fd8\u671b Star \u4e00\u4e0b\u54c8 \u2014\u2014 Stardust \u4e8e 2020.10.4","title":"\u6b22\u8fce \uff3c( \uff3e\u2200\uff3e)"},{"location":"TODO/","text":"TODO List \u00b6 \u516b\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236 \u4e8c\u7ef4\u6570\u7ec4\u4e0e\u6307\u9488 \u6307\u9488\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 \u81ea\u5df1\u5199\u7684\u5934\u6587\u4ef6\u91cc #include<iostream> cpp \u6587\u4ef6\u91cc\u8fd8\u80fd include \u5417 vector \u91cc\u9762\u7528 enum class \u5f52\u7eb3 static const constexpr enum extern C++\u4e2d\u5bf9\u8c61\u4f5c\u4e3a\u51fd\u6570\u5f62\u53c2\uff0c\u8fd4\u56de\u503c\u65f6\uff0c\u6784\u9020\u51fd\u6570\uff0c\u590d\u5236\u6784\u9020\u51fd\u6570\uff0c\u6790\u6784\u51fd\u6570\u7684\u8c03\u7528\u987a\u5e8f","title":"TODO"},{"location":"TODO/#todo-list","text":"\u516b\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236 \u4e8c\u7ef4\u6570\u7ec4\u4e0e\u6307\u9488 \u6307\u9488\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 \u81ea\u5df1\u5199\u7684\u5934\u6587\u4ef6\u91cc #include<iostream> cpp \u6587\u4ef6\u91cc\u8fd8\u80fd include \u5417 vector \u91cc\u9762\u7528 enum class \u5f52\u7eb3 static const constexpr enum extern C++\u4e2d\u5bf9\u8c61\u4f5c\u4e3a\u51fd\u6570\u5f62\u53c2\uff0c\u8fd4\u56de\u503c\u65f6\uff0c\u6784\u9020\u51fd\u6570\uff0c\u590d\u5236\u6784\u9020\u51fd\u6570\uff0c\u6790\u6784\u51fd\u6570\u7684\u8c03\u7528\u987a\u5e8f","title":"TODO List"},{"location":"algo/dp/core/","text":"DP \u6838\u5fc3 \u00b6 \u5c40\u90e8\u6700\u4f18\u7684\u60c5\u51b5\u8f6c\u79fb\u51fa\u53bb\u5e76\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff08\u8d2a\u5fc3\u4e0d\u80fd\u7528\uff09 \u4f46\u662f\u5c40\u90e8\u6700\u4f18\u4e00\u5b9a\u4e5f\u662f\u7531\u5176\u4ed6\u5c40\u90e8\u6700\u4f18\u7684\u72b6\u6001\u8f6c\u79fb\u5f97\u5230\u7684\uff08DP YES\uff09","title":"DP \u6838\u5fc3"},{"location":"algo/dp/core/#dp","text":"\u5c40\u90e8\u6700\u4f18\u7684\u60c5\u51b5\u8f6c\u79fb\u51fa\u53bb\u5e76\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff08\u8d2a\u5fc3\u4e0d\u80fd\u7528\uff09 \u4f46\u662f\u5c40\u90e8\u6700\u4f18\u4e00\u5b9a\u4e5f\u662f\u7531\u5176\u4ed6\u5c40\u90e8\u6700\u4f18\u7684\u72b6\u6001\u8f6c\u79fb\u5f97\u5230\u7684\uff08DP YES\uff09","title":"DP \u6838\u5fc3"},{"location":"algo/dp/fh/","text":"\u6cdb\u5316\u7269\u54c1 \u00b6","title":"\u6cdb\u5316\u7269\u54c1"},{"location":"algo/dp/fh/#_1","text":"","title":"\u6cdb\u5316\u7269\u54c1"},{"location":"algo/dp/tree/","text":"\u6811\u5f62 DP \u00b6 \u300cLuogu P2015\u300d\u4e8c\u53c9\u82f9\u679c\u6811 \u300cLuogu P1352\u300d\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a","title":"\u6811\u5f62 DP"},{"location":"algo/dp/tree/#dp","text":"\u300cLuogu P2015\u300d\u4e8c\u53c9\u82f9\u679c\u6811 \u300cLuogu P1352\u300d\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a","title":"\u6811\u5f62 DP"},{"location":"algo/dp/pack/0-1/","text":"0-1 \u80cc\u5305 \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u6709 \\(n\\) \u4e2a\u7269\u54c1 \u548c \u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(W\\) \u7684\u80cc\u5305\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u91cd\u91cf \\(w_i\\) \u548c\u4ef7\u503c \\(v_i\\) \u4e24\u79cd\u5c5e\u6027\uff0c\u8981\u6c42\uff1a\u9009\u82e5\u5e72\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u80cc\u5305\u4e2d\u7269\u54c1\u7684 \u603b\u4ef7\u503c\u6700\u5927 \u4e14 \u80cc\u5305\u4e2d\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7\u80cc\u5305\u7684\u5bb9\u91cf \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u00b6 \u72b6\u6001\u5b9a\u4e49 \u00b6 \u8bbe f[i][j] \u8868\u793a\u53ea\u8003\u8651\u524d i \u4e2a\u7269\u54c1\u65f6\uff0c\u5bb9\u91cf\u4e3a j \u7684\u80cc\u5305\u6240\u80fd\u8fbe\u5230\u7684\u6700\u5927\u603b\u4ef7\u503c \u72b6\u6001\u8f6c\u79fb \u00b6 \u51b3\u7b56 \uff1a\u6bcf\u4ef6\u7269\u54c1\u53ea\u6709 \u653e \u548c \u4e0d\u653e \u4e24\u79cd\u53ef\u80fd\u7684\u51b3\u7b56 \u8003\u8651\u7269\u54c1 i \uff1a \u5982\u679c\u4e0d\u653e\u5165 i \uff0c\u80cc\u5305\u5bb9\u91cf\u4e0d\u53d8\uff0c\u6240\u80fd\u8fbe\u5230\u7684\u603b\u4ef7\u503c\u548c i-1 \u4ef6\u7269\u54c1\u76f8\u540c\uff1b \u5982\u679c\u653e\u5165 i \uff0c\u5219\u80cc\u5305\u5bb9\u91cf\u8981\u51cf\u53bb i \u7684\u4f53\u79ef w[i] \uff0c\u603b\u4ef7\u503c\u5728 i-1 \u4ef6\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u6240\u653e\u7269\u54c1\u7684\u4ef7\u503c v[i] \u7efc\u4e0a\u53ef\u5f97 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f[i][j]=max(f[i-1][j],f[i-1][j-w[i]]+v[i]) \u8fb9\u754c\u6761\u4ef6 \u00b6 \u80cc\u5305\u95ee\u9898\u7684\u8fb9\u754c\u6761\u4ef6\u975e\u5e38\u7b80\u5355\uff0c dp \u6570\u7ec4\u5168\u90e8\u521d\u59cb\u5316\u4e3a 0 \u5c31\u597d\u4e86 \u4e0d\u8fc7\u8981\u6ce8\u610f\u6709\u4e00\u7c7b\u53d8\u79cd\uff1a\u5982\u679c\u9898\u76ee\u4e2d\u9644\u52a0\u4e86\u6761\u4ef6 \u201c\u6070\u597d\u88c5\u6ee1\u80cc\u5305\u201d \uff0c\u5219\u521d\u59cb\u5316\u65f6\u9664\u4e86 f[][0] \u521d\u59cb\u5316\u4e3a\u4e3a 0 \uff0c f[][1..V] \u5747\u5e94\u8bbe\u4e3a -INF Note \u51e0\u4e4e\u6240\u6709\u80cc\u5305\u95ee\u9898\u7684\u521d\u59cb\u5316\u90fd\u662f\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00\uff0c\u6240\u4ee5\u5728\u5176\u4ed6\u80cc\u5305\u95ee\u9898\u4e2d\u4e0d\u518d\u8003\u8651\u8fb9\u754c\u6761\u4ef6 \u89c4\u5212\u65b9\u5411 \u00b6 \u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u6240\u6709\u72b6\u6001 \u00b6 \u5148\u770b i \uff1a\u5f88\u660e\u663e\u5e94\u8be5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e i \u518d\u770b j \uff1a\u6709 i \u7684\u5b58\u5728\uff0c j \u7684\u679a\u4e3e\u987a\u5e8f\u968f\u610f \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 0 ; j <= W ; j ++ ) f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i -1 ][ j - w [ i ]] + v [ i ]); \u538b\u7f29\u81f3\u4e00\u7ef4 \u00b6 \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 \u6eda\u52a8\u6570\u7ec4 \u6280\u5de7\uff0c\u4e22\u6389 i \uff0c\u5c06\u7a7a\u95f4\u538b\u7f29\u81f3 \u4e00\u7ef4 \u4f46\u8981\u6ce8\u610f\uff0c\u6b64\u65f6 j \u5e94\u9006\u5e8f\u679a\u4e3e\uff0c\u539f\u56e0\u5982\u4e0b\uff1a \u5df2\u7ecf\u904d\u5386\u7684\u88ab\u66f4\u65b0\u5230\u72b6\u6001 i \uff0c\u6ca1\u6709\u904d\u5386\u7684\u7ef4\u6301 i-1 \u72b6\u6001\uff0c\u6211\u4eec\u8981\u7684 f[j-w[i]] \u662f i-1 \u72b6\u6001\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u4fdd\u8bc1\u66f4\u65b0 f[j] \u7684\u65f6\u5019 f[j-w[i]] \u8fd8\u662f i-1 \u7684\u72b6\u6001\u7684\uff0c\u6240\u4ee5\u8981\u9006\u5e8f\u679a\u4e3e \u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5728\u5728\u8003\u8651\u7b2c i-1 \u4ef6\u7269\u54c1\u65f6\u53ea\u80fd\u505a\u4e00\u6b21\u51b3\u7b56\uff0c\u505a\u5b8c\u8fd9\u6b21\u51b3\u7b56\u5c31\u8981\u7acb\u9a6c\u8003\u8651\u4e0b\u4e00\u4e2a\u7269\u54c1 i \uff0c\u5426\u5219\u5c31\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u7269\u54c1\u4e0a\u505a\u591a\u6b21\u51b3\u7b56\uff0c\u800c\u8fd9\u662f\u4e0d\u5141\u8bb8\u7684 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = W ; j >= 0 ; j -- ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]); \u5c0f\u4f18\u5316 \u00b6 \u4e0d\u53eb\u4f18\u5316\u7684\u4f18\u5316... 1 2 3 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = W ; j >= w [ i ]; j -- ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]); \u770b\u770b\u771f\u6b63\u7684\u4f18\u5316\uff0c\u5728 W \u8f83\u5927\u7684\u65f6\u5019\u6bd4\u8f83\u6709\u7528 \u5bf9\u4e8e\u6700\u540e\u4e00\u4ef6\u7269\u54c1 f[W] \uff0c\u53ea\u8981\u77e5\u9053 f[W-w[n]] \u5373\u53ef\uff1b\u5bf9\u4e8e\u5012\u6570\u7b2c\u4e8c\u4ef6\u7269\u54c1 f[W-w[n]] \uff0c\u53ea\u8981\u77e5\u9053 f[W-w[n...n-1] \u5373\u53ef \u4f9d\u6b64\u7c7b\u63a8\uff0c\u5bf9\u4e8e\u7b2c i \u4ef6\u7269\u54c1\uff0c\u53ea\u8981\u77e5\u9053 f[W-w[n...i])] \u5373\u53ef\uff0c\u6240\u4ee5\u53ef\u4ee5\u6709\u5982\u4e0b\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 for ( int i = n ; i >= 1 ; i -- ) sum [ i ] += w [ i ]; // sum[i] \u9884\u5904\u7406\u6210 i..n \u7269\u54c1\u7684 w[i] \u548c for ( int i = 1 ; i <= n ; i ++ ){ bound = max ( W - sum [ i ], w [ i ]); for ( int j = W ; j >= w [ i ]; j -- ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]); }","title":"0-1 \u80cc\u5305"},{"location":"algo/dp/pack/0-1/#0-1","text":"","title":"0-1 \u80cc\u5305"},{"location":"algo/dp/pack/0-1/#_1","text":"\u6709 \\(n\\) \u4e2a\u7269\u54c1 \u548c \u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(W\\) \u7684\u80cc\u5305\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u91cd\u91cf \\(w_i\\) \u548c\u4ef7\u503c \\(v_i\\) \u4e24\u79cd\u5c5e\u6027\uff0c\u8981\u6c42\uff1a\u9009\u82e5\u5e72\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u80cc\u5305\u4e2d\u7269\u54c1\u7684 \u603b\u4ef7\u503c\u6700\u5927 \u4e14 \u80cc\u5305\u4e2d\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7\u80cc\u5305\u7684\u5bb9\u91cf","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"algo/dp/pack/0-1/#_2","text":"","title":"\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b"},{"location":"algo/dp/pack/0-1/#_3","text":"\u8bbe f[i][j] \u8868\u793a\u53ea\u8003\u8651\u524d i \u4e2a\u7269\u54c1\u65f6\uff0c\u5bb9\u91cf\u4e3a j \u7684\u80cc\u5305\u6240\u80fd\u8fbe\u5230\u7684\u6700\u5927\u603b\u4ef7\u503c","title":"\u72b6\u6001\u5b9a\u4e49"},{"location":"algo/dp/pack/0-1/#_4","text":"\u51b3\u7b56 \uff1a\u6bcf\u4ef6\u7269\u54c1\u53ea\u6709 \u653e \u548c \u4e0d\u653e \u4e24\u79cd\u53ef\u80fd\u7684\u51b3\u7b56 \u8003\u8651\u7269\u54c1 i \uff1a \u5982\u679c\u4e0d\u653e\u5165 i \uff0c\u80cc\u5305\u5bb9\u91cf\u4e0d\u53d8\uff0c\u6240\u80fd\u8fbe\u5230\u7684\u603b\u4ef7\u503c\u548c i-1 \u4ef6\u7269\u54c1\u76f8\u540c\uff1b \u5982\u679c\u653e\u5165 i \uff0c\u5219\u80cc\u5305\u5bb9\u91cf\u8981\u51cf\u53bb i \u7684\u4f53\u79ef w[i] \uff0c\u603b\u4ef7\u503c\u5728 i-1 \u4ef6\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u6240\u653e\u7269\u54c1\u7684\u4ef7\u503c v[i] \u7efc\u4e0a\u53ef\u5f97 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f[i][j]=max(f[i-1][j],f[i-1][j-w[i]]+v[i])","title":"\u72b6\u6001\u8f6c\u79fb"},{"location":"algo/dp/pack/0-1/#_5","text":"\u80cc\u5305\u95ee\u9898\u7684\u8fb9\u754c\u6761\u4ef6\u975e\u5e38\u7b80\u5355\uff0c dp \u6570\u7ec4\u5168\u90e8\u521d\u59cb\u5316\u4e3a 0 \u5c31\u597d\u4e86 \u4e0d\u8fc7\u8981\u6ce8\u610f\u6709\u4e00\u7c7b\u53d8\u79cd\uff1a\u5982\u679c\u9898\u76ee\u4e2d\u9644\u52a0\u4e86\u6761\u4ef6 \u201c\u6070\u597d\u88c5\u6ee1\u80cc\u5305\u201d \uff0c\u5219\u521d\u59cb\u5316\u65f6\u9664\u4e86 f[][0] \u521d\u59cb\u5316\u4e3a\u4e3a 0 \uff0c f[][1..V] \u5747\u5e94\u8bbe\u4e3a -INF Note \u51e0\u4e4e\u6240\u6709\u80cc\u5305\u95ee\u9898\u7684\u521d\u59cb\u5316\u90fd\u662f\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00\uff0c\u6240\u4ee5\u5728\u5176\u4ed6\u80cc\u5305\u95ee\u9898\u4e2d\u4e0d\u518d\u8003\u8651\u8fb9\u754c\u6761\u4ef6","title":"\u8fb9\u754c\u6761\u4ef6"},{"location":"algo/dp/pack/0-1/#_6","text":"","title":"\u89c4\u5212\u65b9\u5411"},{"location":"algo/dp/pack/0-1/#_7","text":"\u5148\u770b i \uff1a\u5f88\u660e\u663e\u5e94\u8be5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e i \u518d\u770b j \uff1a\u6709 i \u7684\u5b58\u5728\uff0c j \u7684\u679a\u4e3e\u987a\u5e8f\u968f\u610f \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 0 ; j <= W ; j ++ ) f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i -1 ][ j - w [ i ]] + v [ i ]);","title":"\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u6240\u6709\u72b6\u6001"},{"location":"algo/dp/pack/0-1/#_8","text":"\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 \u6eda\u52a8\u6570\u7ec4 \u6280\u5de7\uff0c\u4e22\u6389 i \uff0c\u5c06\u7a7a\u95f4\u538b\u7f29\u81f3 \u4e00\u7ef4 \u4f46\u8981\u6ce8\u610f\uff0c\u6b64\u65f6 j \u5e94\u9006\u5e8f\u679a\u4e3e\uff0c\u539f\u56e0\u5982\u4e0b\uff1a \u5df2\u7ecf\u904d\u5386\u7684\u88ab\u66f4\u65b0\u5230\u72b6\u6001 i \uff0c\u6ca1\u6709\u904d\u5386\u7684\u7ef4\u6301 i-1 \u72b6\u6001\uff0c\u6211\u4eec\u8981\u7684 f[j-w[i]] \u662f i-1 \u72b6\u6001\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u4fdd\u8bc1\u66f4\u65b0 f[j] \u7684\u65f6\u5019 f[j-w[i]] \u8fd8\u662f i-1 \u7684\u72b6\u6001\u7684\uff0c\u6240\u4ee5\u8981\u9006\u5e8f\u679a\u4e3e \u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5728\u5728\u8003\u8651\u7b2c i-1 \u4ef6\u7269\u54c1\u65f6\u53ea\u80fd\u505a\u4e00\u6b21\u51b3\u7b56\uff0c\u505a\u5b8c\u8fd9\u6b21\u51b3\u7b56\u5c31\u8981\u7acb\u9a6c\u8003\u8651\u4e0b\u4e00\u4e2a\u7269\u54c1 i \uff0c\u5426\u5219\u5c31\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u7269\u54c1\u4e0a\u505a\u591a\u6b21\u51b3\u7b56\uff0c\u800c\u8fd9\u662f\u4e0d\u5141\u8bb8\u7684 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = W ; j >= 0 ; j -- ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]);","title":"\u538b\u7f29\u81f3\u4e00\u7ef4"},{"location":"algo/dp/pack/0-1/#_9","text":"\u4e0d\u53eb\u4f18\u5316\u7684\u4f18\u5316... 1 2 3 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = W ; j >= w [ i ]; j -- ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]); \u770b\u770b\u771f\u6b63\u7684\u4f18\u5316\uff0c\u5728 W \u8f83\u5927\u7684\u65f6\u5019\u6bd4\u8f83\u6709\u7528 \u5bf9\u4e8e\u6700\u540e\u4e00\u4ef6\u7269\u54c1 f[W] \uff0c\u53ea\u8981\u77e5\u9053 f[W-w[n]] \u5373\u53ef\uff1b\u5bf9\u4e8e\u5012\u6570\u7b2c\u4e8c\u4ef6\u7269\u54c1 f[W-w[n]] \uff0c\u53ea\u8981\u77e5\u9053 f[W-w[n...n-1] \u5373\u53ef \u4f9d\u6b64\u7c7b\u63a8\uff0c\u5bf9\u4e8e\u7b2c i \u4ef6\u7269\u54c1\uff0c\u53ea\u8981\u77e5\u9053 f[W-w[n...i])] \u5373\u53ef\uff0c\u6240\u4ee5\u53ef\u4ee5\u6709\u5982\u4e0b\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 for ( int i = n ; i >= 1 ; i -- ) sum [ i ] += w [ i ]; // sum[i] \u9884\u5904\u7406\u6210 i..n \u7269\u54c1\u7684 w[i] \u548c for ( int i = 1 ; i <= n ; i ++ ){ bound = max ( W - sum [ i ], w [ i ]); for ( int j = W ; j >= w [ i ]; j -- ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]); }","title":"\u5c0f\u4f18\u5316"},{"location":"algo/dp/pack/dc/","text":"\u591a\u91cd\u80cc\u5305 \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u6709 \\(n\\) \u79cd \u7269\u54c1\uff08 \u6bcf\u79cd\u7269\u54c1\u6709 \\(N_i\\) \u4e2a \uff09 \u548c \u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(W\\) \u7684\u80cc\u5305\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u91cd\u91cf \\(w_i\\) \u548c\u4ef7\u503c \\(v_i\\) \u4e24\u79cd\u5c5e\u6027\uff0c\u8981\u6c42\uff1a\u9009\u82e5\u5e72\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u80cc\u5305\u4e2d\u7269\u54c1\u7684 \u603b\u4ef7\u503c\u6700\u5927 \u4e14 \u80cc\u5305\u4e2d\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7\u80cc\u5305\u7684\u5bb9\u91cf \u6734\u7d20\u505a\u6cd5 \u00b6 \u4e0e \u5b8c\u5168\u80cc\u5305\u95ee\u9898 \u7c7b\u4f3c\uff0c\u8003\u8651\u5bf9\u6bcf\u4ef6\u7269\u54c1\uff0c\u679a\u4e3e\u5176\u9009\u62e9\u4ef6\u6570\uff0c\u5f97\u5230 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f[i][j]=max(f[i-1][j-k*w[i]])+k*v[i] \uff0c\u5176\u4e2d 0<=k<=N[i] \u53e6\u4e00\u79cd\u601d\u8def\u662f \u5c06\u5176\u8f6c\u5316\u4e3a 0-1 \u80cc\u5305 \u95ee\u9898\uff1a \u53ea\u8981\u628a \u201c\u79cd\u201d \u6362\u6210 \u201c\u4e2a\u201d \u5c31\u597d\u4e86\uff0c\u4e5f\u5c31\u662f\u628a \u6bcf\u79cd\u7269\u54c1\u6709 \\(N_i\\) \u4e2a \u62c6\u6210 \\(N_i\\) \u4e2a\u76f8\u540c\u7684\u7269\u54c1 \uff0c\u518d\u7528 0-1 \u80cc\u5305\u7684\u65b9\u6cd5\u5c31\u53ef\u4ee5\u6c42\u89e3\u4e86 \u53ef\u4ee5\u53d1\u73b0\uff0c\u4e24\u79cd\u601d\u8def\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f \\(\\displaystyle O\\Big(W\u00d7\\sum_{i=1}^nN_i\\Big)\\) \u4f18\u5316 \u00b6 \u53ef\u4ee5\u770b\u5230\uff0c\u4e0a\u9762\u4e24\u79cd\u601d\u8def\u5b9e\u9645\u4e0a\u90fd\u662f\u5728\u8003\u8651\u7b2c i \u79cd\u7269\u54c1\u65f6\uff0c\u5c06 f[i] \u62c6\u6210 \\(N_i\\) \u4e2a\u5b50\u72b6\u6001\uff0c\u6bcf\u4e2a\u5b50\u72b6\u6001\u5bf9\u5e94\u4e00\u4ef6 i \u7269\u54c1 \uff0c\u518d\u5bf9\u6bcf\u4e2a\u5b50\u72b6\u6001\u5e94\u7528\u51b3\u7b56\uff08\u53d6-\u4e0d\u53d6\uff09 \u5982\u679c\u9009\u4e24\u4ef6 i \u7269\u54c1\u8981\u600e\u6837\u505a\u5462\uff1f\u5f88\u660e\u663e\uff0c\u5728\u62c6\u51fa\u6765\u7684 \\(N_i\\) \u4e2a\u5b50\u72b6\u6001\u4efb\u9009\u4e24\u4e2a\u5e94\u7528\u51b3\u7b56 \u201c\u53d6\u201d\uff0c\u5176\u4ed6\u7684\u90fd\u5e94\u7528\u51b3\u7b56 \u201c\u4e0d\u53d6\u201d \u5373\u53ef\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c \u4efb\u9009\u4e24\u4e2a \u5c06\u5bfc\u81f4\u5927\u91cf\u91cd\u590d\u64cd\u4f5c \u600e\u4e48\u4f18\u5316\u5462\uff1f \u500d\u589e\u62c6\u5206 \u00b6 \u6211\u4eec\u53ef\u4ee5\u5728\u62c6\u5206\u65f6\u4e0d\u628a f[i] \u5b8c\u5168\u62c6\u6563 \uff0c\u800c\u662f\u91c7\u7528 \u500d\u589e \u7684\u601d\u60f3\uff0c\u5c06\u5176\u62c6\u6210\u5927\u5c0f\u4e3a 1,2,4,8,... \u7684\u5c0f\u5757 \u6211\u4eec\u77e5\u9053\uff0c \u4efb\u610f\u6b63\u6574\u6570\u90fd\u80fd\u8868\u793a\u4e3a 2 \u7684\u4e0d\u540c\u5e42\u6b21\u4e4b\u548c \uff0c\u6240\u4ee5\u8fd9\u6837\u62c6\u5206\u540e\uff0c\u4e0d\u7ba1\u9009\u51e0\u4e2a\u90fd\u53ef\u4ee5\u901a\u8fc7\u9009 \u201c\u5c0f\u5757\u201d \u5b9e\u73b0\u4e86 \u5982\u679c N[i] \u4e0d\u662f 2 \u7684\u8fde\u7eed\u5e42\u6b21\u4e4b\u548c \u600e\u4e48\u529e\u5462\uff1f\u628a\u591a\u51fa\u6765\u7684\u4f5c\u4e3a\u4e00\u4e2a\u5757\u5c31\u597d\u4e86\uff0c\u5757\u5927\u5c0f\u4e3a \\[N-2^{\\lfloor\\log_2{(N+1)}\\rfloor-1}\\] \u6bd4\u5982\uff1a \\(18=(1+2+4+8)+3\\) \u5355\u8c03\u961f\u5217\u4f18\u5316 \u00b6 $('#handout_wrap_inner').media({ width: '100%', height: '100%', autoplay: true, src:'http://storage.xuetangx.com/public_assets/xuetangx/PDF/PlayerAPI_v1.0.6.pdf', });","title":"\u591a\u91cd\u80cc\u5305"},{"location":"algo/dp/pack/dc/#_1","text":"","title":"\u591a\u91cd\u80cc\u5305"},{"location":"algo/dp/pack/dc/#_2","text":"\u6709 \\(n\\) \u79cd \u7269\u54c1\uff08 \u6bcf\u79cd\u7269\u54c1\u6709 \\(N_i\\) \u4e2a \uff09 \u548c \u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(W\\) \u7684\u80cc\u5305\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u91cd\u91cf \\(w_i\\) \u548c\u4ef7\u503c \\(v_i\\) \u4e24\u79cd\u5c5e\u6027\uff0c\u8981\u6c42\uff1a\u9009\u82e5\u5e72\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u80cc\u5305\u4e2d\u7269\u54c1\u7684 \u603b\u4ef7\u503c\u6700\u5927 \u4e14 \u80cc\u5305\u4e2d\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7\u80cc\u5305\u7684\u5bb9\u91cf","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"algo/dp/pack/dc/#_3","text":"\u4e0e \u5b8c\u5168\u80cc\u5305\u95ee\u9898 \u7c7b\u4f3c\uff0c\u8003\u8651\u5bf9\u6bcf\u4ef6\u7269\u54c1\uff0c\u679a\u4e3e\u5176\u9009\u62e9\u4ef6\u6570\uff0c\u5f97\u5230 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f[i][j]=max(f[i-1][j-k*w[i]])+k*v[i] \uff0c\u5176\u4e2d 0<=k<=N[i] \u53e6\u4e00\u79cd\u601d\u8def\u662f \u5c06\u5176\u8f6c\u5316\u4e3a 0-1 \u80cc\u5305 \u95ee\u9898\uff1a \u53ea\u8981\u628a \u201c\u79cd\u201d \u6362\u6210 \u201c\u4e2a\u201d \u5c31\u597d\u4e86\uff0c\u4e5f\u5c31\u662f\u628a \u6bcf\u79cd\u7269\u54c1\u6709 \\(N_i\\) \u4e2a \u62c6\u6210 \\(N_i\\) \u4e2a\u76f8\u540c\u7684\u7269\u54c1 \uff0c\u518d\u7528 0-1 \u80cc\u5305\u7684\u65b9\u6cd5\u5c31\u53ef\u4ee5\u6c42\u89e3\u4e86 \u53ef\u4ee5\u53d1\u73b0\uff0c\u4e24\u79cd\u601d\u8def\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f \\(\\displaystyle O\\Big(W\u00d7\\sum_{i=1}^nN_i\\Big)\\)","title":"\u6734\u7d20\u505a\u6cd5"},{"location":"algo/dp/pack/dc/#_4","text":"\u53ef\u4ee5\u770b\u5230\uff0c\u4e0a\u9762\u4e24\u79cd\u601d\u8def\u5b9e\u9645\u4e0a\u90fd\u662f\u5728\u8003\u8651\u7b2c i \u79cd\u7269\u54c1\u65f6\uff0c\u5c06 f[i] \u62c6\u6210 \\(N_i\\) \u4e2a\u5b50\u72b6\u6001\uff0c\u6bcf\u4e2a\u5b50\u72b6\u6001\u5bf9\u5e94\u4e00\u4ef6 i \u7269\u54c1 \uff0c\u518d\u5bf9\u6bcf\u4e2a\u5b50\u72b6\u6001\u5e94\u7528\u51b3\u7b56\uff08\u53d6-\u4e0d\u53d6\uff09 \u5982\u679c\u9009\u4e24\u4ef6 i \u7269\u54c1\u8981\u600e\u6837\u505a\u5462\uff1f\u5f88\u660e\u663e\uff0c\u5728\u62c6\u51fa\u6765\u7684 \\(N_i\\) \u4e2a\u5b50\u72b6\u6001\u4efb\u9009\u4e24\u4e2a\u5e94\u7528\u51b3\u7b56 \u201c\u53d6\u201d\uff0c\u5176\u4ed6\u7684\u90fd\u5e94\u7528\u51b3\u7b56 \u201c\u4e0d\u53d6\u201d \u5373\u53ef\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c \u4efb\u9009\u4e24\u4e2a \u5c06\u5bfc\u81f4\u5927\u91cf\u91cd\u590d\u64cd\u4f5c \u600e\u4e48\u4f18\u5316\u5462\uff1f","title":"\u4f18\u5316"},{"location":"algo/dp/pack/dc/#_5","text":"\u6211\u4eec\u53ef\u4ee5\u5728\u62c6\u5206\u65f6\u4e0d\u628a f[i] \u5b8c\u5168\u62c6\u6563 \uff0c\u800c\u662f\u91c7\u7528 \u500d\u589e \u7684\u601d\u60f3\uff0c\u5c06\u5176\u62c6\u6210\u5927\u5c0f\u4e3a 1,2,4,8,... \u7684\u5c0f\u5757 \u6211\u4eec\u77e5\u9053\uff0c \u4efb\u610f\u6b63\u6574\u6570\u90fd\u80fd\u8868\u793a\u4e3a 2 \u7684\u4e0d\u540c\u5e42\u6b21\u4e4b\u548c \uff0c\u6240\u4ee5\u8fd9\u6837\u62c6\u5206\u540e\uff0c\u4e0d\u7ba1\u9009\u51e0\u4e2a\u90fd\u53ef\u4ee5\u901a\u8fc7\u9009 \u201c\u5c0f\u5757\u201d \u5b9e\u73b0\u4e86 \u5982\u679c N[i] \u4e0d\u662f 2 \u7684\u8fde\u7eed\u5e42\u6b21\u4e4b\u548c \u600e\u4e48\u529e\u5462\uff1f\u628a\u591a\u51fa\u6765\u7684\u4f5c\u4e3a\u4e00\u4e2a\u5757\u5c31\u597d\u4e86\uff0c\u5757\u5927\u5c0f\u4e3a \\[N-2^{\\lfloor\\log_2{(N+1)}\\rfloor-1}\\] \u6bd4\u5982\uff1a \\(18=(1+2+4+8)+3\\)","title":"\u500d\u589e\u62c6\u5206"},{"location":"algo/dp/pack/dc/#_6","text":"$('#handout_wrap_inner').media({ width: '100%', height: '100%', autoplay: true, src:'http://storage.xuetangx.com/public_assets/xuetangx/PDF/PlayerAPI_v1.0.6.pdf', });","title":"\u5355\u8c03\u961f\u5217\u4f18\u5316"},{"location":"algo/dp/pack/ew/","text":"\u4e8c\u7ef4\u8d39\u7528\u80cc\u5305 \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f \u9650\u5236\u6761\u4ef6\u6709\u4e24\u4e2a \u7684\u60c5\u51b5 \u65b9\u6cd5 \u00b6 \u518d\u591a\u5f00\u4e00\u7ef4\u5373\u53ef \u4e8c\u7ef4 0-1 \u80cc\u5305 \u00b6 \u5148\u4e0a\u4f8b\u9898\uff1a \u300cLuogu P1855\u300d\u69a8\u53d6 kkksc03 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u00b6 f[i][j][k]=max(f[i-1][j][k],f[i-1][j-v[i]][k-w[i]]+c[i]) \u540c\u6837\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u6389\u4e00\u7ef4\uff0c\u538b\u7f29\u81f3\u4e8c\u7ef4\uff0c\u5f97\u5230\uff1a f[j][k]=max(f[j][k],f[j-v[i]][k-w[i]]+c[i]) \u8003\u8651\u679a\u4e3e\u987a\u5e8f\uff0c\u8981\u4fdd\u8bc1 f[j][k] \u5148\u4e8e f[j-v[i][k-w[i]] \u66f4\u65b0\uff0c\u6545\u5e94\u9006\u5e8f\u679a\u4e3e j \u3001 k \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int j = V ; j >= 0 ; j -- ) for ( int k = W ; k >= 0 ; k -- ) f [ j ][ k ] = max ( f [ j ][ k ], f [ j - v [ i ]][ k - w [ i ]] + c [ i ]); \u4e8c\u7ef4\u5b8c\u5168\u80cc\u5305 \u00b6 \u4e0a\u4f8b\u9898\uff1a\u6ca1\u627e\u5230 qwq 0-1 \u80cc\u5305\u679a\u4e3e\u987a\u5e8f\u6539\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int j = 0 ; j <= V ; j ++ ) for ( int k = 0 ; k <= W ; k ++ ) f [ j ][ k ] = max ( f [ j ][ k ], f [ j - v [ i ]][ k - w [ i ]] + c [ i ]); \u4e8c\u7ef4\u591a\u91cd\u80cc\u5305 \u00b6 \u4e0a\u4f8b\u9898\uff1a\u4e5f\u6ca1\u627e\u5230 qwq \u603b\u4e4b\u5f88\u7b80\u5355\u62c9","title":"\u4e8c\u7ef4\u8d39\u7528\u80cc\u5305"},{"location":"algo/dp/pack/ew/#_1","text":"","title":"\u4e8c\u7ef4\u8d39\u7528\u80cc\u5305"},{"location":"algo/dp/pack/ew/#_2","text":"\u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f \u9650\u5236\u6761\u4ef6\u6709\u4e24\u4e2a \u7684\u60c5\u51b5","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"algo/dp/pack/ew/#_3","text":"\u518d\u591a\u5f00\u4e00\u7ef4\u5373\u53ef","title":"\u65b9\u6cd5"},{"location":"algo/dp/pack/ew/#0-1","text":"\u5148\u4e0a\u4f8b\u9898\uff1a \u300cLuogu P1855\u300d\u69a8\u53d6 kkksc03","title":"\u4e8c\u7ef4 0-1 \u80cc\u5305"},{"location":"algo/dp/pack/ew/#_4","text":"f[i][j][k]=max(f[i-1][j][k],f[i-1][j-v[i]][k-w[i]]+c[i]) \u540c\u6837\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u6389\u4e00\u7ef4\uff0c\u538b\u7f29\u81f3\u4e8c\u7ef4\uff0c\u5f97\u5230\uff1a f[j][k]=max(f[j][k],f[j-v[i]][k-w[i]]+c[i]) \u8003\u8651\u679a\u4e3e\u987a\u5e8f\uff0c\u8981\u4fdd\u8bc1 f[j][k] \u5148\u4e8e f[j-v[i][k-w[i]] \u66f4\u65b0\uff0c\u6545\u5e94\u9006\u5e8f\u679a\u4e3e j \u3001 k \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int j = V ; j >= 0 ; j -- ) for ( int k = W ; k >= 0 ; k -- ) f [ j ][ k ] = max ( f [ j ][ k ], f [ j - v [ i ]][ k - w [ i ]] + c [ i ]);","title":"\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b"},{"location":"algo/dp/pack/ew/#_5","text":"\u4e0a\u4f8b\u9898\uff1a\u6ca1\u627e\u5230 qwq 0-1 \u80cc\u5305\u679a\u4e3e\u987a\u5e8f\u6539\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int j = 0 ; j <= V ; j ++ ) for ( int k = 0 ; k <= W ; k ++ ) f [ j ][ k ] = max ( f [ j ][ k ], f [ j - v [ i ]][ k - w [ i ]] + c [ i ]);","title":"\u4e8c\u7ef4\u5b8c\u5168\u80cc\u5305"},{"location":"algo/dp/pack/ew/#_6","text":"\u4e0a\u4f8b\u9898\uff1a\u4e5f\u6ca1\u627e\u5230 qwq \u603b\u4e4b\u5f88\u7b80\u5355\u62c9","title":"\u4e8c\u7ef4\u591a\u91cd\u80cc\u5305"},{"location":"algo/dp/pack/fz/","text":"\u5206\u7ec4\u80cc\u5305 \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u6240\u7ed9\u7684\u7269\u54c1\u88ab\u5212\u5206\u4e3a\u82e5\u5e72\u7ec4\uff0c \u540c\u4e00\u7ec4\u7684\u7269\u54c1\u4e92\u76f8\u51b2\u7a81\uff0c\u6700\u591a\u9009\u4e00\u4ef6 \u6bd4\u5982\u4f60\u53bb\u65c5\u6e38\u8981\u5e26\u624b\u673a\uff08\u7ec4\uff09\uff0c\u4f60\u53ea\u80fd\u4ece\u4f60\u7684\u4e00\u5806\u624b\u673a\u4e2d\u6311\u4e00\u4e2a\u5e26\u4e0a\uff08\u4e0d\u540c\u624b\u673a\u95f4\u4e92\u65a5\uff09 \u65b9\u6cd5 \u00b6 \u5206\u7ec4 0-1 \u80cc\u5305 \u00b6 \u5148\u4e0a\u4f8b\u9898\uff1a \u300cLuogu P1757\u300d\u901a\u5929\u4e4b\u5206\u7ec4\u80cc\u5305 \u51b3\u7b56 \uff1a\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\uff0c\u8981\u4e48\u4ece\u8fd9\u4e00\u7ec4\u9009 \u4e00\u4e2a \uff0c\u8981\u4e48\u4e0d\u9009 \u5bb9\u6613\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[k][j]=max(f[k-1][j],f[k-1][j-w[i]]+v[i]) \u5176\u4e2d i \u5c5e\u4e8e\u7b2c k \u7ec4 \u540c\u6837\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u6389\u4e00\u7ef4\uff0c\u538b\u7f29\u81f3\u4e00\u7ef4\uff0c\u5f97\u5230\uff1a f[j]=max(f[j],f[j-w[i]]+v[i]) \u5176\u4e2d i \u5c5e\u4e8e\u7b2c k \u7ec4 \u8003\u8651\u679a\u4e3e\u987a\u5e8f\uff0c\u8981\u4fdd\u8bc1 f[j] \u5148\u4e8e f[j-w[i]] \u66f4\u65b0\uff0c\u6545\u5e94\u9006\u5e8f\u679a\u4e3e j \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 for ( int k = 1 ; k <= n ; k ++ ) for ( int j = W ; j >= 0 ; j -- ) for ( int i = 0 ; i < cnt [ j ]; i ++ ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]); \u5206\u7ec4\u5b8c\u5168\u80cc\u5305 \u00b6 \u5206\u7ec4\u591a\u91cd\u80cc\u5305 \u00b6","title":"\u5206\u7ec4\u80cc\u5305"},{"location":"algo/dp/pack/fz/#_1","text":"","title":"\u5206\u7ec4\u80cc\u5305"},{"location":"algo/dp/pack/fz/#_2","text":"\u6240\u7ed9\u7684\u7269\u54c1\u88ab\u5212\u5206\u4e3a\u82e5\u5e72\u7ec4\uff0c \u540c\u4e00\u7ec4\u7684\u7269\u54c1\u4e92\u76f8\u51b2\u7a81\uff0c\u6700\u591a\u9009\u4e00\u4ef6 \u6bd4\u5982\u4f60\u53bb\u65c5\u6e38\u8981\u5e26\u624b\u673a\uff08\u7ec4\uff09\uff0c\u4f60\u53ea\u80fd\u4ece\u4f60\u7684\u4e00\u5806\u624b\u673a\u4e2d\u6311\u4e00\u4e2a\u5e26\u4e0a\uff08\u4e0d\u540c\u624b\u673a\u95f4\u4e92\u65a5\uff09","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"algo/dp/pack/fz/#_3","text":"","title":"\u65b9\u6cd5"},{"location":"algo/dp/pack/fz/#0-1","text":"\u5148\u4e0a\u4f8b\u9898\uff1a \u300cLuogu P1757\u300d\u901a\u5929\u4e4b\u5206\u7ec4\u80cc\u5305 \u51b3\u7b56 \uff1a\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\uff0c\u8981\u4e48\u4ece\u8fd9\u4e00\u7ec4\u9009 \u4e00\u4e2a \uff0c\u8981\u4e48\u4e0d\u9009 \u5bb9\u6613\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[k][j]=max(f[k-1][j],f[k-1][j-w[i]]+v[i]) \u5176\u4e2d i \u5c5e\u4e8e\u7b2c k \u7ec4 \u540c\u6837\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u6389\u4e00\u7ef4\uff0c\u538b\u7f29\u81f3\u4e00\u7ef4\uff0c\u5f97\u5230\uff1a f[j]=max(f[j],f[j-w[i]]+v[i]) \u5176\u4e2d i \u5c5e\u4e8e\u7b2c k \u7ec4 \u8003\u8651\u679a\u4e3e\u987a\u5e8f\uff0c\u8981\u4fdd\u8bc1 f[j] \u5148\u4e8e f[j-w[i]] \u66f4\u65b0\uff0c\u6545\u5e94\u9006\u5e8f\u679a\u4e3e j \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 for ( int k = 1 ; k <= n ; k ++ ) for ( int j = W ; j >= 0 ; j -- ) for ( int i = 0 ; i < cnt [ j ]; i ++ ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]);","title":"\u5206\u7ec4 0-1 \u80cc\u5305"},{"location":"algo/dp/pack/fz/#_4","text":"","title":"\u5206\u7ec4\u5b8c\u5168\u80cc\u5305"},{"location":"algo/dp/pack/fz/#_5","text":"","title":"\u5206\u7ec4\u591a\u91cd\u80cc\u5305"},{"location":"algo/dp/pack/hh/","text":"\u6df7\u5408\u80cc\u5305 \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u6709\u4e9b\u4e1c\u897f\u53ea\u6709\u4e00\u4e2a\uff0c\u6709\u4e9b\u4e1c\u897f\u6709\u65e0\u9650\u4e2a\uff0c\u6709\u4e9b\u4e1c\u897f\u6709 \\(N\\) \u4e2a \u89e3\u6cd5 \u00b6 \u4e0d\u5c31\u662f\u628a\u524d\u9762\u8bb2\u7684\u4e09\u79cd\u80cc\u5305\u6df7\u5728\u4e00\u8d77\u4e86\uff0c\u5224\u65ad\u4e00\u4e0b\u5c31\u597d\u4e86...... 1 2 3 4 5 6 if ( 0-1 \u80cc\u5305 ){ // ... } else if ( \u5b8c\u5168\u80cc\u5305 ){ // ... } else if ( \u591a\u91cd\u80cc\u5305 ) // ...","title":"\u6df7\u5408\u80cc\u5305"},{"location":"algo/dp/pack/hh/#_1","text":"","title":"\u6df7\u5408\u80cc\u5305"},{"location":"algo/dp/pack/hh/#_2","text":"\u6709\u4e9b\u4e1c\u897f\u53ea\u6709\u4e00\u4e2a\uff0c\u6709\u4e9b\u4e1c\u897f\u6709\u65e0\u9650\u4e2a\uff0c\u6709\u4e9b\u4e1c\u897f\u6709 \\(N\\) \u4e2a","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"algo/dp/pack/hh/#_3","text":"\u4e0d\u5c31\u662f\u628a\u524d\u9762\u8bb2\u7684\u4e09\u79cd\u80cc\u5305\u6df7\u5728\u4e00\u8d77\u4e86\uff0c\u5224\u65ad\u4e00\u4e0b\u5c31\u597d\u4e86...... 1 2 3 4 5 6 if ( 0-1 \u80cc\u5305 ){ // ... } else if ( \u5b8c\u5168\u80cc\u5305 ){ // ... } else if ( \u591a\u91cd\u80cc\u5305 ) // ...","title":"\u89e3\u6cd5"},{"location":"algo/dp/pack/wq/","text":"\u5b8c\u5168\u80cc\u5305\u95ee\u9898 \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u6709 \\(n\\) \u79cd \u7269\u54c1\uff08 \u6bcf\u79cd\u7269\u54c1\u6709 \u65e0\u9650\u4ef6 \uff09 \u548c \u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(W\\) \u7684\u80cc\u5305\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u91cd\u91cf \\(w_i\\) \u548c\u4ef7\u503c \\(v_i\\) \u4e24\u79cd\u5c5e\u6027\uff0c\u8981\u6c42\uff1a\u9009\u82e5\u5e72\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u80cc\u5305\u4e2d\u7269\u54c1\u7684 \u603b\u4ef7\u503c\u6700\u5927 \u4e14 \u80cc\u5305\u4e2d\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7\u80cc\u5305\u7684\u5bb9\u91cf \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u00b6 \u72b6\u6001\u5b9a\u4e49 \u00b6 \u4e0e 0-1 \u80cc\u5305\u5b8c\u5168\u76f8\u540c\uff0c\u8bbe f[i][j] \u8868\u793a\u53ea\u8003\u8651\u524d i \u4e2a\u7269\u54c1\u65f6\uff0c\u5bb9\u91cf\u4e3a j \u7684\u80cc\u5305\u6240\u80fd\u8fbe\u5230\u7684\u6700\u5927\u603b\u4ef7\u503c \u72b6\u6001\u8f6c\u79fb \u00b6 \u6bcf\u79cd\u7269\u54c1\u53ef\u4ee5\u4e0d\u9009\uff0c\u4e5f\u53ef\u4ee5\u9009\u4e00\u4e2a\u6216\u591a\u4e2a\uff0c\u4f46\u7b2c i \u79cd\u7269\u54c1\u6700\u591a\u9009 W/w[i] \u4e2a \u8003\u8651\u5bf9\u6bcf\u4ef6\u7269\u54c1\uff0c\u679a\u4e3e\u5176\u9009\u62e9\u4ef6\u6570\uff0c\u5f97\u5230 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u5982\u4e0b\uff1a f[i][j]=max(f[i-1][j-k*w[i]]+k*v[i]) \uff0c \u5176\u4e2d 0<=k<=W/w[i] \u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\[O\\Big(\\displaystyle W\u00d7\\sum_{i=1}^n\\frac{W}{w_i}\\Big)\\] \u80fd\u4e0d\u80fd\u4f18\u5316\u5462\uff1f \u8fd8\u8bb0\u5f97 0-1 \u80cc\u5305 \u7684\u9006\u5e8f\u679a\u4e3e\u5417\uff1f0-1 \u80cc\u5305\u4e2d\u6211\u4eec\u4e3a\u4e86\u9632\u6b62\u5bf9\u4e00\u4e2a\u7269\u54c1\u505a\u51fa\u591a\u6b21\u51b3\u7b56\u800c\u91c7\u7528\u9006\u5e8f\u679a\u4e3e\uff0c\u8fd9\u542f\u793a\u6211\u4eec\u53ef\u4ee5\u7528\u987a\u5e8f\u679a\u4e3e\u5bf9\u4e00\u4e2a\u7269\u54c1\u505a\u51fa\u591a\u6b21\u51b3\u7b56\uff01 \u8fd9\u6837\u505a\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[i][j]=max(f[i-1][j],f[i][j-w[i]]+v[i]) \u5bf9\u6bd4 0-1 \u80cc\u5305\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a f[i][j]=max(f[i-1][j],f[i-1][j-w[i]]+v[i]) \u53d1\u73b0\u4e0d\u540c\u4e86\u5417\uff1f \u53ea\u8981\u5728 0-1 \u80cc\u5305\u7684\u57fa\u7840\u4e0a\u6539\u4e00\u4e0b j \u7684\u679a\u4e3e\u987a\u5e8f\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 0 ; j <= W ; j ++ ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]);","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"algo/dp/pack/wq/#_1","text":"","title":"\u5b8c\u5168\u80cc\u5305\u95ee\u9898"},{"location":"algo/dp/pack/wq/#_2","text":"\u6709 \\(n\\) \u79cd \u7269\u54c1\uff08 \u6bcf\u79cd\u7269\u54c1\u6709 \u65e0\u9650\u4ef6 \uff09 \u548c \u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(W\\) \u7684\u80cc\u5305\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u91cd\u91cf \\(w_i\\) \u548c\u4ef7\u503c \\(v_i\\) \u4e24\u79cd\u5c5e\u6027\uff0c\u8981\u6c42\uff1a\u9009\u82e5\u5e72\u7269\u54c1\u653e\u5165\u80cc\u5305\uff0c\u4f7f\u80cc\u5305\u4e2d\u7269\u54c1\u7684 \u603b\u4ef7\u503c\u6700\u5927 \u4e14 \u80cc\u5305\u4e2d\u7269\u54c1\u7684\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7\u80cc\u5305\u7684\u5bb9\u91cf","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"algo/dp/pack/wq/#_3","text":"","title":"\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b"},{"location":"algo/dp/pack/wq/#_4","text":"\u4e0e 0-1 \u80cc\u5305\u5b8c\u5168\u76f8\u540c\uff0c\u8bbe f[i][j] \u8868\u793a\u53ea\u8003\u8651\u524d i \u4e2a\u7269\u54c1\u65f6\uff0c\u5bb9\u91cf\u4e3a j \u7684\u80cc\u5305\u6240\u80fd\u8fbe\u5230\u7684\u6700\u5927\u603b\u4ef7\u503c","title":"\u72b6\u6001\u5b9a\u4e49"},{"location":"algo/dp/pack/wq/#_5","text":"\u6bcf\u79cd\u7269\u54c1\u53ef\u4ee5\u4e0d\u9009\uff0c\u4e5f\u53ef\u4ee5\u9009\u4e00\u4e2a\u6216\u591a\u4e2a\uff0c\u4f46\u7b2c i \u79cd\u7269\u54c1\u6700\u591a\u9009 W/w[i] \u4e2a \u8003\u8651\u5bf9\u6bcf\u4ef6\u7269\u54c1\uff0c\u679a\u4e3e\u5176\u9009\u62e9\u4ef6\u6570\uff0c\u5f97\u5230 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u5982\u4e0b\uff1a f[i][j]=max(f[i-1][j-k*w[i]]+k*v[i]) \uff0c \u5176\u4e2d 0<=k<=W/w[i] \u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\[O\\Big(\\displaystyle W\u00d7\\sum_{i=1}^n\\frac{W}{w_i}\\Big)\\] \u80fd\u4e0d\u80fd\u4f18\u5316\u5462\uff1f \u8fd8\u8bb0\u5f97 0-1 \u80cc\u5305 \u7684\u9006\u5e8f\u679a\u4e3e\u5417\uff1f0-1 \u80cc\u5305\u4e2d\u6211\u4eec\u4e3a\u4e86\u9632\u6b62\u5bf9\u4e00\u4e2a\u7269\u54c1\u505a\u51fa\u591a\u6b21\u51b3\u7b56\u800c\u91c7\u7528\u9006\u5e8f\u679a\u4e3e\uff0c\u8fd9\u542f\u793a\u6211\u4eec\u53ef\u4ee5\u7528\u987a\u5e8f\u679a\u4e3e\u5bf9\u4e00\u4e2a\u7269\u54c1\u505a\u51fa\u591a\u6b21\u51b3\u7b56\uff01 \u8fd9\u6837\u505a\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[i][j]=max(f[i-1][j],f[i][j-w[i]]+v[i]) \u5bf9\u6bd4 0-1 \u80cc\u5305\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a f[i][j]=max(f[i-1][j],f[i-1][j-w[i]]+v[i]) \u53d1\u73b0\u4e0d\u540c\u4e86\u5417\uff1f \u53ea\u8981\u5728 0-1 \u80cc\u5305\u7684\u57fa\u7840\u4e0a\u6539\u4e00\u4e0b j \u7684\u679a\u4e3e\u987a\u5e8f\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 0 ; j <= W ; j ++ ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]);","title":"\u72b6\u6001\u8f6c\u79fb"},{"location":"algo/dp/pack/yl/","text":"\u6709\u4f9d\u8d56\u7684\u80cc\u5305 \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u7ed9\u51fa\u7684\u7269\u54c1\u95f4\u5b58\u5728\u67d0\u79cd \u4f9d\u8d56\u5173\u7cfb \uff0c\u7c7b\u4f3c \u62d3\u6251\u5e8f \u6bd4\u5982\u4f60\u53bb\u65c5\u6e38\u8981\u5e26\u624b\u673a\uff0c\u5c31\u5fc5\u987b\u5e26\u5145\u7535\u5668\uff0c\u5426\u5219\u4f60\u5c31\u4e0d\u80fd\u5e26\u624b\u673a \u89c4\u5b9a\uff1a\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u53ea\u80fd\u4f9d\u8d56\u4e00\u4ef6\u7269\u54c1 \u65b9\u6cd5 \u00b6 \u6811\u5f62 DP \u00b6 \u89c4\u5b9a\uff1a\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u53ea\u80fd\u4f9d\u8d56\u4e00\u4ef6\u7269\u54c1 \u6211\u4eec\u5f88\u81ea\u7136\u5730\u4f1a\u8054\u60f3\u5230\u6811\u7684\u6027\u8d28\uff1a \u6bcf\u4e2a\u7ed3\u70b9\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u7236\u7ed3\u70b9 \u4e24\u4e2a\u7269\u54c1\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u5219\u53ef\u4ee5\u63cf\u8ff0\u4e3a \u9009\u5b50\u7ed3\u70b9\u5fc5\u987b\u5148\u9009\u7236\u7ed3\u70b9 \u4e00\u4ef6\u7269\u54c1\u80fd\u591f\u88ab\u9009\u7684\u5145\u8981\u6761\u4ef6\u4e3a \u5b83\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u5df2\u7ecf\u88ab\u9009 \u4e0d\u8fc7\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c \u4e0d\u4f9d\u8d56\u4efb\u4f55\u5176\u4ed6\u7269\u54c1\u7684\u7269\u54c1 \u4e0d\u6b62\u4e00\u4e2a\uff0c\u90a3\u5f97\u5230\u7684\u5c31\u662f\u4e00\u4e2a\u68ee\u6797\u800c\u4e0d\u662f\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u865a\u62df\u4e00\u4e2a 0 \u53f7\u7ed3\u70b9 \uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a \u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u5176\u4ed6\u7269\u54c1\u7684\u7269\u54c1 \u7684\u7236\u7ed3\u70b9\uff0c\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u4e00\u68f5\u4ee5 0 \u53f7\u7ed3\u70b9\u4e3a\u6839\u7684\u6811 \u8bb0 f[u][v] \u8868\u793a\u7f16\u53f7\u4e3a u \u7684\u5f53\u524d\u7ed3\u70b9 \u53d6 j \u4e2a\u5b50\u7ed3\u70b9 \u6240\u80fd\u8fbe\u5230\u7684\u6700\u5927\u603b\u4ef7\u503c\uff0c v \u8868\u793a\u5f53\u524d\u513f\u5b50 \u51b3\u7b56 \uff1a\u53d6 / \u4e0d\u53d6\u5f53\u524d\u513f\u5b50 v \u4e0d\u53d6\u5f53\u524d\u513f\u5b50\uff0c\u5219\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u513f\u5b50\uff0c f[u][j] \u4fdd\u6301\u4e0d\u53d8 \u53d6\u5f53\u524d\u513f\u5b50\uff0c\u5219 j \u8981\u52a0\u4e0a \u6240\u53d6\u513f\u5b50\u6240\u53d6\u7684\u5b50\u7ed3\u70b9\u6570 k \uff0c\u4ef7\u503c f \u8981\u52a0\u4e0a \u6240\u53d6\u513f\u5b50\u7684\u4ef7\u503c f[v][k] \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[u][j]=max(f[u][j],f[u][j-k]+f[v][k]) \u8003\u8651\u679a\u4e3e\u987a\u5e8f\uff0c\u66f4\u65b0 f[u][j] \u65f6 f[u][j-k] \u548c f[v][k] \u4e2d\u5e94\u8be5\u90fd\u662f\u4e0a\u4e00\u4e2a\u513f\u5b50\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u5e94\u8be5\u9006\u5e8f\u679a\u4e3e j Note \u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\uff0c\u4e0a\u9762\u7ed9\u51fa\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5df2\u7ecf\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u6389\u4e86\u4e00\u7ef4\uff08\u904d\u5386\u513f\u5b50\u90a3\u4e00\u7ef4\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a 1","title":"\u6709\u4f9d\u8d56\u7684\u80cc\u5305"},{"location":"algo/dp/pack/yl/#_1","text":"","title":"\u6709\u4f9d\u8d56\u7684\u80cc\u5305"},{"location":"algo/dp/pack/yl/#_2","text":"\u7ed9\u51fa\u7684\u7269\u54c1\u95f4\u5b58\u5728\u67d0\u79cd \u4f9d\u8d56\u5173\u7cfb \uff0c\u7c7b\u4f3c \u62d3\u6251\u5e8f \u6bd4\u5982\u4f60\u53bb\u65c5\u6e38\u8981\u5e26\u624b\u673a\uff0c\u5c31\u5fc5\u987b\u5e26\u5145\u7535\u5668\uff0c\u5426\u5219\u4f60\u5c31\u4e0d\u80fd\u5e26\u624b\u673a \u89c4\u5b9a\uff1a\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u53ea\u80fd\u4f9d\u8d56\u4e00\u4ef6\u7269\u54c1","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"algo/dp/pack/yl/#_3","text":"","title":"\u65b9\u6cd5"},{"location":"algo/dp/pack/yl/#dp","text":"\u89c4\u5b9a\uff1a\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u53ea\u80fd\u4f9d\u8d56\u4e00\u4ef6\u7269\u54c1 \u6211\u4eec\u5f88\u81ea\u7136\u5730\u4f1a\u8054\u60f3\u5230\u6811\u7684\u6027\u8d28\uff1a \u6bcf\u4e2a\u7ed3\u70b9\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u7236\u7ed3\u70b9 \u4e24\u4e2a\u7269\u54c1\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u5219\u53ef\u4ee5\u63cf\u8ff0\u4e3a \u9009\u5b50\u7ed3\u70b9\u5fc5\u987b\u5148\u9009\u7236\u7ed3\u70b9 \u4e00\u4ef6\u7269\u54c1\u80fd\u591f\u88ab\u9009\u7684\u5145\u8981\u6761\u4ef6\u4e3a \u5b83\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u5df2\u7ecf\u88ab\u9009 \u4e0d\u8fc7\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c \u4e0d\u4f9d\u8d56\u4efb\u4f55\u5176\u4ed6\u7269\u54c1\u7684\u7269\u54c1 \u4e0d\u6b62\u4e00\u4e2a\uff0c\u90a3\u5f97\u5230\u7684\u5c31\u662f\u4e00\u4e2a\u68ee\u6797\u800c\u4e0d\u662f\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u865a\u62df\u4e00\u4e2a 0 \u53f7\u7ed3\u70b9 \uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a \u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u5176\u4ed6\u7269\u54c1\u7684\u7269\u54c1 \u7684\u7236\u7ed3\u70b9\uff0c\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u4e00\u68f5\u4ee5 0 \u53f7\u7ed3\u70b9\u4e3a\u6839\u7684\u6811 \u8bb0 f[u][v] \u8868\u793a\u7f16\u53f7\u4e3a u \u7684\u5f53\u524d\u7ed3\u70b9 \u53d6 j \u4e2a\u5b50\u7ed3\u70b9 \u6240\u80fd\u8fbe\u5230\u7684\u6700\u5927\u603b\u4ef7\u503c\uff0c v \u8868\u793a\u5f53\u524d\u513f\u5b50 \u51b3\u7b56 \uff1a\u53d6 / \u4e0d\u53d6\u5f53\u524d\u513f\u5b50 v \u4e0d\u53d6\u5f53\u524d\u513f\u5b50\uff0c\u5219\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u513f\u5b50\uff0c f[u][j] \u4fdd\u6301\u4e0d\u53d8 \u53d6\u5f53\u524d\u513f\u5b50\uff0c\u5219 j \u8981\u52a0\u4e0a \u6240\u53d6\u513f\u5b50\u6240\u53d6\u7684\u5b50\u7ed3\u70b9\u6570 k \uff0c\u4ef7\u503c f \u8981\u52a0\u4e0a \u6240\u53d6\u513f\u5b50\u7684\u4ef7\u503c f[v][k] \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a f[u][j]=max(f[u][j],f[u][j-k]+f[v][k]) \u8003\u8651\u679a\u4e3e\u987a\u5e8f\uff0c\u66f4\u65b0 f[u][j] \u65f6 f[u][j-k] \u548c f[v][k] \u4e2d\u5e94\u8be5\u90fd\u662f\u4e0a\u4e00\u4e2a\u513f\u5b50\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u5e94\u8be5\u9006\u5e8f\u679a\u4e3e j Note \u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\uff0c\u4e0a\u9762\u7ed9\u51fa\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5df2\u7ecf\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u6389\u4e86\u4e00\u7ef4\uff08\u904d\u5386\u513f\u5b50\u90a3\u4e00\u7ef4\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a 1","title":"\u6811\u5f62 DP"},{"location":"algo/graph/save/","text":"\u56fe\u7684\u5b58\u50a8 \u00b6 \u76f4\u63a5\u5b58\u8fb9 \u00b6 \u90bb\u63a5\u77e9\u9635 \u00b6 \u90bb\u63a5\u8868 \u00b6 \u94fe\u5f0f\u524d\u5411\u661f \u00b6","title":"\u56fe\u7684\u5b58\u50a8"},{"location":"algo/graph/save/#_1","text":"","title":"\u56fe\u7684\u5b58\u50a8"},{"location":"algo/graph/save/#_2","text":"","title":"\u76f4\u63a5\u5b58\u8fb9"},{"location":"algo/graph/save/#_3","text":"","title":"\u90bb\u63a5\u77e9\u9635"},{"location":"algo/graph/save/#_4","text":"","title":"\u90bb\u63a5\u8868"},{"location":"algo/graph/save/#_5","text":"","title":"\u94fe\u5f0f\u524d\u5411\u661f"},{"location":"algo/graph/topo/","text":"\u62d3\u6251\u6392\u5e8f \u00b6 Kahn \u7b97\u6cd5 \u00b6 Dfs \u9006\u5e8f \u00b6 \u6b27\u62c9\u5e8f","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"algo/graph/topo/#_1","text":"","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"algo/graph/topo/#kahn","text":"","title":"Kahn \u7b97\u6cd5"},{"location":"algo/graph/topo/#dfs","text":"\u6b27\u62c9\u5e8f","title":"Dfs \u9006\u5e8f"},{"location":"algo/graph/zdl/","text":"\u6700\u77ed\u8def \u00b6 Bellman-Ford SPFA Dijstra Floyd Johnson \u5355\u6e90 \u5355\u6e90 \u5355\u6e90 \u5168\u6e90 \u5168\u6e90 \u4efb\u610f\u56fe \u4efb\u610f\u56fe \u975e\u8d1f\u6743\u56fe \u65e0\u8d1f\u73af\u56fe \u65e0\u8d1f\u73af\u56fe \u5355\u6e90\u6700\u77ed\u8def \u00b6 Bellman-Ford \u7b97\u6cd5 \u00b6 \u961f\u5217\u4f18\u5316\uff1aSPFA \u7b97\u6cd5 \u00b6 Dijstra \u7b97\u6cd5 \u00b6 \u5168\u6e90\u6700\u77ed\u8def \u00b6 Floyd \u7b97\u6cd5 \u00b6 Johnson \u7b97\u6cd5 \u00b6","title":"\u6700\u77ed\u8def"},{"location":"algo/graph/zdl/#_1","text":"Bellman-Ford SPFA Dijstra Floyd Johnson \u5355\u6e90 \u5355\u6e90 \u5355\u6e90 \u5168\u6e90 \u5168\u6e90 \u4efb\u610f\u56fe \u4efb\u610f\u56fe \u975e\u8d1f\u6743\u56fe \u65e0\u8d1f\u73af\u56fe \u65e0\u8d1f\u73af\u56fe","title":"\u6700\u77ed\u8def"},{"location":"algo/graph/zdl/#_2","text":"","title":"\u5355\u6e90\u6700\u77ed\u8def"},{"location":"algo/graph/zdl/#bellman-ford","text":"","title":"Bellman-Ford \u7b97\u6cd5"},{"location":"algo/graph/zdl/#spfa","text":"","title":"\u961f\u5217\u4f18\u5316\uff1aSPFA \u7b97\u6cd5"},{"location":"algo/graph/zdl/#dijstra","text":"","title":"Dijstra \u7b97\u6cd5"},{"location":"algo/graph/zdl/#_3","text":"","title":"\u5168\u6e90\u6700\u77ed\u8def"},{"location":"algo/graph/zdl/#floyd","text":"","title":"Floyd \u7b97\u6cd5"},{"location":"algo/graph/zdl/#johnson","text":"","title":"Johnson \u7b97\u6cd5"},{"location":"algo/graph/zxscs/","text":"\u6700\u5c0f\u751f\u6210\u6811 \u00b6 Kruskal \u7b97\u6cd5 \u00b6 Prim \u7b97\u6cd5 \u00b6 \u5b9e\u73b0 Prim \u7b97\u6cd5\u7684\u6838\u5fc3\u5728\u4e8e \u4e24\u4e2a\u70b9\u96c6\u95f4\u6700\u77ed\u8fb9 \u7684\u67e5\u8be2\uff0c\u76f4\u63a5\u67e5\u8be2\u96be\u4ee5\u5b9e\u73b0\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u6bcf\u52a0\u5165\u4e00\u4e2a\u70b9\uff0c\u53ea\u9700\u8981\u518d\u8003\u8651\u65b0\u52a0\u5165\u7684\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u6545\u53ef\u91c7\u7528\u7c7b\u4f3c Dijstra \u7b97\u6cd5\u7684\u65b9\u5f0f\u7ef4\u62a4\u4e24\u4e2a\u70b9\u96c6\u95f4\u7684\u6700\u77ed\u8fb9\uff08\u552f\u4e00\u7684\u533a\u522b\u662f \u66f4\u65b0 dis \u6570\u7ec4 \uff09 Bor\u016fvka \u7b97\u6cd5 \u00b6","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"algo/graph/zxscs/#_1","text":"","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"algo/graph/zxscs/#kruskal","text":"","title":"Kruskal \u7b97\u6cd5"},{"location":"algo/graph/zxscs/#prim","text":"\u5b9e\u73b0 Prim \u7b97\u6cd5\u7684\u6838\u5fc3\u5728\u4e8e \u4e24\u4e2a\u70b9\u96c6\u95f4\u6700\u77ed\u8fb9 \u7684\u67e5\u8be2\uff0c\u76f4\u63a5\u67e5\u8be2\u96be\u4ee5\u5b9e\u73b0\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u6bcf\u52a0\u5165\u4e00\u4e2a\u70b9\uff0c\u53ea\u9700\u8981\u518d\u8003\u8651\u65b0\u52a0\u5165\u7684\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u6545\u53ef\u91c7\u7528\u7c7b\u4f3c Dijstra \u7b97\u6cd5\u7684\u65b9\u5f0f\u7ef4\u62a4\u4e24\u4e2a\u70b9\u96c6\u95f4\u7684\u6700\u77ed\u8fb9\uff08\u552f\u4e00\u7684\u533a\u522b\u662f \u66f4\u65b0 dis \u6570\u7ec4 \uff09","title":"Prim \u7b97\u6cd5"},{"location":"algo/graph/zxscs/#boruvka","text":"","title":"Bor\u016fvka \u7b97\u6cd5"},{"location":"algo/mj/mjpl/","text":"\u679a\u4e3e\u6392\u5217 \u00b6 \u751f\u6210\u53ef\u91cd\u96c6\u7684\u6392\u5217 \u00b6 next_permutation \u00b6 next_permutation \u5305\u542b\u5728\u5934\u6587\u4ef6 algorithm \u4e2d\uff0c\u53ef\u4ee5\u83b7\u5f97\u6bd4\u5f53\u524d\u6392\u5217\u5927\u7684\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u6ca1\u6709\u6bd4\u5f53\u524d\u5927\u7684\u6392\u5217\u5219\u8fd4\u56de 0 \u7c7b\u4f3c\u7684\u8fd8\u6709 prev_permutation() \uff0c\u53ef\u4ee5\u83b7\u5f97\u6bd4\u5f53\u524d\u6392\u5217\u5c0f\u7684\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u6ca1\u6709\u6bd4\u5f53\u524d\u5c0f\u7684\u5219\u8fd4\u56de 0 \u6240\u4ee5\u6211\u4eec\u8fd8\u53ef\u4ee5\u8fd9\u6837\u679a\u4e3e\u6240\u6709\u6392\u5217\uff1a\u5148\u624b\u52a8\u6784\u9020\u51fa\u6700\u5c0f\u7684\u6392\u5217\uff0c\u518d\u4e0d\u505c\u8c03\u7528 next_permutation \u5373\u53ef \u751f\u6210 a[]={1,1,4,5,1,4} \u6240\u6709\u6392\u5217\u7684\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 int main (){ int a [] = { 1 , 1 , 4 , 5 , 1 , 4 }; sort ( a , a + 6 ); do { for ( int i = 0 ; i < 6 ; i ++ ) cout << a [ i ] << ' ' ; cout << endl ; } while ( next_permutation ( a , a + 6 )); return 0 ; } Note \u8fd9\u4e00\u65b9\u6cd5\u53ef\u7528\u4e8e \u53ef\u91cd\u96c6 \u8fd9\u91cc\u7684\u5927\u5c0f\u6307 \u5b57\u5178\u5e8f \u5927\u5c0f \u5e38\u7528 sort \u51fd\u6570\u751f\u6210\u6700\u5c0f\u6392\u5217\uff0c\u518d\u8c03\u7528 next_permutation \u4f7f\u7528\u4f4d\u5411\u91cf\u65b9\u6cd5\u679a\u4e3e\u65f6\uff0c\u6700\u9ad8\u4f4d\u4e3a 1 \u8f83\u65b9\u4fbf\uff0c\u6240\u4ee5\u5148\u751f\u6210\u6700\u5927\u6392\u5217\uff0c\u518d\u8c03\u7528 prev_permutation","title":"\u679a\u4e3e\u6392\u5217"},{"location":"algo/mj/mjpl/#_1","text":"","title":"\u679a\u4e3e\u6392\u5217"},{"location":"algo/mj/mjpl/#_2","text":"","title":"\u751f\u6210\u53ef\u91cd\u96c6\u7684\u6392\u5217"},{"location":"algo/mj/mjpl/#next_permutation","text":"next_permutation \u5305\u542b\u5728\u5934\u6587\u4ef6 algorithm \u4e2d\uff0c\u53ef\u4ee5\u83b7\u5f97\u6bd4\u5f53\u524d\u6392\u5217\u5927\u7684\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u6ca1\u6709\u6bd4\u5f53\u524d\u5927\u7684\u6392\u5217\u5219\u8fd4\u56de 0 \u7c7b\u4f3c\u7684\u8fd8\u6709 prev_permutation() \uff0c\u53ef\u4ee5\u83b7\u5f97\u6bd4\u5f53\u524d\u6392\u5217\u5c0f\u7684\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u6ca1\u6709\u6bd4\u5f53\u524d\u5c0f\u7684\u5219\u8fd4\u56de 0 \u6240\u4ee5\u6211\u4eec\u8fd8\u53ef\u4ee5\u8fd9\u6837\u679a\u4e3e\u6240\u6709\u6392\u5217\uff1a\u5148\u624b\u52a8\u6784\u9020\u51fa\u6700\u5c0f\u7684\u6392\u5217\uff0c\u518d\u4e0d\u505c\u8c03\u7528 next_permutation \u5373\u53ef \u751f\u6210 a[]={1,1,4,5,1,4} \u6240\u6709\u6392\u5217\u7684\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 int main (){ int a [] = { 1 , 1 , 4 , 5 , 1 , 4 }; sort ( a , a + 6 ); do { for ( int i = 0 ; i < 6 ; i ++ ) cout << a [ i ] << ' ' ; cout << endl ; } while ( next_permutation ( a , a + 6 )); return 0 ; } Note \u8fd9\u4e00\u65b9\u6cd5\u53ef\u7528\u4e8e \u53ef\u91cd\u96c6 \u8fd9\u91cc\u7684\u5927\u5c0f\u6307 \u5b57\u5178\u5e8f \u5927\u5c0f \u5e38\u7528 sort \u51fd\u6570\u751f\u6210\u6700\u5c0f\u6392\u5217\uff0c\u518d\u8c03\u7528 next_permutation \u4f7f\u7528\u4f4d\u5411\u91cf\u65b9\u6cd5\u679a\u4e3e\u65f6\uff0c\u6700\u9ad8\u4f4d\u4e3a 1 \u8f83\u65b9\u4fbf\uff0c\u6240\u4ee5\u5148\u751f\u6210\u6700\u5927\u6392\u5217\uff0c\u518d\u8c03\u7528 prev_permutation","title":"next_permutation"},{"location":"algo/mj/mjzj/","text":"\u679a\u4e3e\u5b50\u96c6 \u00b6 \u679a\u4e3e\u5b9a\u957f\u5b50\u96c6 \u00b6 \u589e\u91cf\u6784\u9020\u6cd5 \u00b6 \u539f\u95ee\u9898\uff1a \\(1,2,3...n\\) \u8fd9 \\(n\\) \u4e2a\u6570\u4e2d\u9009 \\(m\\) \u4e2a \u5982\u679c\u9009\u62e9 1 \uff0c\u5219\u539f\u95ee\u9898\u53d8\u4e3a\uff1a \\(2,3,...n\\) \u8fd9 \\(n-1\\) \u4e2a\u6570\u4e2d\u9009 \\(m-1\\) \u4e2a \u6240\u4ee5\u539f\u95ee\u9898\u53ef\u4ee5\u9012\u5f52\u6c42\u89e3\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 void subset ( int a [], int l , const int & r , const int & int n , int m ){ // l,r \u4e3a\u679a\u4e3e\u533a\u95f4 if ( m == 0 ){ // Finished! return ; } for ( int i = l ; i <= r ; i ++ ){ // Select a[i] subset ( a , l + 1 , r , n , m -1 ); } } \u6ce8\u610f\u7ef4\u62a4\u6bcf\u6b21\u8c03\u7528\u7684\u5165\u53e3\u73af\u5883\uff1a\u5982\u679c\u8981\u7ef4\u62a4\u6240\u9009\u62e9\u5143\u7d20\u7684 sum \uff0c\u5e94\u8be5\u8fd9\u6837\u5199 1 2 3 4 5 6 7 8 9 void subset ( int a [], int l , const int & r , const int & int n , int m , int sum ){ if ( m == 0 ){ cout << sum << ' ' ; return ; } for ( int i = l ; i <= r ; i ++ ) // sum+=a[i]; \u5165\u53e3\u73af\u5883\u7834\u574f subset ( a , l + 1 , r , n , m -1 , sum + a [ i ]); } \u53ef\u4ee5\u770b\u5230\uff0c\u9012\u5f52\u65b9\u6cd5\u4f20\u5165\u53c2\u6570\u5f88\u591a\uff0c\u6548\u7387\u4e0d\u9ad8 \u4f4d\u5411\u91cf\u6cd5 \u00b6 \u7528 0 \u8868\u793a \u201c\u4e0d\u9009\u201d\uff0c1 \u8868\u793a \u201c\u9009\u201d\uff0c\u5219\u53ef\u4ee5\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a 0-1 \u5e8f\u5217\u7684\u5168\u6392\u5217\u95ee\u9898 \u624b\u52a8\u6784\u9020\u521d\u59cb 0-1 \u6392\u5217\uff08 \u6700\u5927 \u6392\u5217 \uff09\u540e\uff0c\u518d\u8c03\u7528 STL \u91cc\u7684 prev_permutation \u5373\u53ef \u5982\uff1a\u4ece 6 \u4e2a\u5143\u7d20\u4e2d\u9009\u51fa 3 \u4e2a\uff0c\u5219\u6700\u5927\u7684 0-1 \u5e8f\u5217\u4e3a \\[1\\ \\ 1\\ \\ 1\\ \\ 0\\ \\ 0\\ \\ 0\\] \u53ef\u7528 prev_permutation \u51fd\u6570\uff0c\u8be6\u89c1 \u679a\u4e3e\u6392\u5217 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 // Input: n, m, a[n]; bool * flag = new bool [ n ](); // \u521d\u59cb\u5316\u4e3a 0 for ( int i = 0 ; i < m ; i ++ ) flag [ i ] = true ; // \u6784\u9020\u521d\u59cb\u6392\u5217 while ( prev_permutation ( flag , flag + n )){ // do something } \u679a\u4e3e\u4e0d\u5b9a\u957f\u5b50\u96c6 \u00b6 \u589e\u91cf\u6784\u9020\u6cd5 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 void subset ( int d [], int a [], int l , int r ){ for ( int i = 0 ; i < l ; i ++ ) cout << d [ a [ i ]]; if ( l ) cout << endl ; // \u653e\u5165\u7b2c l \u4e2a\u5143\u7d20 for ( int i = l ? a [ l -1 ] + 1 : 0 ; i <= r ; i ++ ){ // l?a[l-1]+1:0 \u786e\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\u653e // \u4ee5 d[]={1,2,3}\uff0ca[]={0,1} \u4e3a\u4f8b\uff1a // \u653e\u7b2c\u4e09\u4e2a\u5143\u7d20\u65f6\uff0c\u8981\u4ece\u4e0b\u6807\u4e3a a[2-1]+1=2 \u7684\u5f00\u59cb\u653e a [ l ] = i ; subset ( d , a , l + 1 , r ); } } \u89e3\u7b54\u6811\u7ed3\u70b9 \\(2^n\\) \uff0c\u521a\u597d\u662f\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u6570\uff0c\u4e0d\u80fd\u518d\u5c11\uff0c\u4f46\u9012\u5f52\u7b97\u6cd5\u5929\u751f\u8f83\u6162\uff0c\u53ef\u80fd\u7206\u6808 \u4f4d\u5411\u91cf\u6cd5 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 void subset ( int d [], bool a [], int l , int r ){ // [l,r] \u679a\u4e3e\u533a\u95f4 e.g. a[10] => [0,9] if ( l > r ){ for ( int i = 0 ; i <= r ; i ++ ) if ( a [ i ]) cout << d [ i ] << ' ' ; cout << endl ; return ; } a [ l ] = 0 ; subset ( d , a , l + 1 , r ); a [ l ] = 1 ; subset ( d , a , l + 1 , r ); } \u4f4d\u5411\u91cf\u6cd5\u6613\u61c2\u3001\u597d\u5199\uff0c\u4f46\u7565\u6162\uff08 \u89e3\u7b54\u6811\u7ed3\u70b9 \\(2^{n+1}-1\\) \u7565\u591a \uff09 \u4e8c\u8fdb\u5236\u6cd5 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 void subset ( int d [], int siz ){ // \u679a\u4e3e\u6240\u6709\u5b50\u96c6\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u7f16\u7801 0,1,2,...,1<<siz for ( int i = 0 ; i < ( 1 << siz ); i ++ ){ print_subset ( d , siz , i ); } } void print_subset ( int d [], int siz , int code ){ // \u6253\u5370\u7f16\u7801\u4e3a code \u7684\u5b50\u96c6 for ( int i = 0 ; i < siz ; i ++ ){ if ( code & ( 1 << i )) cout << d [ i ] << ' ' ; // \u7b2c i \u4f4d\u4e3a 1 \uff0c\u8f93\u51fa d[i] } cout << endl ; }","title":"\u679a\u4e3e\u5b50\u96c6"},{"location":"algo/mj/mjzj/#_1","text":"","title":"\u679a\u4e3e\u5b50\u96c6"},{"location":"algo/mj/mjzj/#_2","text":"","title":"\u679a\u4e3e\u5b9a\u957f\u5b50\u96c6"},{"location":"algo/mj/mjzj/#_3","text":"\u539f\u95ee\u9898\uff1a \\(1,2,3...n\\) \u8fd9 \\(n\\) \u4e2a\u6570\u4e2d\u9009 \\(m\\) \u4e2a \u5982\u679c\u9009\u62e9 1 \uff0c\u5219\u539f\u95ee\u9898\u53d8\u4e3a\uff1a \\(2,3,...n\\) \u8fd9 \\(n-1\\) \u4e2a\u6570\u4e2d\u9009 \\(m-1\\) \u4e2a \u6240\u4ee5\u539f\u95ee\u9898\u53ef\u4ee5\u9012\u5f52\u6c42\u89e3\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 void subset ( int a [], int l , const int & r , const int & int n , int m ){ // l,r \u4e3a\u679a\u4e3e\u533a\u95f4 if ( m == 0 ){ // Finished! return ; } for ( int i = l ; i <= r ; i ++ ){ // Select a[i] subset ( a , l + 1 , r , n , m -1 ); } } \u6ce8\u610f\u7ef4\u62a4\u6bcf\u6b21\u8c03\u7528\u7684\u5165\u53e3\u73af\u5883\uff1a\u5982\u679c\u8981\u7ef4\u62a4\u6240\u9009\u62e9\u5143\u7d20\u7684 sum \uff0c\u5e94\u8be5\u8fd9\u6837\u5199 1 2 3 4 5 6 7 8 9 void subset ( int a [], int l , const int & r , const int & int n , int m , int sum ){ if ( m == 0 ){ cout << sum << ' ' ; return ; } for ( int i = l ; i <= r ; i ++ ) // sum+=a[i]; \u5165\u53e3\u73af\u5883\u7834\u574f subset ( a , l + 1 , r , n , m -1 , sum + a [ i ]); } \u53ef\u4ee5\u770b\u5230\uff0c\u9012\u5f52\u65b9\u6cd5\u4f20\u5165\u53c2\u6570\u5f88\u591a\uff0c\u6548\u7387\u4e0d\u9ad8","title":"\u589e\u91cf\u6784\u9020\u6cd5"},{"location":"algo/mj/mjzj/#_4","text":"\u7528 0 \u8868\u793a \u201c\u4e0d\u9009\u201d\uff0c1 \u8868\u793a \u201c\u9009\u201d\uff0c\u5219\u53ef\u4ee5\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a 0-1 \u5e8f\u5217\u7684\u5168\u6392\u5217\u95ee\u9898 \u624b\u52a8\u6784\u9020\u521d\u59cb 0-1 \u6392\u5217\uff08 \u6700\u5927 \u6392\u5217 \uff09\u540e\uff0c\u518d\u8c03\u7528 STL \u91cc\u7684 prev_permutation \u5373\u53ef \u5982\uff1a\u4ece 6 \u4e2a\u5143\u7d20\u4e2d\u9009\u51fa 3 \u4e2a\uff0c\u5219\u6700\u5927\u7684 0-1 \u5e8f\u5217\u4e3a \\[1\\ \\ 1\\ \\ 1\\ \\ 0\\ \\ 0\\ \\ 0\\] \u53ef\u7528 prev_permutation \u51fd\u6570\uff0c\u8be6\u89c1 \u679a\u4e3e\u6392\u5217 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 // Input: n, m, a[n]; bool * flag = new bool [ n ](); // \u521d\u59cb\u5316\u4e3a 0 for ( int i = 0 ; i < m ; i ++ ) flag [ i ] = true ; // \u6784\u9020\u521d\u59cb\u6392\u5217 while ( prev_permutation ( flag , flag + n )){ // do something }","title":"\u4f4d\u5411\u91cf\u6cd5"},{"location":"algo/mj/mjzj/#_5","text":"","title":"\u679a\u4e3e\u4e0d\u5b9a\u957f\u5b50\u96c6"},{"location":"algo/mj/mjzj/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 void subset ( int d [], int a [], int l , int r ){ for ( int i = 0 ; i < l ; i ++ ) cout << d [ a [ i ]]; if ( l ) cout << endl ; // \u653e\u5165\u7b2c l \u4e2a\u5143\u7d20 for ( int i = l ? a [ l -1 ] + 1 : 0 ; i <= r ; i ++ ){ // l?a[l-1]+1:0 \u786e\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\u653e // \u4ee5 d[]={1,2,3}\uff0ca[]={0,1} \u4e3a\u4f8b\uff1a // \u653e\u7b2c\u4e09\u4e2a\u5143\u7d20\u65f6\uff0c\u8981\u4ece\u4e0b\u6807\u4e3a a[2-1]+1=2 \u7684\u5f00\u59cb\u653e a [ l ] = i ; subset ( d , a , l + 1 , r ); } } \u89e3\u7b54\u6811\u7ed3\u70b9 \\(2^n\\) \uff0c\u521a\u597d\u662f\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u6570\uff0c\u4e0d\u80fd\u518d\u5c11\uff0c\u4f46\u9012\u5f52\u7b97\u6cd5\u5929\u751f\u8f83\u6162\uff0c\u53ef\u80fd\u7206\u6808","title":"\u589e\u91cf\u6784\u9020\u6cd5"},{"location":"algo/mj/mjzj/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 void subset ( int d [], bool a [], int l , int r ){ // [l,r] \u679a\u4e3e\u533a\u95f4 e.g. a[10] => [0,9] if ( l > r ){ for ( int i = 0 ; i <= r ; i ++ ) if ( a [ i ]) cout << d [ i ] << ' ' ; cout << endl ; return ; } a [ l ] = 0 ; subset ( d , a , l + 1 , r ); a [ l ] = 1 ; subset ( d , a , l + 1 , r ); } \u4f4d\u5411\u91cf\u6cd5\u6613\u61c2\u3001\u597d\u5199\uff0c\u4f46\u7565\u6162\uff08 \u89e3\u7b54\u6811\u7ed3\u70b9 \\(2^{n+1}-1\\) \u7565\u591a \uff09","title":"\u4f4d\u5411\u91cf\u6cd5"},{"location":"algo/mj/mjzj/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 void subset ( int d [], int siz ){ // \u679a\u4e3e\u6240\u6709\u5b50\u96c6\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u7f16\u7801 0,1,2,...,1<<siz for ( int i = 0 ; i < ( 1 << siz ); i ++ ){ print_subset ( d , siz , i ); } } void print_subset ( int d [], int siz , int code ){ // \u6253\u5370\u7f16\u7801\u4e3a code \u7684\u5b50\u96c6 for ( int i = 0 ; i < siz ; i ++ ){ if ( code & ( 1 << i )) cout << d [ i ] << ' ' ; // \u7b2c i \u4f4d\u4e3a 1 \uff0c\u8f93\u51fa d[i] } cout << endl ; }","title":"\u4e8c\u8fdb\u5236\u6cd5"},{"location":"algo/search/cut/","text":"\u526a\u679d \u00b6 \u8bb0\u5fc6\u5316\u641c\u7d22 \u00b6 \u53ef\u884c\u6027\u526a\u679d \u00b6 \u6700\u4f18\u5316\u526a\u679d \u00b6","title":"\u526a\u679d"},{"location":"algo/search/cut/#_1","text":"","title":"\u526a\u679d"},{"location":"algo/search/cut/#_2","text":"","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"algo/search/cut/#_3","text":"","title":"\u53ef\u884c\u6027\u526a\u679d"},{"location":"algo/search/cut/#_4","text":"","title":"\u6700\u4f18\u5316\u526a\u679d"},{"location":"algo/sort/quick/","text":"\u5feb\u901f\u6392\u5e8f \u00b6 \u4e3b\u7b97\u6cd5 \u00b6 \u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 void quick_sort ( const int a * , int l , int r ){ if ( l < r ){ int m = partition ( a , l , r ); quick_sort ( a , l , m -1 ); quick_sort ( a , m + 1 , r ); } return ; } \u5212\u5206 \u00b6 \u7b97\u6cd5 \u00b6 Lomuto \u5212\u5206 \u00b6 \u5de6\u8d77\u653e\u7f6e\u6bd4 \\(\\mathrm{pivot}\\) \u5c0f\u7684\u5143\u7d20 \u6b63\u786e\u6027\u8bc1\u660e\u5982\u4e0b\uff1a \u5f52\u7eb3\u5047\u8bbe \uff1a \\(i\\) \u5de6\u8fb9\u7684\u5143\u7d20\u90fd \\(<\\mathrm{pivot}\\) \uff0c \\([\\,i\\,,\\,j\\,)\\) \u5185\u7684\u5143\u7d20\u90fd\u5927\u4e8e \\(\\mathrm{pivot}\\) \u5f52\u7eb3\u5960\u57fa \uff1a\u5faa\u73af\u672a\u5f00\u59cb\u65f6\uff0c \\(i\\) \u5de6\u8fb9\u6ca1\u6709\u5143\u7d20\uff0c \\([\\,i\\,,\\,j\\,)\\) \u4e5f\u6ca1\u6709\u5143\u7d20\uff0c\u5047\u8bbe\u6210\u7acb \u5f52\u7eb3\u9012\u63a8 \uff1a\u5faa\u73af\u4e2d\uff0c\u5206\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a \u904d\u5386\u6307\u9488 \\(j\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_j\u2265\\mathrm{pivot}\\) \uff0c\u7ee7\u7eed\u904d\u5386\uff08 \\(j\\) \u53f3\u79fb \uff09\uff0c\u5047\u8bbe\u4ecd\u6210\u7acb \u904d\u5386\u6307\u9488 \\(j\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_j<\\mathrm{pivot}\\) \uff0c\u5c06\u5176\u653e\u5230 \\(i\\) \u5de6\u8fb9\uff08 \u4ea4\u6362 \\(x_i\\ ,\\ x_j\\) \uff0c\u8fb9\u754c \\(i\\) \u53f3\u79fb \uff09\uff0c\u7ee7\u7eed\u904d\u5386\uff08 \\(j\\) \u53f3\u79fb \uff09\uff0c\u5219\u5047\u8bbe\u4ecd\u6210\u7acb \u7ed3\u8bba \uff1a\u5f53 \\(L\\not <R\\) \u5faa\u73af\u7ed3\u675f\u65f6\uff0c\u5f52\u7eb3\u5047\u8bbe\u6210\u7acb \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 int partition ( int * a , int l , int r ){ int pivot = a [ r ]; int i , j ; for ( i = j = l ; j < r ; j ++ ){ if ( a [ j ] < pivot ){ swap ( a [ j ], a [ i ++ ]); } } swap ( a [ i ], a [ r ]); return i ; } \u76f8\u5411\u53cc\u6307\u9488\u5212\u5206 \u00b6 \u6b63\u786e\u6027\u8bc1\u660e\u5982\u4e0b\uff1a \u5f52\u7eb3\u5047\u8bbe \uff1a\u5de6\u6307\u9488 \\(L\\) \u5de6\u8fb9\u7684\u5143\u7d20\u90fd \\(\u2264\\mathrm{pivot}\\) \uff0c\u53f3\u6307\u9488 \\(R\\) \u53f3\u8fb9\u7684\u5143\u7d20\u90fd \\(>\\mathrm{pivot}\\) \u5f52\u7eb3\u5960\u57fa \uff1a\u5faa\u73af\u672a\u5f00\u59cb\u65f6\uff0c \\(L\\) \u5de6\u8fb9\u548c \\(R\\) \u53f3\u8fb9\u90fd\u6ca1\u6709\u5143\u7d20\uff0c\u5047\u8bbe\u6210\u7acb \u5f52\u7eb3\u9012\u63a8 \uff1a\u5faa\u73af\u4e2d\uff0c\u5206\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a \u5de6\u6307\u9488 \\(L\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_L\u2264\\mathrm{pivot}\\) \uff0c \u6216 \u53f3\u6307\u9488 \\(R\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_R>\\mathrm{pivot}\\) \uff0c\u90a3\u4e48\u53ef\u4ee5\u7ee7\u7eed\u76f8\u5411\u79fb\u52a8\u5de6\uff08\u53f3\uff09\u6307\u9488\uff0c\u4f7f\u5047\u8bbe\u4ecd\u6210\u7acb \u5de6\u6307\u9488 \\(L\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_L>\\mathrm{pivot}\\) \uff0c \u4e14 \u53f3\u6307\u9488 \\(R\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_R\u2264\\mathrm{pivot}\\) \uff0c\u5219 \u4ea4\u6362 \\(x_L\\ ,\\ x_R\\) \uff0c\u8f6c\u5316\u4e3a\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u5047\u8bbe\u4ecd\u6210\u7acb \u7ed3\u8bba \uff1a\u5f53 \\(L\\not <R\\) \u7ed3\u675f\u5faa\u73af\u65f6\uff0c\u5f52\u7eb3\u5047\u8bbe\u6210\u7acb \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // \u672c\u4eba\u539f\u521b int partition ( int * a , int l , int r ){ int pivot = a [ l ]; int L = l + 1 , R = r ; for ( int tot = 0 ; tot < r - l ;){ // \u5de6\u3001\u53f3\u6307\u9488\u79fb\u52a8\u603b\u6b21\u6570 tot<r-l\uff0c\u5219\u4e24\u6307\u9488\u4e00\u5b9a\u6ca1\u6709\u4ea4\u9519\uff0c\u4e5f\u6ca1\u6709\u8d8a\u8fc7\u5de6\u53f3\u8fb9\u754c bool is = true ; if ( a [ L ] <= pivot ){ L ++ ; tot ++ ; is = false ; } if ( a [ R ] > pivot ){ R -- ; tot ++ ; is = false ; } if ( is ) swap ( a [ L ], a [ R ]); // \u5982\u679c\u4e24\u4e2a\u6307\u9488\u90fd\u65e0\u6cd5\u79fb\u52a8\uff0c\u5219\u4ea4\u6362 } swap ( a [ l ], a [ R ]); return R ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // \u81ea\u7b97\u6cd5\u5f15\u8bba\u4f2a\u4ee3\u7801 int partition ( int * a , int l , int r ){ int pivot = a [ l ]; int L = l , R = r ; while ( L < R ){ while ( a [ L ] <= pivot && L <= r ){ L ++ ; } while ( a [ R ] > pivot && R >= l ){ R -- ; } if ( L < R ) swap ( a [ L ], a [ R ]); } swap ( a [ l ], a [ R ]); return R ; } \u67a2\u503c\u7684\u9009\u53d6 \u00b6 \u5982\u679c\u5212\u5206\u540e\u5de6\u53f3\u5b50\u5217\u957f\u5ea6\u603b\u662f\u76f8\u7b49\uff0c\u7531\u9012\u5f52\u5173\u7cfb \\[T(n)=2\\,\\Big(\\frac{n}2\\Big)+O(n)\\] \u548c\u7ec8\u6b62\u6761\u4ef6 \\[T(2)=1\\] \u5bb9\u6613\u77e5\u9053\uff0c\u6b64\u65f6\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230 \\[T(n)=O(n\\log n)\\] \u5982\u679c\u6bcf\u6b21\u5212\u5206\u540e\u67d0\u4fa7\u5b50\u5217\u957f\u5ea6\u4e3a 0\uff0c\u5219\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u6700\u574f\u7684 \\(O(n^2)\\) \u53ef\u89c1\u67a2\u503c \\(\\mathrm{pivot}\\) \u7684\u9009\u53d6\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u7740\u5feb\u901f\u6392\u5e8f\u7684\u6027\u80fd\uff0c\u4e3a\u907f\u514d\u6700\u574f\u60c5\u51b5\u7684\u51fa\u73b0\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u5e38\u89c1\u7684\u67a2\u503c\u9009\u53d6\u65b9\u5f0f \u4e09\u6570\u53d6\u4e2d \u00b6 \u867d\u7136\u4f7f\u7528 \u5feb\u901f\u9009\u62e9 \u7b97\u6cd5\u53ef\u4ee5 \\(O(n)\\) \u5730\u67e5\u627e\u4e2d\u503c\uff0c\u4f46\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 \u7b2c\u4e00\u4e2a\u3001\u6700\u540e\u4e00\u4e2a\u3001\u4e2d\u95f4 \u4e09\u4e2a\u6570\u7684\u4e2d\u6570\uff08\u5373\u7b2c\u4e8c\u5927\u7684\uff09\u4f5c\u4e3a\u67a2\u503c\u5373\u53ef \u968f\u673a\u9009\u53d6 \u00b6 \u66f4\u597d\u7684\u65b9\u6cd5\u662f\u4ece\u5e8f\u5217\u4e2d\u968f\u673a\u53d6\u6570\u4f5c\u4e3a\u67a2\u503c \u5c0f\u89c4\u6a21\u6570\u636e\u6539\u7528\u63d2\u5165\u6392\u5e8f \u00b6 \u5feb\u901f\u6392\u5e8f\u9002\u5408\u957f\u5e8f\u5217\uff0c\u5bf9\u77ed\u5e8f\u5217\u6765\u8bf4\u6027\u80fd\u53cd\u800c\u4e0d\u5982\u63d2\u5165\u6392\u5e8f\u8fd9\u79cd\u7b80\u5355\u6392\u5e8f \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5e8f\u5217\u88ab\u5212\u5206\u5230\u89c4\u6a21\u5c0f\u4e8e\u4e00\u5b9a\u503c\u65f6\u4e0d\u518d\u7ee7\u7eed\u5212\u5206\uff0c\u800c\u662f\u8c03\u7528\u63d2\u5165\u6392\u5e8f \u4e09\u8def\u5212\u5206 \u00b6 \u5982\u679c\u5e8f\u5217\u4e2d\u6709\u5927\u91cf\u91cd\u590d\u5143\u7d20\uff0c\u6211\u4eec\u4e0d\u59a8\u5728\u5212\u5206\u65f6\u5c06\u6570\u7ec4\u5206\u4e3a \\(>\\mathrm{pivot}\\) \uff0c \\(=\\mathrm{pivot}\\) \uff0c \\(<\\mathrm{pivot}\\) \u4e09\u90e8\u5206\uff0c\u7ee7\u7eed\u5212\u5206\u65f6\u53ea\u8003\u8651 \\(>\\mathrm{pivot}\\) \uff0c \\(<\\mathrm{pivot}\\) \u4e24\u90e8\u5206\uff0c\u800c\u4e0d\u8003\u8651 \\(=\\mathrm{pivot}\\) \u7684\u5b50\u5217\uff0c\u8fd9\u6837\u5c31\u7f29\u5c0f\u4e86\u95ee\u9898\u7684\u89c4\u6a21 \u5b9e\u73b0 \u00b6 \u7c7b\u4f3c Lomuto \u5212\u5206\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u4ec5 \u5de6\u8d77\u653e\u7f6e \\(<\\mathrm{pivot}\\) \u7684\u5143\u7d20\uff0c\u8fd8 \u53f3\u8d77\u653e\u7f6e \\(>\\mathrm{pivot}\\) \u7684\u5143\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void three_way_quicksort ( int * a , int l , int r ){ if ( l < r ){ int pivot = a [ r ]; int j = l ; // \u904d\u5386\u6307\u9488 int L = l , R = r -1 ; // \u8fb9\u754c\u6307\u9488 while ( j <= R ){ if ( a [ j ] < pivot ){ swap ( a [ j ++ ], a [ L ++ ]); } else if ( a [ j ] > pivot ){ swap ( a [ j ], a [ R -- ]); // j \u4e0d\u53f3\u79fb\uff0c\u56e0\u4e3a\u6362\u8fc7\u6765\u7684 a[R] \u4e5f\u8981\u6bd4 } else { j ++ ; } } swap ( a [ r ], a [ j ]); three_way_quicksort ( a , l , L -1 ); three_way_quicksort ( a , R + 2 , r ); // \u5751\u70b9 } return ; } Warning \u5982\u679c\u7528\u51fd\u6570\u5b9e\u73b0\u4e09\u8def\u5212\u5206\uff0c\u52bf\u5fc5\u8981\u8fd4\u56de\u4e24\u4e2a\u53c2\u6570\uff08 \u4e2d\u95f4 \\(=\\mathrm{pivot}\\) \u5b50\u5217\u7684\u5de6\u53f3\u7aef\u70b9 \uff09\uff0c\u6240\u4ee5\u50cf\u4e0a\u9762\u8fd9\u6837\u628a\u5212\u5206\u548c\u6392\u5e8f\u653e\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u4f1a\u6bd4\u8f83\u65b9\u4fbf \u591a\u7ebf\u7a0b\u5feb\u6392 \u00b6","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"algo/sort/quick/#_1","text":"","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"algo/sort/quick/#_2","text":"","title":"\u4e3b\u7b97\u6cd5"},{"location":"algo/sort/quick/#_3","text":"1 2 3 4 5 6 7 8 void quick_sort ( const int a * , int l , int r ){ if ( l < r ){ int m = partition ( a , l , r ); quick_sort ( a , l , m -1 ); quick_sort ( a , m + 1 , r ); } return ; }","title":"\u5b9e\u73b0"},{"location":"algo/sort/quick/#_4","text":"","title":"\u5212\u5206"},{"location":"algo/sort/quick/#_5","text":"","title":"\u7b97\u6cd5"},{"location":"algo/sort/quick/#lomuto","text":"\u5de6\u8d77\u653e\u7f6e\u6bd4 \\(\\mathrm{pivot}\\) \u5c0f\u7684\u5143\u7d20 \u6b63\u786e\u6027\u8bc1\u660e\u5982\u4e0b\uff1a \u5f52\u7eb3\u5047\u8bbe \uff1a \\(i\\) \u5de6\u8fb9\u7684\u5143\u7d20\u90fd \\(<\\mathrm{pivot}\\) \uff0c \\([\\,i\\,,\\,j\\,)\\) \u5185\u7684\u5143\u7d20\u90fd\u5927\u4e8e \\(\\mathrm{pivot}\\) \u5f52\u7eb3\u5960\u57fa \uff1a\u5faa\u73af\u672a\u5f00\u59cb\u65f6\uff0c \\(i\\) \u5de6\u8fb9\u6ca1\u6709\u5143\u7d20\uff0c \\([\\,i\\,,\\,j\\,)\\) \u4e5f\u6ca1\u6709\u5143\u7d20\uff0c\u5047\u8bbe\u6210\u7acb \u5f52\u7eb3\u9012\u63a8 \uff1a\u5faa\u73af\u4e2d\uff0c\u5206\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a \u904d\u5386\u6307\u9488 \\(j\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_j\u2265\\mathrm{pivot}\\) \uff0c\u7ee7\u7eed\u904d\u5386\uff08 \\(j\\) \u53f3\u79fb \uff09\uff0c\u5047\u8bbe\u4ecd\u6210\u7acb \u904d\u5386\u6307\u9488 \\(j\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_j<\\mathrm{pivot}\\) \uff0c\u5c06\u5176\u653e\u5230 \\(i\\) \u5de6\u8fb9\uff08 \u4ea4\u6362 \\(x_i\\ ,\\ x_j\\) \uff0c\u8fb9\u754c \\(i\\) \u53f3\u79fb \uff09\uff0c\u7ee7\u7eed\u904d\u5386\uff08 \\(j\\) \u53f3\u79fb \uff09\uff0c\u5219\u5047\u8bbe\u4ecd\u6210\u7acb \u7ed3\u8bba \uff1a\u5f53 \\(L\\not <R\\) \u5faa\u73af\u7ed3\u675f\u65f6\uff0c\u5f52\u7eb3\u5047\u8bbe\u6210\u7acb \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 int partition ( int * a , int l , int r ){ int pivot = a [ r ]; int i , j ; for ( i = j = l ; j < r ; j ++ ){ if ( a [ j ] < pivot ){ swap ( a [ j ], a [ i ++ ]); } } swap ( a [ i ], a [ r ]); return i ; }","title":"Lomuto \u5212\u5206"},{"location":"algo/sort/quick/#_6","text":"\u6b63\u786e\u6027\u8bc1\u660e\u5982\u4e0b\uff1a \u5f52\u7eb3\u5047\u8bbe \uff1a\u5de6\u6307\u9488 \\(L\\) \u5de6\u8fb9\u7684\u5143\u7d20\u90fd \\(\u2264\\mathrm{pivot}\\) \uff0c\u53f3\u6307\u9488 \\(R\\) \u53f3\u8fb9\u7684\u5143\u7d20\u90fd \\(>\\mathrm{pivot}\\) \u5f52\u7eb3\u5960\u57fa \uff1a\u5faa\u73af\u672a\u5f00\u59cb\u65f6\uff0c \\(L\\) \u5de6\u8fb9\u548c \\(R\\) \u53f3\u8fb9\u90fd\u6ca1\u6709\u5143\u7d20\uff0c\u5047\u8bbe\u6210\u7acb \u5f52\u7eb3\u9012\u63a8 \uff1a\u5faa\u73af\u4e2d\uff0c\u5206\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a \u5de6\u6307\u9488 \\(L\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_L\u2264\\mathrm{pivot}\\) \uff0c \u6216 \u53f3\u6307\u9488 \\(R\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_R>\\mathrm{pivot}\\) \uff0c\u90a3\u4e48\u53ef\u4ee5\u7ee7\u7eed\u76f8\u5411\u79fb\u52a8\u5de6\uff08\u53f3\uff09\u6307\u9488\uff0c\u4f7f\u5047\u8bbe\u4ecd\u6210\u7acb \u5de6\u6307\u9488 \\(L\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_L>\\mathrm{pivot}\\) \uff0c \u4e14 \u53f3\u6307\u9488 \\(R\\) \u6307\u5411\u7684\u5143\u7d20 \\(x_R\u2264\\mathrm{pivot}\\) \uff0c\u5219 \u4ea4\u6362 \\(x_L\\ ,\\ x_R\\) \uff0c\u8f6c\u5316\u4e3a\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u5047\u8bbe\u4ecd\u6210\u7acb \u7ed3\u8bba \uff1a\u5f53 \\(L\\not <R\\) \u7ed3\u675f\u5faa\u73af\u65f6\uff0c\u5f52\u7eb3\u5047\u8bbe\u6210\u7acb \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // \u672c\u4eba\u539f\u521b int partition ( int * a , int l , int r ){ int pivot = a [ l ]; int L = l + 1 , R = r ; for ( int tot = 0 ; tot < r - l ;){ // \u5de6\u3001\u53f3\u6307\u9488\u79fb\u52a8\u603b\u6b21\u6570 tot<r-l\uff0c\u5219\u4e24\u6307\u9488\u4e00\u5b9a\u6ca1\u6709\u4ea4\u9519\uff0c\u4e5f\u6ca1\u6709\u8d8a\u8fc7\u5de6\u53f3\u8fb9\u754c bool is = true ; if ( a [ L ] <= pivot ){ L ++ ; tot ++ ; is = false ; } if ( a [ R ] > pivot ){ R -- ; tot ++ ; is = false ; } if ( is ) swap ( a [ L ], a [ R ]); // \u5982\u679c\u4e24\u4e2a\u6307\u9488\u90fd\u65e0\u6cd5\u79fb\u52a8\uff0c\u5219\u4ea4\u6362 } swap ( a [ l ], a [ R ]); return R ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // \u81ea\u7b97\u6cd5\u5f15\u8bba\u4f2a\u4ee3\u7801 int partition ( int * a , int l , int r ){ int pivot = a [ l ]; int L = l , R = r ; while ( L < R ){ while ( a [ L ] <= pivot && L <= r ){ L ++ ; } while ( a [ R ] > pivot && R >= l ){ R -- ; } if ( L < R ) swap ( a [ L ], a [ R ]); } swap ( a [ l ], a [ R ]); return R ; }","title":"\u76f8\u5411\u53cc\u6307\u9488\u5212\u5206"},{"location":"algo/sort/quick/#_7","text":"\u5982\u679c\u5212\u5206\u540e\u5de6\u53f3\u5b50\u5217\u957f\u5ea6\u603b\u662f\u76f8\u7b49\uff0c\u7531\u9012\u5f52\u5173\u7cfb \\[T(n)=2\\,\\Big(\\frac{n}2\\Big)+O(n)\\] \u548c\u7ec8\u6b62\u6761\u4ef6 \\[T(2)=1\\] \u5bb9\u6613\u77e5\u9053\uff0c\u6b64\u65f6\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230 \\[T(n)=O(n\\log n)\\] \u5982\u679c\u6bcf\u6b21\u5212\u5206\u540e\u67d0\u4fa7\u5b50\u5217\u957f\u5ea6\u4e3a 0\uff0c\u5219\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u6700\u574f\u7684 \\(O(n^2)\\) \u53ef\u89c1\u67a2\u503c \\(\\mathrm{pivot}\\) \u7684\u9009\u53d6\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u7740\u5feb\u901f\u6392\u5e8f\u7684\u6027\u80fd\uff0c\u4e3a\u907f\u514d\u6700\u574f\u60c5\u51b5\u7684\u51fa\u73b0\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u5e38\u89c1\u7684\u67a2\u503c\u9009\u53d6\u65b9\u5f0f","title":"\u67a2\u503c\u7684\u9009\u53d6"},{"location":"algo/sort/quick/#_8","text":"\u867d\u7136\u4f7f\u7528 \u5feb\u901f\u9009\u62e9 \u7b97\u6cd5\u53ef\u4ee5 \\(O(n)\\) \u5730\u67e5\u627e\u4e2d\u503c\uff0c\u4f46\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 \u7b2c\u4e00\u4e2a\u3001\u6700\u540e\u4e00\u4e2a\u3001\u4e2d\u95f4 \u4e09\u4e2a\u6570\u7684\u4e2d\u6570\uff08\u5373\u7b2c\u4e8c\u5927\u7684\uff09\u4f5c\u4e3a\u67a2\u503c\u5373\u53ef","title":"\u4e09\u6570\u53d6\u4e2d"},{"location":"algo/sort/quick/#_9","text":"\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u4ece\u5e8f\u5217\u4e2d\u968f\u673a\u53d6\u6570\u4f5c\u4e3a\u67a2\u503c","title":"\u968f\u673a\u9009\u53d6"},{"location":"algo/sort/quick/#_10","text":"\u5feb\u901f\u6392\u5e8f\u9002\u5408\u957f\u5e8f\u5217\uff0c\u5bf9\u77ed\u5e8f\u5217\u6765\u8bf4\u6027\u80fd\u53cd\u800c\u4e0d\u5982\u63d2\u5165\u6392\u5e8f\u8fd9\u79cd\u7b80\u5355\u6392\u5e8f \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5e8f\u5217\u88ab\u5212\u5206\u5230\u89c4\u6a21\u5c0f\u4e8e\u4e00\u5b9a\u503c\u65f6\u4e0d\u518d\u7ee7\u7eed\u5212\u5206\uff0c\u800c\u662f\u8c03\u7528\u63d2\u5165\u6392\u5e8f","title":"\u5c0f\u89c4\u6a21\u6570\u636e\u6539\u7528\u63d2\u5165\u6392\u5e8f"},{"location":"algo/sort/quick/#_11","text":"\u5982\u679c\u5e8f\u5217\u4e2d\u6709\u5927\u91cf\u91cd\u590d\u5143\u7d20\uff0c\u6211\u4eec\u4e0d\u59a8\u5728\u5212\u5206\u65f6\u5c06\u6570\u7ec4\u5206\u4e3a \\(>\\mathrm{pivot}\\) \uff0c \\(=\\mathrm{pivot}\\) \uff0c \\(<\\mathrm{pivot}\\) \u4e09\u90e8\u5206\uff0c\u7ee7\u7eed\u5212\u5206\u65f6\u53ea\u8003\u8651 \\(>\\mathrm{pivot}\\) \uff0c \\(<\\mathrm{pivot}\\) \u4e24\u90e8\u5206\uff0c\u800c\u4e0d\u8003\u8651 \\(=\\mathrm{pivot}\\) \u7684\u5b50\u5217\uff0c\u8fd9\u6837\u5c31\u7f29\u5c0f\u4e86\u95ee\u9898\u7684\u89c4\u6a21","title":"\u4e09\u8def\u5212\u5206"},{"location":"algo/sort/quick/#_12","text":"\u7c7b\u4f3c Lomuto \u5212\u5206\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u4ec5 \u5de6\u8d77\u653e\u7f6e \\(<\\mathrm{pivot}\\) \u7684\u5143\u7d20\uff0c\u8fd8 \u53f3\u8d77\u653e\u7f6e \\(>\\mathrm{pivot}\\) \u7684\u5143\u7d20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void three_way_quicksort ( int * a , int l , int r ){ if ( l < r ){ int pivot = a [ r ]; int j = l ; // \u904d\u5386\u6307\u9488 int L = l , R = r -1 ; // \u8fb9\u754c\u6307\u9488 while ( j <= R ){ if ( a [ j ] < pivot ){ swap ( a [ j ++ ], a [ L ++ ]); } else if ( a [ j ] > pivot ){ swap ( a [ j ], a [ R -- ]); // j \u4e0d\u53f3\u79fb\uff0c\u56e0\u4e3a\u6362\u8fc7\u6765\u7684 a[R] \u4e5f\u8981\u6bd4 } else { j ++ ; } } swap ( a [ r ], a [ j ]); three_way_quicksort ( a , l , L -1 ); three_way_quicksort ( a , R + 2 , r ); // \u5751\u70b9 } return ; } Warning \u5982\u679c\u7528\u51fd\u6570\u5b9e\u73b0\u4e09\u8def\u5212\u5206\uff0c\u52bf\u5fc5\u8981\u8fd4\u56de\u4e24\u4e2a\u53c2\u6570\uff08 \u4e2d\u95f4 \\(=\\mathrm{pivot}\\) \u5b50\u5217\u7684\u5de6\u53f3\u7aef\u70b9 \uff09\uff0c\u6240\u4ee5\u50cf\u4e0a\u9762\u8fd9\u6837\u628a\u5212\u5206\u548c\u6392\u5e8f\u653e\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u4f1a\u6bd4\u8f83\u65b9\u4fbf","title":"\u5b9e\u73b0"},{"location":"algo/sort/quick/#_13","text":"","title":"\u591a\u7ebf\u7a0b\u5feb\u6392"},{"location":"ds/AVL/","text":"AVL \u6811 \u00b6 AVL \u6811 \u662f\u4e00\u79cd \u57fa\u4e8e\u65cb\u8f6c \u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \uff0c\u6811\u4e2d\u4efb\u4e00\u8282\u70b9\u5bf9\u5e94\u7684\u4e24\u68f5\u5b50\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u5dee\u4e3a 1\uff0c\u56e0\u6b64\u4e5f\u88ab\u79f0\u4e3a \u9ad8\u5ea6\u5e73\u8861\u6811 \uff0c\u80fd\u5728 \\(O(\\log n)\\) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u63d2\u5165\u3001\u67e5\u627e\u3001\u4fee\u6539\u548c\u5220\u9664\u64cd\u4f5c \u518d\u5e73\u8861 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 int h ( const node * root ){ return root == nullptr ? -1 : root -> h ; } int calc_h ( const node * root ){ return max ( h ( root -> lc ), h ( root -> rc )) + 1 ; } node * R_rotate ( node * root ){ node * tmp = root -> lc ; root -> lc = tmp -> rc ; tmp -> rc = root ; // \u89c2\u5bdf\u53d1\u73b0\u53f3\u65cb\u64cd\u4f5c\u4e2d\uff0c\u53ea\u6709 tmp \u548c tmp->rc \u7684\u6811\u9ad8\u4f1a\u53d8 // \u800c\u4e4b\u524d temp->rc=root\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u505a\u5982\u4e0b\u66f4\u65b0\u5373\u53ef tmp -> h = calc_h ( tmp ); root -> h = calc_h ( root ); return tmp ; } node * L_rotate ( node * root ){ node * tmp = root -> rc ; root -> rc = tmp -> lc ; tmp -> lc = root ; // \u89c2\u5bdf\u53d1\u73b0\u5de6\u65cb\u64cd\u4f5c\u4e2d\uff0c\u53ea\u6709 tmp \u548c tmp->lc \u7684\u6811\u9ad8\u4f1a\u53d8 // \u800c\u4e4b\u524d temp->lc=root\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u505a\u5982\u4e0b\u66f4\u65b0\u5373\u53ef tmp -> h = calc_h ( tmp ); root -> h = calc_h ( root ); return tmp ; } int fac ( node * root ){ return ( root -> lc == nullptr ? -1 : root -> lc -> h ) - ( root -> rc == nullptr ? -1 : root -> rc -> h ); } node * rebalance ( node * root ){ if ( fac ( root ) > 1 ){ if ( fac ( root -> lc ) > 0 ) return R_rotate ( root ); // LL \u578b -> \u53f3\u65cb else { // LR \u578b -> \u5148\u5de6\u65cb\uff0c\u518d\u53f3\u65cb root -> lc = L_rotate ( root -> rc ); return R_rotate ( root ); } } else if ( fac ( root ) < -1 ){ if ( fac ( root -> rc ) < 0 ) return L_rotate ( root ); // RR \u578b -> \u5de6\u65cb else { // RL \u578b -> \u5148\u53f3\u65cb\uff0c\u518d\u5de6\u65cb root -> rc = R_rotate ( root -> rc ); return L_rotate ( root ); } } else return root ; } \u63d2\u5165 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void insert ( node *& root , int _val ){ if ( root == nullptr ){ root = new node ; root -> val = _val ; return ; } if ( root -> val == _val ){ root -> cnt ++ ; return ; } // \u9012\u5f52\u641c\u7d22\u63d2\u5165\u70b9 if ( _val < root -> val ) insert ( root -> lc , _val ); if ( _val > root -> val ) insert ( root -> rc , _val ); // \u518d\u5e73\u8861 root = rebalance ( root ); // \u56de\u6eaf\u66f4\u65b0\u7236\u7ed3\u70b9\u9ad8 root -> h = calc_h ( root ); return ; } \u5220\u9664 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 void left_del ( node * target , node * root ){ if ( root -> lc == nullptr ){ // no need to check rc swap ( target -> val , root -> val ); delete root ; root = nullptr ; return ; } return left_del ( target , root -> lc ); } void del ( node *& root , int _val ){ if ( root -> val == _val ){ if ( root -> cnt > 1 ){ root -> cnt -- ; return ; } if ( root -> lc == nullptr ){ if ( root -> rc == nullptr ){ delete root ; root = nullptr ; return ; } delete root ; root = root -> rc ; return ; } if ( root -> rc == nullptr ){ delete root ; root = root -> lc ; return ; } left_del ( root , root ); return ; } if ( _val < root -> val ) del ( root -> lc , _val ); if ( _val > root -> val ) del ( root -> rc , _val ); root = rebalance ( root ); // \u56de\u6eaf\u518d\u5e73\u8861 return ; }","title":"AVL \u6811"},{"location":"ds/AVL/#avl","text":"AVL \u6811 \u662f\u4e00\u79cd \u57fa\u4e8e\u65cb\u8f6c \u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \uff0c\u6811\u4e2d\u4efb\u4e00\u8282\u70b9\u5bf9\u5e94\u7684\u4e24\u68f5\u5b50\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u5dee\u4e3a 1\uff0c\u56e0\u6b64\u4e5f\u88ab\u79f0\u4e3a \u9ad8\u5ea6\u5e73\u8861\u6811 \uff0c\u80fd\u5728 \\(O(\\log n)\\) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u63d2\u5165\u3001\u67e5\u627e\u3001\u4fee\u6539\u548c\u5220\u9664\u64cd\u4f5c","title":"AVL \u6811"},{"location":"ds/AVL/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 int h ( const node * root ){ return root == nullptr ? -1 : root -> h ; } int calc_h ( const node * root ){ return max ( h ( root -> lc ), h ( root -> rc )) + 1 ; } node * R_rotate ( node * root ){ node * tmp = root -> lc ; root -> lc = tmp -> rc ; tmp -> rc = root ; // \u89c2\u5bdf\u53d1\u73b0\u53f3\u65cb\u64cd\u4f5c\u4e2d\uff0c\u53ea\u6709 tmp \u548c tmp->rc \u7684\u6811\u9ad8\u4f1a\u53d8 // \u800c\u4e4b\u524d temp->rc=root\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u505a\u5982\u4e0b\u66f4\u65b0\u5373\u53ef tmp -> h = calc_h ( tmp ); root -> h = calc_h ( root ); return tmp ; } node * L_rotate ( node * root ){ node * tmp = root -> rc ; root -> rc = tmp -> lc ; tmp -> lc = root ; // \u89c2\u5bdf\u53d1\u73b0\u5de6\u65cb\u64cd\u4f5c\u4e2d\uff0c\u53ea\u6709 tmp \u548c tmp->lc \u7684\u6811\u9ad8\u4f1a\u53d8 // \u800c\u4e4b\u524d temp->lc=root\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u505a\u5982\u4e0b\u66f4\u65b0\u5373\u53ef tmp -> h = calc_h ( tmp ); root -> h = calc_h ( root ); return tmp ; } int fac ( node * root ){ return ( root -> lc == nullptr ? -1 : root -> lc -> h ) - ( root -> rc == nullptr ? -1 : root -> rc -> h ); } node * rebalance ( node * root ){ if ( fac ( root ) > 1 ){ if ( fac ( root -> lc ) > 0 ) return R_rotate ( root ); // LL \u578b -> \u53f3\u65cb else { // LR \u578b -> \u5148\u5de6\u65cb\uff0c\u518d\u53f3\u65cb root -> lc = L_rotate ( root -> rc ); return R_rotate ( root ); } } else if ( fac ( root ) < -1 ){ if ( fac ( root -> rc ) < 0 ) return L_rotate ( root ); // RR \u578b -> \u5de6\u65cb else { // RL \u578b -> \u5148\u53f3\u65cb\uff0c\u518d\u5de6\u65cb root -> rc = R_rotate ( root -> rc ); return L_rotate ( root ); } } else return root ; }","title":"\u518d\u5e73\u8861"},{"location":"ds/AVL/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void insert ( node *& root , int _val ){ if ( root == nullptr ){ root = new node ; root -> val = _val ; return ; } if ( root -> val == _val ){ root -> cnt ++ ; return ; } // \u9012\u5f52\u641c\u7d22\u63d2\u5165\u70b9 if ( _val < root -> val ) insert ( root -> lc , _val ); if ( _val > root -> val ) insert ( root -> rc , _val ); // \u518d\u5e73\u8861 root = rebalance ( root ); // \u56de\u6eaf\u66f4\u65b0\u7236\u7ed3\u70b9\u9ad8 root -> h = calc_h ( root ); return ; }","title":"\u63d2\u5165"},{"location":"ds/AVL/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 void left_del ( node * target , node * root ){ if ( root -> lc == nullptr ){ // no need to check rc swap ( target -> val , root -> val ); delete root ; root = nullptr ; return ; } return left_del ( target , root -> lc ); } void del ( node *& root , int _val ){ if ( root -> val == _val ){ if ( root -> cnt > 1 ){ root -> cnt -- ; return ; } if ( root -> lc == nullptr ){ if ( root -> rc == nullptr ){ delete root ; root = nullptr ; return ; } delete root ; root = root -> rc ; return ; } if ( root -> rc == nullptr ){ delete root ; root = root -> lc ; return ; } left_del ( root , root ); return ; } if ( _val < root -> val ) del ( root -> lc , _val ); if ( _val > root -> val ) del ( root -> rc , _val ); root = rebalance ( root ); // \u56de\u6eaf\u518d\u5e73\u8861 return ; }","title":"\u5220\u9664"},{"location":"ds/BST/","text":"\u4e8c\u53c9\u641c\u7d22\u6811 \u00b6 \u6982\u5ff5 \u00b6 \u4e8c\u53c9\u67e5\u627e\u6811 \uff08Binary Search Tree\uff0c\u7b80\u79f0 BST\uff09\uff0c\u4e5f\u79f0 \u4e8c\u53c9\u67e5\u627e\u6811 \u3001 \u6709\u5e8f\u4e8c\u53c9\u6811 \u3001 \u6392\u5e8f\u4e8c\u53c9\u6811 \u7a7a\u6811\u662f\u4e8c\u53c9\u641c\u7d22\u6811 \u5de6\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c \u5c0f\u4e8e \u6839\u8282\u70b9\u7684\u503c \u53f3\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c \u5927\u4e8e \u6839\u8282\u70b9\u7684\u503c \u4efb\u610f\u8282\u70b9\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811 \u64cd\u4f5c \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 // \u7ed3\u70b9\u5b9a\u4e49 struct node { int val ; int siz ; // \u8be5\u8282\u70b9\u5b50\u6811\u5927\u5c0f int cnt ; // \u503c\u4e3a val \u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7528\u4e8e\u5904\u7406\u91cd\u590d\u503c node * lc ; // \u5de6\u5b69\u5b50\u6307\u9488 node * rc ; // \u53f3\u5b69\u5b50\u6307\u9488 node (){ val = 0 ; cnt = siz = 1 ; lc = rc = nullptr ; } }; \u904d\u5386 \u00b6 L \u8868\u793a\u904d\u5386 \u5de6\u5b50\u6811 R \u8868\u793a\u904d\u5386 \u53f3\u5b50\u6811 D \u8868\u793a\u8bbf\u95ee \u6839\u8282\u70b9 \u5148\u6839\u904d\u5386\uff08DLR\uff09 \u00b6 1 2 3 4 5 6 void DLR ( const node * root ){ if ( root == nullptr ) return ; // display root DLR ( root -> lc ); DLR ( root -> rc ); } \u4e2d\u6839\u904d\u5386\uff08LDR\uff09 \u00b6 \u4e8c\u53c9\u641c\u7d22\u6811\u7684 \u4e2d\u6839\u904d\u5386\u5e8f \u662f\u6709\u5e8f\u7684 1 2 3 4 5 6 void LDR ( const node * root ){ if ( root == nullptr ) return ; LDR ( root -> lc ); // display root LDR ( root -> rc ); } \u540e\u6839\u904d\u5386\uff08LRD\uff09 \u00b6 1 2 3 4 5 6 void LRD ( const node * root ){ if ( root == nullptr ) return ; LRD ( root -> lc ); LRD ( root -> rc ); // display root } \u6700\u503c\u67e5\u627e \u00b6 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0a\u7684\u6700\u5927\uff08\u5c0f\uff09\u503c\u4e3a \u53f3\uff08\u5de6\uff09\u94fe\u7684\u9876\u70b9 1 2 3 4 5 6 7 8 node * find_max ( node * root ){ if ( root -> rc == nullptr ) return root ; return find_max ( root -> rc ); } node * find_min ( node * root ){ if ( root -> lc == nullptr ) return root ; return find_min ( root -> lc ); } \u63d2\u5165 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void insert ( node *& root , int _val ){ if ( root == nullptr ){ // \u627e\u5230\u63d2\u5165\u70b9\uff0c\u63d2\u5165 root = new node ; root -> val = _val ; return ; } root -> siz ++ ; // \u66f4\u65b0 siz\uff0c\u6ce8\u610f\u5728\u641c\u7d22\u65f6\u66f4\u65b0\u800c\u4e0d\u662f\u56de\u6eaf\u65f6\u66f4\u65b0 // \u66f4\u65b0 siz \u4e4b\u6240\u4ee5\u653e\u5728\u8fd9\u91cc\u800c\u4e0d\u662f\u5f00\u5934\u6216\u9012\u5f52\u641c\u7d22\u524d\uff0c\u662f\u56e0\u4e3a\u5982\u679c\u63d2\u5165\u65b0 node\uff0c\u65b0 node \u672c\u8eab cnt=1 \u4e0d\u7528\u52a0\uff0c\u653e\u5728\u5f00\u5934\u5c31\u4f1a\u591a\u52a0\u4e00\u4e2a\uff0c\u800c\u5982\u679c\u5df2\u5b58\u5728\u76f8\u540c val \u7684\u7ed3\u70b9\uff0c\u5219\u8fd8\u8981\u8ba9\u8fd9\u4e2a\u8282\u70b9\u7684 cnt++\uff0c\u653e\u5728\u9012\u5f52\u524d\u9762\u5c31\u4f1a\u5728\u627e\u5230 val \u76f8\u540c\u7684\u7ed3\u70b9\u540e\u76f4\u63a5 return \u6389\u800c\u4e0d\u4f1a\u66f4\u65b0\u8fd9\u4e2a\u7ed3\u70b9\u7684 siz \u4e86 // \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u628a siz \u66f4\u65b0\u8bed\u53e5\u5199\u5728\u4e0b\u9762\u7684 if \u5faa\u73af\u91cc\u9762\uff0c\u518d\u628a root->siz++ \u653e\u5230\u9012\u5f52\u524d\u9762 if ( root -> val == _val ){ // \u5df2\u5b58\u5728 val\uff0ccnt++ root -> cnt ++ ; return ; } if ( _val < root -> val ) return insert ( root -> lc , _val ); // \u9012\u5f52\u641c\u7d22\u5de6\u5b50\u6811\uff0c\u627e\u63d2\u5165\u70b9 if ( _val > root -> val ) return insert ( root -> rc , _val ); // \u9012\u5f52\u641c\u7d22\u53f3\u5b50\u6811\uff0c\u627e\u63d2\u5165\u70b9 } \u5220\u9664 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 void left_del ( node *& target , node *& root ){ if ( root -> lc == nullptr ){ swap ( target -> val , root -> val ); delete root ; root = nullptr ; return ; } return left_del ( target , root -> lc ); } void del ( node *& root , int _val ){ if ( root == nullptr ) return ; if ( _val == root -> val ){ if ( root -> cnt > 1 ){ root -> cnt -- ; return ; } if ( root -> lc == nullptr ){ if ( root -> rc == nullptr ){ // C1: lc=rc=nil\uff08\u53f6\u5b50\u8282\u70b9\uff09 delete root ; root = nullptr ; return ; } // C2: lc=nil rc!=nil\uff08\u94fe\u8282\u70b9\uff09 delete root ; root = root -> rc ; return ; } if ( root -> rc == nullptr ){ // C3: lc!=nil rc=nil\uff08\u94fe\u8282\u70b9\uff09 delete root ; root = root -> lc ; return ; } // C4: lc,rc!=nil\uff08\u5de6\u53f3\u5b50\u8282\u70b9\u5747\u975e\u7a7a\uff09 // \u4f7f\u7528 find_max \u6216 find_min \u51fd\u6570\u5c06\u96be\u4ee5\u7f6e\u7a7a\u7236\u6307\u9488\uff0c\u6545\u76f4\u63a5\u5199\u4e00\u4e2a\u9012\u5f52\u5220\u9664\u51fd\u6570 left_del ( root , root ); return ; } // \u5220\u9664\u65f6\uff0c\u7ed3\u70b9\u76f4\u63a5\u88ab\u5220\u6389\uff0c\u4e0d\u7528\u8003\u8651\u5f53\u524d\u8282\u70b9 siz \u66f4\u65b0\u7684\u95ee\u9898\uff0c\u4e0e\u63d2\u5165\u4e00\u6837\uff0c\u9009\u62e9\u5728\u641c\u7d22\u65f6\u66f4\u65b0\u800c\u4e0d\u662f\u56de\u6eaf\u65f6\u66f4\u65b0 root -> siz -- ; if ( _val < root -> val ) del ( root -> lc , _val ); if ( _val > root -> val ) del ( root -> rc , _val ); } \u8ba1\u7b97\u5404\u7ed3\u70b9\u5b50\u6811\u5927\u5c0f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 void calc_siz ( node *& root ){ // \u8ba1\u7b97\u5404\u8282\u70b9\u5b50\u6811\u5927\u5c0f // \u6ce8\u610f\u9012\u5f52\u8fb9\u754c\u4e0d\u80fd\u7528 root==nullptr\uff0c\u56e0\u4e3a\u8fd9\u6837\u56de\u6eaf\u540e root \u5de6\u53f3\u5b50\u8282\u70b9\u5747\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u8ba1\u7b97 siz if ( root -> lc == nullptr ){ if ( root -> rc == nullptr ){ // lc=rc=nil return ; } // lc=nil rc!=nil calc_siz ( root -> rc ); root -> siz += root -> rc -> siz ; return ; } if ( root -> rc == nullptr ){ // lc!=nil rc=nil calc_siz ( root -> lc ); root -> siz += root -> lc -> siz ; return ; } // lc,rc!=nil calc_siz ( root -> lc ); root -> siz += root -> lc -> siz ; calc_siz ( root -> rc ); root -> siz += root -> rc -> siz ; return ; } \u6c42\u5143\u7d20\u6392\u540d \u00b6 \u5b9a\u4e49 \uff1a\u67d0\u4e2a\u5143\u7d20\u7684\u6392\u540d\u6307\u7684\u662f \u5c0f\u4e8e\u8be5\u5143\u7d20\u7684\u5143\u7d20\u4e2a\u6570 +1 1 2 3 4 5 6 7 8 9 10 11 int calc_rank ( const node * root , int _val ){ // \u6839\u8282\u70b9\u7684 rank \u53ea\u4e0e\u5176\u5de6\u5b50\u6811\u5927\u5c0f\u6709\u5173 // \u5bf9\u6839\u8282\u70b9\u7684\u53f3\u5b69\u5b50\uff0c\u6709\u4e09\u90e8\u5206\u6bd4\u4ed6\u5c0f\uff0c1. \u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811 2. \u6839\u8282\u70b9\u672c\u8eab 3. \u8fd9\u4e2a\u53f3\u5b69\u5b50\u81ea\u5df1\u7684\u5de6\u5b50\u6811 // \u627e\u5230\u8981\u6c42\u7684\u7ed3\u70b9\uff0c\u5982\u679c\u5176\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u5176\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u90fd\u6bd4\u5b83\u5c0f\uff0c\u6ce8\u610f\u6839\u636e\u5b9a\u4e49\u52a0\u4e00 if ( _val == root -> val ) return root -> lc == nullptr ? 1 : root -> lc -> siz + 1 ; // \u4ece\u5de6\u4fa7\u56de\u6eaf\uff0c\u56de\u6eaf\u8def\u4e0a\u7ed3\u70b9\u90fd\u6bd4\u5b83\u5927\uff0c\u4e0d\u6ee1\u8db3\u8981\u6c42 if ( _val < root -> val ) return calc_rank ( root -> lc , _val ); // \u4ece\u53f3\u4fa7\u56de\u6eaf\uff0c\u56de\u6eaf\u8def\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u53ca\u5176\u5de6\u5b50\u6811\u90fd\u6bd4\u5b83\u5c0f if ( _val > root -> val ) return calc_rank ( root -> rc , _val ) + root -> lc -> siz + root -> cnt ; } \u6c42\u6392\u540d\u4e3a k \u7684\u5143\u7d20 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 node * get_kth ( node * root , int k ){ // \u9996\u5148\uff0c\u4e00\u4e2a\u5143\u7d20\u7684\u6392\u540d\u5b9a\u4e49\u4e3a\u6bd4\u4ed6\u5c0f\u7684\u6570\u7684\u4e2a\u6570+1 // \u56e0\u6b64\u5728\u4e00\u9897\u5b50\u6811\u4e2d\uff0c\u6839\u8282\u70b9\u7684\u6392\u540d\u53d6\u51b3\u4e8e\u5176\u5de6\u5b50\u6811\u7684\u5927\u5c0f // \u641c\u7d22\u4e2d\uff0c\u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff0c\u5982\u679c\u5411\u5de6\u513f\u5b50\u7ee7\u7eed\u641c\u7d22\uff0c\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u4e0d\u53d1\u751f\u6539\u53d8 // \u5982\u679c\u5411\u53f3\u513f\u5b50\u7ee7\u7eed\u641c\u7d22\uff0c\u5219\u6839\u8282\u70b9 \u6839\u8282\u70b9\u5de6\u5b50\u6811\u6240\u6709\u5143\u7d20\u90fd\u6bd4\u5b83\u5c0f\uff0c\u8981\u4ece\u6392\u540d\u4e2d\u51cf\u53bb if ( root -> lc == nullptr ){ if ( k -1 == 0 ) return root ; return nullptr ; } if ( root -> lc -> siz > k -1 ) return get_kth ( root -> lc , k ); if ( root -> lc -> siz + root -> cnt <= k -1 ) return get_kth ( root -> rc , k - root -> lc -> siz - root -> cnt ); return root ; }","title":"\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"ds/BST/#_1","text":"","title":"\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"ds/BST/#_2","text":"\u4e8c\u53c9\u67e5\u627e\u6811 \uff08Binary Search Tree\uff0c\u7b80\u79f0 BST\uff09\uff0c\u4e5f\u79f0 \u4e8c\u53c9\u67e5\u627e\u6811 \u3001 \u6709\u5e8f\u4e8c\u53c9\u6811 \u3001 \u6392\u5e8f\u4e8c\u53c9\u6811 \u7a7a\u6811\u662f\u4e8c\u53c9\u641c\u7d22\u6811 \u5de6\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c \u5c0f\u4e8e \u6839\u8282\u70b9\u7684\u503c \u53f3\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c \u5927\u4e8e \u6839\u8282\u70b9\u7684\u503c \u4efb\u610f\u8282\u70b9\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811","title":"\u6982\u5ff5"},{"location":"ds/BST/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // \u7ed3\u70b9\u5b9a\u4e49 struct node { int val ; int siz ; // \u8be5\u8282\u70b9\u5b50\u6811\u5927\u5c0f int cnt ; // \u503c\u4e3a val \u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7528\u4e8e\u5904\u7406\u91cd\u590d\u503c node * lc ; // \u5de6\u5b69\u5b50\u6307\u9488 node * rc ; // \u53f3\u5b69\u5b50\u6307\u9488 node (){ val = 0 ; cnt = siz = 1 ; lc = rc = nullptr ; } };","title":"\u64cd\u4f5c"},{"location":"ds/BST/#_4","text":"L \u8868\u793a\u904d\u5386 \u5de6\u5b50\u6811 R \u8868\u793a\u904d\u5386 \u53f3\u5b50\u6811 D \u8868\u793a\u8bbf\u95ee \u6839\u8282\u70b9","title":"\u904d\u5386"},{"location":"ds/BST/#dlr","text":"1 2 3 4 5 6 void DLR ( const node * root ){ if ( root == nullptr ) return ; // display root DLR ( root -> lc ); DLR ( root -> rc ); }","title":"\u5148\u6839\u904d\u5386\uff08DLR\uff09"},{"location":"ds/BST/#ldr","text":"\u4e8c\u53c9\u641c\u7d22\u6811\u7684 \u4e2d\u6839\u904d\u5386\u5e8f \u662f\u6709\u5e8f\u7684 1 2 3 4 5 6 void LDR ( const node * root ){ if ( root == nullptr ) return ; LDR ( root -> lc ); // display root LDR ( root -> rc ); }","title":"\u4e2d\u6839\u904d\u5386\uff08LDR\uff09"},{"location":"ds/BST/#lrd","text":"1 2 3 4 5 6 void LRD ( const node * root ){ if ( root == nullptr ) return ; LRD ( root -> lc ); LRD ( root -> rc ); // display root }","title":"\u540e\u6839\u904d\u5386\uff08LRD\uff09"},{"location":"ds/BST/#_5","text":"\u4e8c\u53c9\u641c\u7d22\u6811\u4e0a\u7684\u6700\u5927\uff08\u5c0f\uff09\u503c\u4e3a \u53f3\uff08\u5de6\uff09\u94fe\u7684\u9876\u70b9 1 2 3 4 5 6 7 8 node * find_max ( node * root ){ if ( root -> rc == nullptr ) return root ; return find_max ( root -> rc ); } node * find_min ( node * root ){ if ( root -> lc == nullptr ) return root ; return find_min ( root -> lc ); }","title":"\u6700\u503c\u67e5\u627e"},{"location":"ds/BST/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void insert ( node *& root , int _val ){ if ( root == nullptr ){ // \u627e\u5230\u63d2\u5165\u70b9\uff0c\u63d2\u5165 root = new node ; root -> val = _val ; return ; } root -> siz ++ ; // \u66f4\u65b0 siz\uff0c\u6ce8\u610f\u5728\u641c\u7d22\u65f6\u66f4\u65b0\u800c\u4e0d\u662f\u56de\u6eaf\u65f6\u66f4\u65b0 // \u66f4\u65b0 siz \u4e4b\u6240\u4ee5\u653e\u5728\u8fd9\u91cc\u800c\u4e0d\u662f\u5f00\u5934\u6216\u9012\u5f52\u641c\u7d22\u524d\uff0c\u662f\u56e0\u4e3a\u5982\u679c\u63d2\u5165\u65b0 node\uff0c\u65b0 node \u672c\u8eab cnt=1 \u4e0d\u7528\u52a0\uff0c\u653e\u5728\u5f00\u5934\u5c31\u4f1a\u591a\u52a0\u4e00\u4e2a\uff0c\u800c\u5982\u679c\u5df2\u5b58\u5728\u76f8\u540c val \u7684\u7ed3\u70b9\uff0c\u5219\u8fd8\u8981\u8ba9\u8fd9\u4e2a\u8282\u70b9\u7684 cnt++\uff0c\u653e\u5728\u9012\u5f52\u524d\u9762\u5c31\u4f1a\u5728\u627e\u5230 val \u76f8\u540c\u7684\u7ed3\u70b9\u540e\u76f4\u63a5 return \u6389\u800c\u4e0d\u4f1a\u66f4\u65b0\u8fd9\u4e2a\u7ed3\u70b9\u7684 siz \u4e86 // \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u628a siz \u66f4\u65b0\u8bed\u53e5\u5199\u5728\u4e0b\u9762\u7684 if \u5faa\u73af\u91cc\u9762\uff0c\u518d\u628a root->siz++ \u653e\u5230\u9012\u5f52\u524d\u9762 if ( root -> val == _val ){ // \u5df2\u5b58\u5728 val\uff0ccnt++ root -> cnt ++ ; return ; } if ( _val < root -> val ) return insert ( root -> lc , _val ); // \u9012\u5f52\u641c\u7d22\u5de6\u5b50\u6811\uff0c\u627e\u63d2\u5165\u70b9 if ( _val > root -> val ) return insert ( root -> rc , _val ); // \u9012\u5f52\u641c\u7d22\u53f3\u5b50\u6811\uff0c\u627e\u63d2\u5165\u70b9 }","title":"\u63d2\u5165"},{"location":"ds/BST/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 void left_del ( node *& target , node *& root ){ if ( root -> lc == nullptr ){ swap ( target -> val , root -> val ); delete root ; root = nullptr ; return ; } return left_del ( target , root -> lc ); } void del ( node *& root , int _val ){ if ( root == nullptr ) return ; if ( _val == root -> val ){ if ( root -> cnt > 1 ){ root -> cnt -- ; return ; } if ( root -> lc == nullptr ){ if ( root -> rc == nullptr ){ // C1: lc=rc=nil\uff08\u53f6\u5b50\u8282\u70b9\uff09 delete root ; root = nullptr ; return ; } // C2: lc=nil rc!=nil\uff08\u94fe\u8282\u70b9\uff09 delete root ; root = root -> rc ; return ; } if ( root -> rc == nullptr ){ // C3: lc!=nil rc=nil\uff08\u94fe\u8282\u70b9\uff09 delete root ; root = root -> lc ; return ; } // C4: lc,rc!=nil\uff08\u5de6\u53f3\u5b50\u8282\u70b9\u5747\u975e\u7a7a\uff09 // \u4f7f\u7528 find_max \u6216 find_min \u51fd\u6570\u5c06\u96be\u4ee5\u7f6e\u7a7a\u7236\u6307\u9488\uff0c\u6545\u76f4\u63a5\u5199\u4e00\u4e2a\u9012\u5f52\u5220\u9664\u51fd\u6570 left_del ( root , root ); return ; } // \u5220\u9664\u65f6\uff0c\u7ed3\u70b9\u76f4\u63a5\u88ab\u5220\u6389\uff0c\u4e0d\u7528\u8003\u8651\u5f53\u524d\u8282\u70b9 siz \u66f4\u65b0\u7684\u95ee\u9898\uff0c\u4e0e\u63d2\u5165\u4e00\u6837\uff0c\u9009\u62e9\u5728\u641c\u7d22\u65f6\u66f4\u65b0\u800c\u4e0d\u662f\u56de\u6eaf\u65f6\u66f4\u65b0 root -> siz -- ; if ( _val < root -> val ) del ( root -> lc , _val ); if ( _val > root -> val ) del ( root -> rc , _val ); }","title":"\u5220\u9664"},{"location":"ds/BST/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 void calc_siz ( node *& root ){ // \u8ba1\u7b97\u5404\u8282\u70b9\u5b50\u6811\u5927\u5c0f // \u6ce8\u610f\u9012\u5f52\u8fb9\u754c\u4e0d\u80fd\u7528 root==nullptr\uff0c\u56e0\u4e3a\u8fd9\u6837\u56de\u6eaf\u540e root \u5de6\u53f3\u5b50\u8282\u70b9\u5747\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u8ba1\u7b97 siz if ( root -> lc == nullptr ){ if ( root -> rc == nullptr ){ // lc=rc=nil return ; } // lc=nil rc!=nil calc_siz ( root -> rc ); root -> siz += root -> rc -> siz ; return ; } if ( root -> rc == nullptr ){ // lc!=nil rc=nil calc_siz ( root -> lc ); root -> siz += root -> lc -> siz ; return ; } // lc,rc!=nil calc_siz ( root -> lc ); root -> siz += root -> lc -> siz ; calc_siz ( root -> rc ); root -> siz += root -> rc -> siz ; return ; }","title":"\u8ba1\u7b97\u5404\u7ed3\u70b9\u5b50\u6811\u5927\u5c0f"},{"location":"ds/BST/#_9","text":"\u5b9a\u4e49 \uff1a\u67d0\u4e2a\u5143\u7d20\u7684\u6392\u540d\u6307\u7684\u662f \u5c0f\u4e8e\u8be5\u5143\u7d20\u7684\u5143\u7d20\u4e2a\u6570 +1 1 2 3 4 5 6 7 8 9 10 11 int calc_rank ( const node * root , int _val ){ // \u6839\u8282\u70b9\u7684 rank \u53ea\u4e0e\u5176\u5de6\u5b50\u6811\u5927\u5c0f\u6709\u5173 // \u5bf9\u6839\u8282\u70b9\u7684\u53f3\u5b69\u5b50\uff0c\u6709\u4e09\u90e8\u5206\u6bd4\u4ed6\u5c0f\uff0c1. \u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811 2. \u6839\u8282\u70b9\u672c\u8eab 3. \u8fd9\u4e2a\u53f3\u5b69\u5b50\u81ea\u5df1\u7684\u5de6\u5b50\u6811 // \u627e\u5230\u8981\u6c42\u7684\u7ed3\u70b9\uff0c\u5982\u679c\u5176\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u5176\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u90fd\u6bd4\u5b83\u5c0f\uff0c\u6ce8\u610f\u6839\u636e\u5b9a\u4e49\u52a0\u4e00 if ( _val == root -> val ) return root -> lc == nullptr ? 1 : root -> lc -> siz + 1 ; // \u4ece\u5de6\u4fa7\u56de\u6eaf\uff0c\u56de\u6eaf\u8def\u4e0a\u7ed3\u70b9\u90fd\u6bd4\u5b83\u5927\uff0c\u4e0d\u6ee1\u8db3\u8981\u6c42 if ( _val < root -> val ) return calc_rank ( root -> lc , _val ); // \u4ece\u53f3\u4fa7\u56de\u6eaf\uff0c\u56de\u6eaf\u8def\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u53ca\u5176\u5de6\u5b50\u6811\u90fd\u6bd4\u5b83\u5c0f if ( _val > root -> val ) return calc_rank ( root -> rc , _val ) + root -> lc -> siz + root -> cnt ; }","title":"\u6c42\u5143\u7d20\u6392\u540d"},{"location":"ds/BST/#k","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 node * get_kth ( node * root , int k ){ // \u9996\u5148\uff0c\u4e00\u4e2a\u5143\u7d20\u7684\u6392\u540d\u5b9a\u4e49\u4e3a\u6bd4\u4ed6\u5c0f\u7684\u6570\u7684\u4e2a\u6570+1 // \u56e0\u6b64\u5728\u4e00\u9897\u5b50\u6811\u4e2d\uff0c\u6839\u8282\u70b9\u7684\u6392\u540d\u53d6\u51b3\u4e8e\u5176\u5de6\u5b50\u6811\u7684\u5927\u5c0f // \u641c\u7d22\u4e2d\uff0c\u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff0c\u5982\u679c\u5411\u5de6\u513f\u5b50\u7ee7\u7eed\u641c\u7d22\uff0c\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u4e0d\u53d1\u751f\u6539\u53d8 // \u5982\u679c\u5411\u53f3\u513f\u5b50\u7ee7\u7eed\u641c\u7d22\uff0c\u5219\u6839\u8282\u70b9 \u6839\u8282\u70b9\u5de6\u5b50\u6811\u6240\u6709\u5143\u7d20\u90fd\u6bd4\u5b83\u5c0f\uff0c\u8981\u4ece\u6392\u540d\u4e2d\u51cf\u53bb if ( root -> lc == nullptr ){ if ( k -1 == 0 ) return root ; return nullptr ; } if ( root -> lc -> siz > k -1 ) return get_kth ( root -> lc , k ); if ( root -> lc -> siz + root -> cnt <= k -1 ) return get_kth ( root -> rc , k - root -> lc -> siz - root -> cnt ); return root ; }","title":"\u6c42\u6392\u540d\u4e3a k \u7684\u5143\u7d20"},{"location":"ds/bcj/","text":"\u5e76\u67e5\u96c6 \u00b6 \u666e\u901a\u5e76\u67e5\u96c6 \u00b6 1 2 3 4 5 int get_father ( int x ){ if ( father [ x ] == x ) return x ; else return get_father ( father [ x ]); } // return father[x]==x ? x : get_father(father[x]); 1 2 3 4 5 6 7 void merge ( int x , int y ){ int fx = get_father ( x ); int fy = get_father ( y ); if ( fx == fy ) return ; father [ fx ] = fy ; return ; } \u8def\u5f84\u538b\u7f29 \u00b6 1 2 3 4 5 6 7 8 int get_father ( int x ){ if ( father [ x ] == x ) return x ; else { father [ x ] = get_father ( father [ x ]); // \u8def\u5f84\u538b\u7f29 return father [ x ]; } // return father[x]==x ? x : father[x]=get_father(father[x]); } \u542f\u53d1\u5f0f\u5408\u5e76 \u00b6 \u4ee5\u70b9\u6570\u4e3a\u4f30\u4ef7\u51fd\u6570 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int heu_merge ( int x , int y ){ int fx = get_father ( x ); int fy = get_father ( y ); if ( fx == fy ) return ; if ( size [ x ] < size [ y ]){ father [ fx ] = fy ; // \u70b9\u6570\u5c0f\u7684\u5408\u5e76\u5230\u70b9\u6570\u5927\u7684\u4e0a size [ y ] += size [ x ]; // \u66f4\u65b0\u70b9\u6570 } else { father [ fy ] = fx ; size [ y ] += size [ x ]; } return ; } \u4ee5\u6df1\u5ea6\u4e3a\u4f30\u4ef7\u51fd\u6570 \u00b6 1 2 3 4 5 6 7 8 9 10 11 int heu_merge ( int x , int y ){ int fx = get_father ( x ); int fy = get_father ( y ); if ( fx == fy ) return ; if ( h [ x ] > h [ y ]) father [ fy ] = fx ; else { father [ fx ] = fy ; h [ y ] ++ ; } return ; } \u6269\u5c55\u57df\u5e76\u67e5\u96c6 \u00b6 \u5e26\u6743\u5e76\u67e5\u96c6 \u00b6 \u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6 \u00b6","title":"\u5e76\u67e5\u96c6"},{"location":"ds/bcj/#_1","text":"","title":"\u5e76\u67e5\u96c6"},{"location":"ds/bcj/#_2","text":"1 2 3 4 5 int get_father ( int x ){ if ( father [ x ] == x ) return x ; else return get_father ( father [ x ]); } // return father[x]==x ? x : get_father(father[x]); 1 2 3 4 5 6 7 void merge ( int x , int y ){ int fx = get_father ( x ); int fy = get_father ( y ); if ( fx == fy ) return ; father [ fx ] = fy ; return ; }","title":"\u666e\u901a\u5e76\u67e5\u96c6"},{"location":"ds/bcj/#_3","text":"1 2 3 4 5 6 7 8 int get_father ( int x ){ if ( father [ x ] == x ) return x ; else { father [ x ] = get_father ( father [ x ]); // \u8def\u5f84\u538b\u7f29 return father [ x ]; } // return father[x]==x ? x : father[x]=get_father(father[x]); }","title":"\u8def\u5f84\u538b\u7f29"},{"location":"ds/bcj/#_4","text":"","title":"\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"ds/bcj/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 int heu_merge ( int x , int y ){ int fx = get_father ( x ); int fy = get_father ( y ); if ( fx == fy ) return ; if ( size [ x ] < size [ y ]){ father [ fx ] = fy ; // \u70b9\u6570\u5c0f\u7684\u5408\u5e76\u5230\u70b9\u6570\u5927\u7684\u4e0a size [ y ] += size [ x ]; // \u66f4\u65b0\u70b9\u6570 } else { father [ fy ] = fx ; size [ y ] += size [ x ]; } return ; }","title":"\u4ee5\u70b9\u6570\u4e3a\u4f30\u4ef7\u51fd\u6570"},{"location":"ds/bcj/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 int heu_merge ( int x , int y ){ int fx = get_father ( x ); int fy = get_father ( y ); if ( fx == fy ) return ; if ( h [ x ] > h [ y ]) father [ fy ] = fx ; else { father [ fx ] = fy ; h [ y ] ++ ; } return ; }","title":"\u4ee5\u6df1\u5ea6\u4e3a\u4f30\u4ef7\u51fd\u6570"},{"location":"ds/bcj/#_7","text":"","title":"\u6269\u5c55\u57df\u5e76\u67e5\u96c6"},{"location":"ds/bcj/#_8","text":"","title":"\u5e26\u6743\u5e76\u67e5\u96c6"},{"location":"ds/bcj/#_9","text":"","title":"\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6"},{"location":"ds/fhq/","text":"fhq_treap \u00b6 fhq_treap \u662f\u7531\u8303\u6d69\u5f3a\u5927\u4f6c orz \u53d1\u660e\u7684\u4e00\u79cd \u57fa\u4e8e split-merge \u7684 \u65e0\u65cb treap \uff0c\u4e0d\u4ec5\u597d\u7406\u89e3\uff0c\u597d\u5199\uff0c\u4e0d\u7528\u8f6c\u6765\u8f6c\u53bb\uff0c\u5e38\u6570\u6bd4 Splay \u5c0f\u4e0d\u5c11\uff0c\u652f\u6301\u533a\u95f4\u64cd\u4f5c\uff0c\u8fd8\u80fd \u6301\u4e45\u5316 \uff08\u5e9f\u8bdd\uff0c\u4eba\u5bb6\u90fd\u53eb\u51fd\u6570\u5f0f treap \u4e86\uff09\uff0c\u6211\u613f\u79f0\u4e4b\u4e3a\u6700\u5f3a\u5e73\u8861\u6811 orz again fhq_treap \u7684\u6838\u5fc3\u5c31\u5728\u4e8e split-merge \u64cd\u4f5c\uff0c\u5176\u4ed6\u64cd\u4f5c\u90fd\u57fa\u4e8e split-merge node \u5b9a\u4e49 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct node { int val ; int cnt ; int rnd ; int siz ; node * lc ; node * rc ; node ( int _val = 0 ){ srand (( int ) time ( 0 )); val = _val ; cnt = siz = 1 ; rnd = rand () % 10000 ; lc = rc = nullptr ; } node * update_siz (){ siz = cnt ; if ( lc != nullptr ) siz += lc -> siz ; if ( rc != nullptr ) siz += rc -> siz ; return this ; } }; Split \u00b6 split \u64cd\u4f5c\u5c31\u662f\u628a\u4e00\u68f5 treap \u5212\u5206\u6210\u4e24\u68f5 treap\uff0c\u6709 \u6309\u70b9\u6743\u5212\u5206 \uff0c\u548c \u6309\u5b50\u6811\u5927\u5c0f\u5212\u5206 \u4e24\u79cd\u65b9\u5f0f \u6309\u70b9\u6743\u5212\u5206 \u00b6 \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void split ( node * root , node *& a , node *& b , int pivot ){ if ( root == nullptr ){ a = b = nullptr ; // \u7f6e\u7a7a\u591a\u51fa\u6765\u7684\u90e8\u5206 return ; } if ( root -> val <= pivot ){ a = root ; // \u867d\u7136\u5168\u90e8\u62f7\u8d1d\u4e86\uff0c\u4f46\u53f3\u5b50\u6811\u9a6c\u4e0a\u5c31\u8981\u88ab\u8986\u76d6\u6389\uff0c\u7ec8\u6b62\u65f6\u4e5f\u4f1a\u7f6e\u7a7a split ( root -> rc , a -> rc , b , pivot ); } if ( root -> val > pivot ){ b = root ; split ( root -> lc , a , b -> lc , pivot ); } root -> update_siz (); // \u9012\u5f52\u66f4\u65b0 siz } \u6309\u5b50\u6811\u5927\u5c0f\u5212\u5206 \u00b6 1 Merge \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 node *& merge ( node *& a , node *& b ){ // \u6ce8\u610f\u5408\u5e76\u662f\u6309 rnd \u5408\u5e76\uff0c\u7ef4\u62a4 treap \u5c0f\u6839\u6027\u8d28 if ( a == nullptr ) return b ; if ( b == nullptr ) return a ; // \u4efb\u4e00 treap \u4e3a\u7a7a\uff0c\u5408\u5e76\u540e\u4e00\u5b9a\u662f\u53e6\u4e00\u9897 treap if ( a -> rnd <= b -> rnd ){ a -> rc = merge ( a -> rc , b ); // \u628a merge(a->rc,b) \u770b\u6210 a->rc \u548c b \u5408\u5e76\u540e\u7684 treap \u6bd4\u8f83\u597d\u7406\u89e3 a -> update_siz (); return a ; } else { b -> lc = merge ( a , b -> lc ); b -> update_siz (); return b ; } } \u627e\u7b2c k \u5927 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 // kth() \u662f\u627e\u5230\u6392\u540d\u4e3a k \u7684\u5143\u7d20 // \u6392\u540d\u662f \u6240\u6709\u6bd4\u4ed6\u5c0f\u7684\u5143\u7d20\u7684\u4e2a\u6570 +1 // \u4e0d\u8981\u6309\u5b9a\u4e49\u60f3\uff0c\u753b\u4e2a\u7b80\u5355\u7684\u6811\u8bd5\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u4e0d\u5bb9\u6613\u5199\u9519\u7b49\u4e8e\u53f7 node * kth ( node * root , int _k ){ assert ( root != nullptr ); // \u65ad\u8a00 int lc_siz = ( root -> lc == nullptr ? 0 : root -> lc -> siz ); // \u53d6\u5f97\u5de6\u5b50\u6811\u5927\u5c0f\uff0c\u8bb0\u5f97\u8981\u5224\u7a7a\uff0c\u7a7a\u6811 siz=0 if ( lc_siz >= _k ) return kth ( root -> lc , _k ); // \u8981\u627e\u7684\u5728\u5de6\u5b50\u6811\u91cc\uff0c\u7528\u539f\u6392\u540d\u5728\u5de6\u5b50\u6811\u91cc\u7ee7\u7eed\u627e if ( lc_siz + root -> cnt < _k ) return kth ( root -> rc , _k - lc_siz - root -> cnt ); // \u8981\u627e\u7684\u5728\u53f3\u5b50\u6811\u91cc\uff0c\u6839\u8282\u70b9\u548c\u5de6\u5b50\u6811\u91cc\u6240\u6709\u7ed3\u70b9\u90fd\u6bd4\u8981\u627e\u7684\u5c0f\uff0c\u641c\u7d22\u53f3\u5b50\u6811\u65f6\u6392\u540d\u8bb0\u5f97\u51cf\u6389 return root ; // \u5426\u5219\u8981\u627e\u7684\u5c31\u662f\u5f53\u524d\u7684\u6839\u8282\u70b9 } \u63d2\u5165 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 node * insert ( node *& root , int _val ){ node * a = nullptr ; node * b = nullptr ; node * n = nullptr ; split ( root , a , b , _val ); if ( a != nullptr && ( n = kth ( a , a -> siz )) -> val == _val ){ // kth(a,a->siz) \u627e\u5230 a treap \u4e2d val \u6700\u5927\u7684\u7ed3\u70b9 n // \u5982\u679c n->val==_val \u8bf4\u660e\u5df2\u7ecf\u5b58\u5728\u503c\u4e3a _val \u7684\u7ed3\u70b9\u4e86 n -> cnt ++ ; n -> siz ++ ; // n \u5c31\u4e00\u4e2a\u72ec\u7acb\u7684\u7ed3\u70b9\uff0c\u4e0d\u7528 update_siz()\uff0c\u800c\u662f\u76f4\u63a5++ root = merge ( a , b ); return root ; } else { n = new node ( _val ); root = merge ( merge ( a , n ), b ); return root ; } } \u6c42\u6392\u540d \u00b6 1 2 3 4 5 6 7 8 9 10 // \u8fd9\u91cc\u4ec5\u7ed9\u51fa\u57fa\u4e8e split-merge \u7684\u65b9\u6cd5\uff0c\u57fa\u4e8e siz \u7684\u65b9\u6cd5\u4e5f\u53ef\u7528 int rnk ( node * root , int _val ){ node * a = nullptr ; node * b = nullptr ; split ( root , a , b , _val -1 ); // \u6ce8\u610f\u662f val-1 \u624d\u80fd\u4fdd\u8bc1\u5f97\u5230\u7684 a treap \u90fd\u5c0f\u4e8e _val int tmp = ( a == nullptr ? 1 : a -> siz + 1 ); root = merge ( a , b ); return tmp ; }","title":"fhq_treap"},{"location":"ds/fhq/#fhq_treap","text":"fhq_treap \u662f\u7531\u8303\u6d69\u5f3a\u5927\u4f6c orz \u53d1\u660e\u7684\u4e00\u79cd \u57fa\u4e8e split-merge \u7684 \u65e0\u65cb treap \uff0c\u4e0d\u4ec5\u597d\u7406\u89e3\uff0c\u597d\u5199\uff0c\u4e0d\u7528\u8f6c\u6765\u8f6c\u53bb\uff0c\u5e38\u6570\u6bd4 Splay \u5c0f\u4e0d\u5c11\uff0c\u652f\u6301\u533a\u95f4\u64cd\u4f5c\uff0c\u8fd8\u80fd \u6301\u4e45\u5316 \uff08\u5e9f\u8bdd\uff0c\u4eba\u5bb6\u90fd\u53eb\u51fd\u6570\u5f0f treap \u4e86\uff09\uff0c\u6211\u613f\u79f0\u4e4b\u4e3a\u6700\u5f3a\u5e73\u8861\u6811 orz again fhq_treap \u7684\u6838\u5fc3\u5c31\u5728\u4e8e split-merge \u64cd\u4f5c\uff0c\u5176\u4ed6\u64cd\u4f5c\u90fd\u57fa\u4e8e split-merge","title":"fhq_treap"},{"location":"ds/fhq/#node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 struct node { int val ; int cnt ; int rnd ; int siz ; node * lc ; node * rc ; node ( int _val = 0 ){ srand (( int ) time ( 0 )); val = _val ; cnt = siz = 1 ; rnd = rand () % 10000 ; lc = rc = nullptr ; } node * update_siz (){ siz = cnt ; if ( lc != nullptr ) siz += lc -> siz ; if ( rc != nullptr ) siz += rc -> siz ; return this ; } };","title":"node \u5b9a\u4e49"},{"location":"ds/fhq/#split","text":"split \u64cd\u4f5c\u5c31\u662f\u628a\u4e00\u68f5 treap \u5212\u5206\u6210\u4e24\u68f5 treap\uff0c\u6709 \u6309\u70b9\u6743\u5212\u5206 \uff0c\u548c \u6309\u5b50\u6811\u5927\u5c0f\u5212\u5206 \u4e24\u79cd\u65b9\u5f0f","title":"Split"},{"location":"ds/fhq/#_1","text":"\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void split ( node * root , node *& a , node *& b , int pivot ){ if ( root == nullptr ){ a = b = nullptr ; // \u7f6e\u7a7a\u591a\u51fa\u6765\u7684\u90e8\u5206 return ; } if ( root -> val <= pivot ){ a = root ; // \u867d\u7136\u5168\u90e8\u62f7\u8d1d\u4e86\uff0c\u4f46\u53f3\u5b50\u6811\u9a6c\u4e0a\u5c31\u8981\u88ab\u8986\u76d6\u6389\uff0c\u7ec8\u6b62\u65f6\u4e5f\u4f1a\u7f6e\u7a7a split ( root -> rc , a -> rc , b , pivot ); } if ( root -> val > pivot ){ b = root ; split ( root -> lc , a , b -> lc , pivot ); } root -> update_siz (); // \u9012\u5f52\u66f4\u65b0 siz }","title":"\u6309\u70b9\u6743\u5212\u5206"},{"location":"ds/fhq/#_2","text":"1","title":"\u6309\u5b50\u6811\u5927\u5c0f\u5212\u5206"},{"location":"ds/fhq/#merge","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 node *& merge ( node *& a , node *& b ){ // \u6ce8\u610f\u5408\u5e76\u662f\u6309 rnd \u5408\u5e76\uff0c\u7ef4\u62a4 treap \u5c0f\u6839\u6027\u8d28 if ( a == nullptr ) return b ; if ( b == nullptr ) return a ; // \u4efb\u4e00 treap \u4e3a\u7a7a\uff0c\u5408\u5e76\u540e\u4e00\u5b9a\u662f\u53e6\u4e00\u9897 treap if ( a -> rnd <= b -> rnd ){ a -> rc = merge ( a -> rc , b ); // \u628a merge(a->rc,b) \u770b\u6210 a->rc \u548c b \u5408\u5e76\u540e\u7684 treap \u6bd4\u8f83\u597d\u7406\u89e3 a -> update_siz (); return a ; } else { b -> lc = merge ( a , b -> lc ); b -> update_siz (); return b ; } }","title":"Merge"},{"location":"ds/fhq/#k","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // kth() \u662f\u627e\u5230\u6392\u540d\u4e3a k \u7684\u5143\u7d20 // \u6392\u540d\u662f \u6240\u6709\u6bd4\u4ed6\u5c0f\u7684\u5143\u7d20\u7684\u4e2a\u6570 +1 // \u4e0d\u8981\u6309\u5b9a\u4e49\u60f3\uff0c\u753b\u4e2a\u7b80\u5355\u7684\u6811\u8bd5\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u4e0d\u5bb9\u6613\u5199\u9519\u7b49\u4e8e\u53f7 node * kth ( node * root , int _k ){ assert ( root != nullptr ); // \u65ad\u8a00 int lc_siz = ( root -> lc == nullptr ? 0 : root -> lc -> siz ); // \u53d6\u5f97\u5de6\u5b50\u6811\u5927\u5c0f\uff0c\u8bb0\u5f97\u8981\u5224\u7a7a\uff0c\u7a7a\u6811 siz=0 if ( lc_siz >= _k ) return kth ( root -> lc , _k ); // \u8981\u627e\u7684\u5728\u5de6\u5b50\u6811\u91cc\uff0c\u7528\u539f\u6392\u540d\u5728\u5de6\u5b50\u6811\u91cc\u7ee7\u7eed\u627e if ( lc_siz + root -> cnt < _k ) return kth ( root -> rc , _k - lc_siz - root -> cnt ); // \u8981\u627e\u7684\u5728\u53f3\u5b50\u6811\u91cc\uff0c\u6839\u8282\u70b9\u548c\u5de6\u5b50\u6811\u91cc\u6240\u6709\u7ed3\u70b9\u90fd\u6bd4\u8981\u627e\u7684\u5c0f\uff0c\u641c\u7d22\u53f3\u5b50\u6811\u65f6\u6392\u540d\u8bb0\u5f97\u51cf\u6389 return root ; // \u5426\u5219\u8981\u627e\u7684\u5c31\u662f\u5f53\u524d\u7684\u6839\u8282\u70b9 }","title":"\u627e\u7b2c k \u5927"},{"location":"ds/fhq/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 node * insert ( node *& root , int _val ){ node * a = nullptr ; node * b = nullptr ; node * n = nullptr ; split ( root , a , b , _val ); if ( a != nullptr && ( n = kth ( a , a -> siz )) -> val == _val ){ // kth(a,a->siz) \u627e\u5230 a treap \u4e2d val \u6700\u5927\u7684\u7ed3\u70b9 n // \u5982\u679c n->val==_val \u8bf4\u660e\u5df2\u7ecf\u5b58\u5728\u503c\u4e3a _val \u7684\u7ed3\u70b9\u4e86 n -> cnt ++ ; n -> siz ++ ; // n \u5c31\u4e00\u4e2a\u72ec\u7acb\u7684\u7ed3\u70b9\uff0c\u4e0d\u7528 update_siz()\uff0c\u800c\u662f\u76f4\u63a5++ root = merge ( a , b ); return root ; } else { n = new node ( _val ); root = merge ( merge ( a , n ), b ); return root ; } }","title":"\u63d2\u5165"},{"location":"ds/fhq/#_4","text":"1 2 3 4 5 6 7 8 9 10 // \u8fd9\u91cc\u4ec5\u7ed9\u51fa\u57fa\u4e8e split-merge \u7684\u65b9\u6cd5\uff0c\u57fa\u4e8e siz \u7684\u65b9\u6cd5\u4e5f\u53ef\u7528 int rnk ( node * root , int _val ){ node * a = nullptr ; node * b = nullptr ; split ( root , a , b , _val -1 ); // \u6ce8\u610f\u662f val-1 \u624d\u80fd\u4fdd\u8bc1\u5f97\u5230\u7684 a treap \u90fd\u5c0f\u4e8e _val int tmp = ( a == nullptr ? 1 : a -> siz + 1 ); root = merge ( a , b ); return tmp ; }","title":"\u6c42\u6392\u540d"},{"location":"ds/hash/","text":"\u54c8\u5e0c\u8868 \u00b6 \u54c8\u5e0c\u51fd\u6570 \u00b6 \u51b2\u7a81 \u00b6 \u88c5\u586b\u56e0\u5b50\uff1a \\(\\alpha=\\) \u5143\u7d20\u4e2a\u6570 \u00f7 \u54c8\u5e0c\u8868\u957f\u5ea6 \u5f00\u6563\u5217\u6cd5 \u00b6 \u5f00\u6563\u5217\u6cd5\u5728\u6bcf\u4e2a\u5b58\u653e\u6570\u636e\u7684\u5730\u65b9\u5f00\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u5982\u679c\u6709\u591a\u4e2a key \u7d22\u5f15\u5230\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u5c31\u628a\u4ed6\u4eec\u90fd\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u7684\u7f13\u51b2\u533a\u91cc \u67e5\u8be2\u7684\u65f6\u5019\u904d\u5386\u7f13\u51b2\u533a\u4e2d\u5143\u7d20\uff0c\u6bd4\u5bf9 key \u503c\u627e\u5230\u9700\u8981\u7684\u5143\u7d20 \u7f13\u51b2\u533a\u53ef\u7528\u9759\u6001\u94fe\u8868\uff0c\u666e\u901a\u94fe\u8868\uff0c\u7ea2\u9ed1\u6811\u7b49\u6570\u636e\u7ed3\u6784\u5b9e\u73b0 \u5f00\u6563\u5217\u6cd5\u88c5\u586b\u56e0\u5b50\u4e00\u822c\u5927\u4e8e 1 \u6876\u5f0f\u6563\u5217\uff08\u9759\u6001\u94fe\u8868\u5b9e\u73b0\uff09 \u00b6 \u7c7b\u4f3c \u94fe\u5f0f\u524d\u5411\u661f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #define SIZE 1000 #define M 256 struct hash_map { int head [ M ], key [ SIZE ], val [ SIZE ], next [ SIZE ], tot = 0 ; // 0 <= (key % M) < M \uff0chead \u8303\u56f4 [0,M-1] hash_map (){ // \u6784\u9020\u51fd\u6570 memset ( next , -1 , SIZE ); // -1 \u6a21\u62df\u7a7a\u6307\u9488 memset ( head , -1 , M ); } int hash ( int _key ){ return key % M ; // hash \u51fd\u6570 // return _key & (M-1); } int & operator []( int _key ){ // \u91cd\u8f7d [] for ( int i = head [ hash ( _key )]; ~ i ; i = next [ i ]){ if ( key [ i ] == _key ) return val [ i ]; } return -1 ; } void add ( int _key , int _val ){ // \u5934\u63d2\u6cd5 int h = hash ( _key ); key [ tot ] = _key ; // \u5b58\u7684\u662f\u539f\u59cb key \u503c val [ tot ] = _val ; next [ tot ] = head [ h ]; head [ h ] = tot ++ ; return ; } }; Note \u5f53\u54c8\u5e0c\u51fd\u6570\u4e3a key % M \u65f6\uff0c\u94fe\u8868\u7684\u6570\u91cf M \u6700\u597d\u4e3a 2 \u7684\u5e42 \uff0c\u56e0\u4e3a\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u4f4d\u8fd0\u7b97 key & (M-1) \u4ee3\u66ff key % M \u6302\u94fe\u8868 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #define SIZE 1000 #define M 256 struct hash_map { struct node { int key , val ; node * next ; node (){ next = nullptr ; } }; node * head [ M ]; int & operator []( int _key ){ for ( node * i = head [ hash ( _key )]; i != nullptr ; i = i -> next ){ if ( i -> key == _key ) return i -> val ; } return -1 ; } void add ( int _key , int _val ){ int h = hash ( _key ); node * temp = new node (); temp -> key = _key ; temp -> val = _val ; temp -> next = head [ h ]; head [ h ] = temp ; } }; Note \u6302\u94fe\u8868\uff0c\u63d2\u5165\u5feb\uff0c\u67e5\u8be2\u6162 \u6302\u7ea2\u9ed1\u6811 \u00b6 Note \u6302\u7ea2\u9ed1\u6811\uff0c\u67e5\u8be2\u5feb\uff0c\u63d2\u5165\u6162 \u95ed\u6563\u5217\u6cd5\uff08\u5f00\u5730\u5740\u65b9\u6cd5\uff09 \u00b6 \u7ebf\u6027\u63a2\u6d4b\u6cd5 \u00b6 \u6709\u51b2\u7a81\u5c31\u5f80\u540e\u627e\u7a7a\u5730\u65b9\u5b58\uff0c\u5feb\u6ee1\u4e86\u5c31\u6269\u5bb9 \u4e8c\u6b21\u63a2\u6d4b\u6cd5 \u00b6 \u518d\u54c8\u5e0c\u6cd5 \u00b6","title":"\u54c8\u5e0c\u8868"},{"location":"ds/hash/#_1","text":"","title":"\u54c8\u5e0c\u8868"},{"location":"ds/hash/#_2","text":"","title":"\u54c8\u5e0c\u51fd\u6570"},{"location":"ds/hash/#_3","text":"\u88c5\u586b\u56e0\u5b50\uff1a \\(\\alpha=\\) \u5143\u7d20\u4e2a\u6570 \u00f7 \u54c8\u5e0c\u8868\u957f\u5ea6","title":"\u51b2\u7a81"},{"location":"ds/hash/#_4","text":"\u5f00\u6563\u5217\u6cd5\u5728\u6bcf\u4e2a\u5b58\u653e\u6570\u636e\u7684\u5730\u65b9\u5f00\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u5982\u679c\u6709\u591a\u4e2a key \u7d22\u5f15\u5230\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u5c31\u628a\u4ed6\u4eec\u90fd\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u7684\u7f13\u51b2\u533a\u91cc \u67e5\u8be2\u7684\u65f6\u5019\u904d\u5386\u7f13\u51b2\u533a\u4e2d\u5143\u7d20\uff0c\u6bd4\u5bf9 key \u503c\u627e\u5230\u9700\u8981\u7684\u5143\u7d20 \u7f13\u51b2\u533a\u53ef\u7528\u9759\u6001\u94fe\u8868\uff0c\u666e\u901a\u94fe\u8868\uff0c\u7ea2\u9ed1\u6811\u7b49\u6570\u636e\u7ed3\u6784\u5b9e\u73b0 \u5f00\u6563\u5217\u6cd5\u88c5\u586b\u56e0\u5b50\u4e00\u822c\u5927\u4e8e 1","title":"\u5f00\u6563\u5217\u6cd5"},{"location":"ds/hash/#_5","text":"\u7c7b\u4f3c \u94fe\u5f0f\u524d\u5411\u661f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #define SIZE 1000 #define M 256 struct hash_map { int head [ M ], key [ SIZE ], val [ SIZE ], next [ SIZE ], tot = 0 ; // 0 <= (key % M) < M \uff0chead \u8303\u56f4 [0,M-1] hash_map (){ // \u6784\u9020\u51fd\u6570 memset ( next , -1 , SIZE ); // -1 \u6a21\u62df\u7a7a\u6307\u9488 memset ( head , -1 , M ); } int hash ( int _key ){ return key % M ; // hash \u51fd\u6570 // return _key & (M-1); } int & operator []( int _key ){ // \u91cd\u8f7d [] for ( int i = head [ hash ( _key )]; ~ i ; i = next [ i ]){ if ( key [ i ] == _key ) return val [ i ]; } return -1 ; } void add ( int _key , int _val ){ // \u5934\u63d2\u6cd5 int h = hash ( _key ); key [ tot ] = _key ; // \u5b58\u7684\u662f\u539f\u59cb key \u503c val [ tot ] = _val ; next [ tot ] = head [ h ]; head [ h ] = tot ++ ; return ; } }; Note \u5f53\u54c8\u5e0c\u51fd\u6570\u4e3a key % M \u65f6\uff0c\u94fe\u8868\u7684\u6570\u91cf M \u6700\u597d\u4e3a 2 \u7684\u5e42 \uff0c\u56e0\u4e3a\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u4f4d\u8fd0\u7b97 key & (M-1) \u4ee3\u66ff key % M","title":"\u6876\u5f0f\u6563\u5217\uff08\u9759\u6001\u94fe\u8868\u5b9e\u73b0\uff09"},{"location":"ds/hash/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #define SIZE 1000 #define M 256 struct hash_map { struct node { int key , val ; node * next ; node (){ next = nullptr ; } }; node * head [ M ]; int & operator []( int _key ){ for ( node * i = head [ hash ( _key )]; i != nullptr ; i = i -> next ){ if ( i -> key == _key ) return i -> val ; } return -1 ; } void add ( int _key , int _val ){ int h = hash ( _key ); node * temp = new node (); temp -> key = _key ; temp -> val = _val ; temp -> next = head [ h ]; head [ h ] = temp ; } }; Note \u6302\u94fe\u8868\uff0c\u63d2\u5165\u5feb\uff0c\u67e5\u8be2\u6162","title":"\u6302\u94fe\u8868"},{"location":"ds/hash/#_7","text":"Note \u6302\u7ea2\u9ed1\u6811\uff0c\u67e5\u8be2\u5feb\uff0c\u63d2\u5165\u6162","title":"\u6302\u7ea2\u9ed1\u6811"},{"location":"ds/hash/#_8","text":"","title":"\u95ed\u6563\u5217\u6cd5\uff08\u5f00\u5730\u5740\u65b9\u6cd5\uff09"},{"location":"ds/hash/#_9","text":"\u6709\u51b2\u7a81\u5c31\u5f80\u540e\u627e\u7a7a\u5730\u65b9\u5b58\uff0c\u5feb\u6ee1\u4e86\u5c31\u6269\u5bb9","title":"\u7ebf\u6027\u63a2\u6d4b\u6cd5"},{"location":"ds/hash/#_10","text":"","title":"\u4e8c\u6b21\u63a2\u6d4b\u6cd5"},{"location":"ds/hash/#_11","text":"","title":"\u518d\u54c8\u5e0c\u6cd5"},{"location":"ds/list/","text":"\u94fe\u8868 \u00b6 \u53cc\u5411\u5faa\u73af\u94fe\u8868 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 typedef int item ; class list { private : struct node { item data ; node * from ; node * to ; }; node * head = new node ; public : list (){ head -> to = head ; head -> from = head ; } ~ list (){ for ( node * i = head -> to ; i != head ; i = i -> to ) delete i ; delete head ; } void prepend ( item ); void append ( item ); void del ( item ); void edit ( item , item ); void print (); node * search ( item ); }; void list :: prepend ( item x ){ node * temp = new node ; temp -> data = x ; temp -> to = head -> to ; head -> to -> from = temp ; head -> to = temp ; temp -> from = head ; return ; } void list :: append ( item x ){ node * temp = new node ; temp -> data = x ; temp -> from = head -> from ; temp -> to = head ; head -> from -> to = temp ; head -> from = temp ; } void list :: del ( item val ){ for ( node * i = head -> to ; i != head ; i = i -> to ){ if ( i -> data == val ){ i -> from -> to = i -> to ; i -> to -> from = i -> from ; } } return ; } void list :: edit ( item val , item a ){ for ( node * i = head -> to ; i != head ; i = i -> to ){ if ( i -> data == val ){ i -> data = a ; } } return ; } void list :: print (){ for ( node * i = head -> to ; i != head ; i = i -> to ){ std :: cout << i -> data << ' ' ; } return ; } list :: node * list :: search ( item val ){ for ( node * i = head -> to ; i != head ; i = i -> to ){ if ( i -> data == val ) return i ; } return nullptr ; }","title":"\u94fe\u8868"},{"location":"ds/list/#_1","text":"","title":"\u94fe\u8868"},{"location":"ds/list/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 typedef int item ; class list { private : struct node { item data ; node * from ; node * to ; }; node * head = new node ; public : list (){ head -> to = head ; head -> from = head ; } ~ list (){ for ( node * i = head -> to ; i != head ; i = i -> to ) delete i ; delete head ; } void prepend ( item ); void append ( item ); void del ( item ); void edit ( item , item ); void print (); node * search ( item ); }; void list :: prepend ( item x ){ node * temp = new node ; temp -> data = x ; temp -> to = head -> to ; head -> to -> from = temp ; head -> to = temp ; temp -> from = head ; return ; } void list :: append ( item x ){ node * temp = new node ; temp -> data = x ; temp -> from = head -> from ; temp -> to = head ; head -> from -> to = temp ; head -> from = temp ; } void list :: del ( item val ){ for ( node * i = head -> to ; i != head ; i = i -> to ){ if ( i -> data == val ){ i -> from -> to = i -> to ; i -> to -> from = i -> from ; } } return ; } void list :: edit ( item val , item a ){ for ( node * i = head -> to ; i != head ; i = i -> to ){ if ( i -> data == val ){ i -> data = a ; } } return ; } void list :: print (){ for ( node * i = head -> to ; i != head ; i = i -> to ){ std :: cout << i -> data << ' ' ; } return ; } list :: node * list :: search ( item val ){ for ( node * i = head -> to ; i != head ; i = i -> to ){ if ( i -> data == val ) return i ; } return nullptr ; }","title":"\u53cc\u5411\u5faa\u73af\u94fe\u8868"},{"location":"ds/rotate/","text":"\u6811\u65cb\u8f6c \u00b6 \u6811\u65cb\u8f6c\u662f\u5bf9 \u4e8c\u53c9\u641c\u7d22\u6811 \u7684\u4e00\u79cd\u91cd\u6784\u64cd\u4f5c\uff0c\u4e0d\u6539\u53d8\u6811\u7684\u6027\u8d28\uff08 \u5404\u7ed3\u70b9\u503c\u7684\u5927\u5c0f\u5173\u7cfb\u4e0d\u53d8\uff0c\u5373 \u4e2d\u5e8f\u4e0d\u53d8 \uff09\uff0c\u4f46\u4f1a\u6539\u53d8\u6811\u7684\u5f62\u72b6 \u5728 a \u56fe\u4e2d\uff0c\u7531\u6811\u7684\u6027\u8d28\u5bb9\u6613\u5f97\u5230 \\(v<f<fr<g\\) \u5982\u679c\u8981\u5c06\u6811\u91cd\u6784\u6210\u4e00\u9897\u4ee5 \\(f\\) \u4e3a\u6839\u7684\u6811\uff0c\u7531\u4e0a\u9762\u7684\u4e0d\u7b49\u5f0f\u5bb9\u6613\u77e5\u9053\uff0c\u6bd4 \\(f\\) \u5c0f\u7684 \\(v\\) \u5e94\u8be5\u5728 \\(f\\) \u7684\u5de6\u5b50\u6811\uff0c\u6bd4 \\(f\\) \u5927\u7684 \\(fr\\) \u548c \\(g\\) \u5e94\u8be5\u5728 \\(f\\) \u7684\u53f3\u5b50\u6811\uff0c\u53c8 \\(fr<g\\) \uff0c\u6240\u4ee5 \\(fr\\) \u5e94\u8be5\u4f5c\u4e3a \\(g\\) \u7684\u5de6\u5b69\u5b50 \u91cd\u6784\u540e\u7684\u6811\u5982\u56fe b \u6240\u793a\uff0c\u8fd9\u4e00\u91cd\u6784\u64cd\u4f5c\u5373\u4e3a \u6811\u53f3\u65cb \u6211\u4eec\u7ea6\u5b9a \\(g\\) \u4e3a\u65cb\u8f6c\u7684 \u6839 \uff0c\u5219\u4e0a\u9762\u7684\u64cd\u4f5c\u5c31\u662f \u5bf9\u6839 \\(g\\) \u53f3\u65cb \u7c7b\u4f3c\u53ef\u4ee5\u5f97\u5230 \u6811\u5de6\u65cb \uff08\u5982\u56fe c\u3001d \u6240\u793a\uff09 \u4e0b\u9762\u662f Wikipedia \u5bf9\u6811\u65cb\u8f6c\u7684\u52a8\u56fe\u6f14\u793a\uff1a","title":"\u6811\u65cb\u8f6c"},{"location":"ds/rotate/#_1","text":"\u6811\u65cb\u8f6c\u662f\u5bf9 \u4e8c\u53c9\u641c\u7d22\u6811 \u7684\u4e00\u79cd\u91cd\u6784\u64cd\u4f5c\uff0c\u4e0d\u6539\u53d8\u6811\u7684\u6027\u8d28\uff08 \u5404\u7ed3\u70b9\u503c\u7684\u5927\u5c0f\u5173\u7cfb\u4e0d\u53d8\uff0c\u5373 \u4e2d\u5e8f\u4e0d\u53d8 \uff09\uff0c\u4f46\u4f1a\u6539\u53d8\u6811\u7684\u5f62\u72b6 \u5728 a \u56fe\u4e2d\uff0c\u7531\u6811\u7684\u6027\u8d28\u5bb9\u6613\u5f97\u5230 \\(v<f<fr<g\\) \u5982\u679c\u8981\u5c06\u6811\u91cd\u6784\u6210\u4e00\u9897\u4ee5 \\(f\\) \u4e3a\u6839\u7684\u6811\uff0c\u7531\u4e0a\u9762\u7684\u4e0d\u7b49\u5f0f\u5bb9\u6613\u77e5\u9053\uff0c\u6bd4 \\(f\\) \u5c0f\u7684 \\(v\\) \u5e94\u8be5\u5728 \\(f\\) \u7684\u5de6\u5b50\u6811\uff0c\u6bd4 \\(f\\) \u5927\u7684 \\(fr\\) \u548c \\(g\\) \u5e94\u8be5\u5728 \\(f\\) \u7684\u53f3\u5b50\u6811\uff0c\u53c8 \\(fr<g\\) \uff0c\u6240\u4ee5 \\(fr\\) \u5e94\u8be5\u4f5c\u4e3a \\(g\\) \u7684\u5de6\u5b69\u5b50 \u91cd\u6784\u540e\u7684\u6811\u5982\u56fe b \u6240\u793a\uff0c\u8fd9\u4e00\u91cd\u6784\u64cd\u4f5c\u5373\u4e3a \u6811\u53f3\u65cb \u6211\u4eec\u7ea6\u5b9a \\(g\\) \u4e3a\u65cb\u8f6c\u7684 \u6839 \uff0c\u5219\u4e0a\u9762\u7684\u64cd\u4f5c\u5c31\u662f \u5bf9\u6839 \\(g\\) \u53f3\u65cb \u7c7b\u4f3c\u53ef\u4ee5\u5f97\u5230 \u6811\u5de6\u65cb \uff08\u5982\u56fe c\u3001d \u6240\u793a\uff09 \u4e0b\u9762\u662f Wikipedia \u5bf9\u6811\u65cb\u8f6c\u7684\u52a8\u56fe\u6f14\u793a\uff1a","title":"\u6811\u65cb\u8f6c"},{"location":"ds/splay/","text":"Splay \u6811\uff08\u4f38\u5c55\u6811\uff09 \u00b6 \u4f38\u5c55\u6811 (Splay tree) \u662f\u4e00\u79cd \u57fa\u4e8e\u65cb\u8f6c \u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \uff0c\u5b83\u6309\u7167\u201c\u6700\u5e38\u7528\u8005\u4f18\u5148\u201d\u7b56\u7565\uff0c\u5c06\u521a\u521a\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u901a\u8fc7 \u201c\u4f38\u5c55\u201d \u64cd\u4f5c\u79fb\u52a8\u5230\u6811\u6839\uff0c\u80fd\u5728 \u5747\u644a \\(O(\\log n)\\) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u63d2\u5165\u3001\u67e5\u627e\u3001\u4fee\u6539\u548c\u5220\u9664\u64cd\u4f5c \u4f38\u5c55 \u00b6 \u5c06\u5f85\u4f38\u5c55\u8282\u70b9 \\(v\\) \u79fb\u52a8\u5230\u6811\u6839 \u6bcf\u6b21\u4f38\u5c55\u65f6\uff0c\u90fd\u4ece \\(v\\) \u4e0a\u6eaf\u4e24\u5c42 \uff08\u53cc\u5c42\u4f38\u5c55\uff09\uff0c\u8bb0\u5176\u7236\u8282\u70b9\u4e3a \\(f \\mathrm{\\ (father)}\\) \u3001\u201c\u7956\u7236\u8282\u70b9\u201d \u4e3a \\(g\\mathrm{\\ (grandfather)}\\) \uff0c\u6309 \\(v\\) \uff0c \\(f\\) \u548c \\(g\\) \u7684\u4f4d\u7f6e\u5173\u7cfb \u5c06\u4f38\u5c55\u64cd\u4f5c\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b\uff1a LL / RR \u00b6 LL \uff1a g->lc==f \u4e14 f->lc==v \uff0c\u90a3\u4e48 \\(g\\) \u53f3\u65cb\uff0c \\(f\\) \u53f3\u65cb RR \uff1a g->rc==f \u4e14 f->rc==v \uff0c\u90a3\u4e48 \\(g\\) \u5de6\u65cb\uff0c \\(f\\) \u5de6\u65cb LR / RL \u00b6 LR \uff1a g->lc==f \u4e14 f->rc==v \uff0c\u90a3\u4e48 \\(f\\) \u5de6\u65cb\uff0c \\(g\\) \u53f3\u65cb RL \uff1a g->rc==f \u4e14 f->lc==v \uff0c\u90a3\u4e48 \\(f\\) \u53f3\u65cb\uff0c \\(g\\) \u5de6\u65cb \u65e0\u7956\u7236\uff080L / 0R\uff09 \u00b6 \u5982\u679c \\(v\\) \u7684\u6df1\u5ea6\u4e3a\u5947\u6570\uff0c\u82e5\u5e72\u6b21\u53cc\u5c42\u4f38\u5c55\u540e\uff0c\u5fc5\u5c06\u51fa\u73b0 \\(f\\) \u662f\u6839\u8282\u70b9\uff0c \\(g\\) \u4e0d\u5b58\u5728\u7684\u60c5\u51b5 0L \uff1a g==nullptr \u4e14 f->lc==v \uff0c\u90a3\u4e48 \\(f\\) \u53f3\u65cb 0R \uff1a g==nullptr \u4e14 f->rc==v \uff0c\u90a3\u4e48 \\(f\\) \u5de6\u65cb \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 node * splay ( node * v ){ node * f ; node * g ; for (;;){ if ( v -> fa == nullptr ) return v ; // v \u5df2\u7ecf\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u8fd4\u56de v f = v -> fa ; if ( f -> fa == nullptr ){ if ( f -> lc = v ) return f = R_rotate ( f ); // 0L if ( f -> rc = v ) return f = L_rotate ( f ); //0R } g = f -> fa ; if ( g -> lc == f ){ if ( f -> lc == v ){ // LL g = R_rotate ( g ); f = R_rotate ( f ); } else { // LR f = L_rotate ( f ); g = R_rotate ( g ); } } else { if ( f -> rc == v ){ // RR g = L_rotate ( g ); f = L_rotate ( f ); } else { // RL f = R_rotate ( f ); g = L_rotate ( g ); } } } } \u5de6\u65cb & \u53f3\u65cb \u00b6 \u6211\u4eec\u77e5\u9053\uff0c\u4e3a\u4e86\u5224\u65ad \\(v\\) \uff0c \\(f\\) \u548c \\(g\\) \u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u4f38\u5c55\u6811\u4e2d\u5f15\u5165\u4e86 \u7236\u6307\u9488 \uff0c\u8fd9\u4f7f\u5f97\u4f38\u5c55\u6811\u7684\u5de6\u65cb\u3001\u53f3\u65cb\u64cd\u4f5c\u9ebb\u70e6\u4e0d\u5c11 \u6ce8\u610f\u5230 (b) \u4e2d \\(f\\) \u7ed3\u70b9\u5df2\u7ecf\u4e0d\u80fd\u901a\u8fc7 \\(g\\) \u7ed3\u70b9\u8bbf\u95ee\u5230\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e00\u4e2a\u6307\u5411 \\(f\\) \u7684\u8f85\u52a9\u6307\u9488\u5e2e\u52a9\u6211\u4eec\u8bbf\u95ee \\(f\\) \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 node * R_rotate ( node * g ){ node * f = g -> lc ; if ( f -> rc != nullptr ) f -> rc -> fa = g ; g -> lc = f -> rc ; f -> rc = g ; f -> fa = g -> fa ; if ( g -> fa != nullptr ){ if ( g -> fa -> lc == g ){ g -> fa -> lc = f ; } else { g -> fa -> rc = f ; } } g -> fa = f ; return f ; } node * L_rotate ( node * g ){ node * f = g -> rc ; if ( f -> lc != nullptr ) f -> lc -> fa = g ; g -> rc = f -> lc ; f -> lc = g ; f -> fa = g -> fa ; if ( g -> fa != nullptr ){ if ( g -> fa -> rc == g ){ g -> fa -> rc = f ; } else { g -> fa -> lc = f ; } } g -> fa = f ; return f ; } Note \u77e5\u4e4e\u4e0a \u67d0\u4f4d\u533f\u540d\u5927\u4f6c\u7ed9\u51fa\u7684 \u65cb\u8f6c\u64cd\u4f5c \u4e0d\u9700\u8981\u8f85\u52a9\u6307\u9488 \u7684\u5b9e\u73b0 \u539f\u6587\u94fe\u63a5 1 2 3 4 5 6 g -> parent -> left = g -> left ; // R's left is now f g -> left -> parent = g -> parent ; // f's parent is now R g -> left -> right -> parent = g ; // fr's parent is now g g -> parent = g -> left ; // g's parent is now f g -> left = g -> left -> right ; // g's left is now fr g -> parent -> right = g ; // f's right is not g \u63d2\u5165 \u00b6 \u6ce8\u610f\uff0c\u4e0d\u80fd\u9012\u5f52\u8fdb\u5165\u63d2\u5165\u70b9\u540e\u624d\u8fd4\u56de\uff0c 1 2 3 4 5 6 // Incorrect if ( root == nullptr ){ // Insert to current node // cannot mantain root->fa return ; } \u800c\u5e94\u8be5\u5728\u5176\u7236\u8282\u70b9\u5904\u5c31\u5224\u65ad\u5176\u5de6\u53f3\u5b69\u5b50\u80fd\u4e0d\u80fd\u63d2\u5165\uff0c\u80fd\u63d2\u5165\u7684\u8bdd\uff0c\u5728\u7236\u8282\u70b9\u5185\u5c31\u8fd4\u56de\uff0c\u5426\u5219\u5c06\u96be\u4ee5\u7ef4\u62a4\u7236\u6307\u9488 1 2 3 4 5 6 7 8 9 10 11 // Correct if ( root -> lc == nullptr ){ // Insert to the left child of current node root -> lc -> fa = root ; return ; } if ( root -> lc == nullptr ){ // Insert to the right child of current node root -> rc -> fa = root ; return ; } \u63d2\u5165\u64cd\u4f5c\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 node * insert ( node *& root , int _val ){ if ( root == nullptr ){ // \u63d2\u5165\u7b2c\u4e00\u4e2a\u5143\u7d20 root = new node ; root -> val = _val ; return root ; // \u5c31\u4e00\u4e2a\u5143\u7d20\u4e0d\u7528 Splay } if ( _val < root -> val ){ if ( root -> lc == nullptr ){ root -> lc = new node ; root -> lc -> val = _val ; root -> lc -> fa = root ; return splay ( root -> lc ); // \u63d2\u5165\u7684 _val \u88ab\u8f6c\u5230\u4e86\u6839\u8282\u70b9\uff0c\u8fd4\u56de\u5b83 } return insert ( root -> lc , _val ); // \u4e00\u8def\u8fd4\u56de } else if ( _val > root -> val ){ if ( root -> rc == nullptr ){ root -> rc = new node ; root -> rc -> val = _val ; root -> rc -> fa = root ; return splay ( root -> rc ); // \u63d2\u5165\u7684 _val \u88ab\u8f6c\u5230\u4e86\u6839\u8282\u70b9\uff0c\u8fd4\u56de\u5b83 } return insert ( root -> rc , _val ); // \u4e00\u8def\u8fd4\u56de } else { root -> cnt ++ ; // \u5df2\u7ecf\u5b58\u5728 return splay ( root ); // \u4e5f\u8981\u8f6c\u5230\u6839\u8282\u70b9 } }","title":"Splay \u6811"},{"location":"ds/splay/#splay","text":"\u4f38\u5c55\u6811 (Splay tree) \u662f\u4e00\u79cd \u57fa\u4e8e\u65cb\u8f6c \u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \uff0c\u5b83\u6309\u7167\u201c\u6700\u5e38\u7528\u8005\u4f18\u5148\u201d\u7b56\u7565\uff0c\u5c06\u521a\u521a\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u901a\u8fc7 \u201c\u4f38\u5c55\u201d \u64cd\u4f5c\u79fb\u52a8\u5230\u6811\u6839\uff0c\u80fd\u5728 \u5747\u644a \\(O(\\log n)\\) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u63d2\u5165\u3001\u67e5\u627e\u3001\u4fee\u6539\u548c\u5220\u9664\u64cd\u4f5c","title":"Splay \u6811\uff08\u4f38\u5c55\u6811\uff09"},{"location":"ds/splay/#_1","text":"\u5c06\u5f85\u4f38\u5c55\u8282\u70b9 \\(v\\) \u79fb\u52a8\u5230\u6811\u6839 \u6bcf\u6b21\u4f38\u5c55\u65f6\uff0c\u90fd\u4ece \\(v\\) \u4e0a\u6eaf\u4e24\u5c42 \uff08\u53cc\u5c42\u4f38\u5c55\uff09\uff0c\u8bb0\u5176\u7236\u8282\u70b9\u4e3a \\(f \\mathrm{\\ (father)}\\) \u3001\u201c\u7956\u7236\u8282\u70b9\u201d \u4e3a \\(g\\mathrm{\\ (grandfather)}\\) \uff0c\u6309 \\(v\\) \uff0c \\(f\\) \u548c \\(g\\) \u7684\u4f4d\u7f6e\u5173\u7cfb \u5c06\u4f38\u5c55\u64cd\u4f5c\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b\uff1a","title":"\u4f38\u5c55"},{"location":"ds/splay/#ll-rr","text":"LL \uff1a g->lc==f \u4e14 f->lc==v \uff0c\u90a3\u4e48 \\(g\\) \u53f3\u65cb\uff0c \\(f\\) \u53f3\u65cb RR \uff1a g->rc==f \u4e14 f->rc==v \uff0c\u90a3\u4e48 \\(g\\) \u5de6\u65cb\uff0c \\(f\\) \u5de6\u65cb","title":"LL / RR"},{"location":"ds/splay/#lr-rl","text":"LR \uff1a g->lc==f \u4e14 f->rc==v \uff0c\u90a3\u4e48 \\(f\\) \u5de6\u65cb\uff0c \\(g\\) \u53f3\u65cb RL \uff1a g->rc==f \u4e14 f->lc==v \uff0c\u90a3\u4e48 \\(f\\) \u53f3\u65cb\uff0c \\(g\\) \u5de6\u65cb","title":"LR / RL"},{"location":"ds/splay/#0l-0r","text":"\u5982\u679c \\(v\\) \u7684\u6df1\u5ea6\u4e3a\u5947\u6570\uff0c\u82e5\u5e72\u6b21\u53cc\u5c42\u4f38\u5c55\u540e\uff0c\u5fc5\u5c06\u51fa\u73b0 \\(f\\) \u662f\u6839\u8282\u70b9\uff0c \\(g\\) \u4e0d\u5b58\u5728\u7684\u60c5\u51b5 0L \uff1a g==nullptr \u4e14 f->lc==v \uff0c\u90a3\u4e48 \\(f\\) \u53f3\u65cb 0R \uff1a g==nullptr \u4e14 f->rc==v \uff0c\u90a3\u4e48 \\(f\\) \u5de6\u65cb \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 node * splay ( node * v ){ node * f ; node * g ; for (;;){ if ( v -> fa == nullptr ) return v ; // v \u5df2\u7ecf\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u8fd4\u56de v f = v -> fa ; if ( f -> fa == nullptr ){ if ( f -> lc = v ) return f = R_rotate ( f ); // 0L if ( f -> rc = v ) return f = L_rotate ( f ); //0R } g = f -> fa ; if ( g -> lc == f ){ if ( f -> lc == v ){ // LL g = R_rotate ( g ); f = R_rotate ( f ); } else { // LR f = L_rotate ( f ); g = R_rotate ( g ); } } else { if ( f -> rc == v ){ // RR g = L_rotate ( g ); f = L_rotate ( f ); } else { // RL f = R_rotate ( f ); g = L_rotate ( g ); } } } }","title":"\u65e0\u7956\u7236\uff080L / 0R\uff09"},{"location":"ds/splay/#_2","text":"\u6211\u4eec\u77e5\u9053\uff0c\u4e3a\u4e86\u5224\u65ad \\(v\\) \uff0c \\(f\\) \u548c \\(g\\) \u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c\u4f38\u5c55\u6811\u4e2d\u5f15\u5165\u4e86 \u7236\u6307\u9488 \uff0c\u8fd9\u4f7f\u5f97\u4f38\u5c55\u6811\u7684\u5de6\u65cb\u3001\u53f3\u65cb\u64cd\u4f5c\u9ebb\u70e6\u4e0d\u5c11 \u6ce8\u610f\u5230 (b) \u4e2d \\(f\\) \u7ed3\u70b9\u5df2\u7ecf\u4e0d\u80fd\u901a\u8fc7 \\(g\\) \u7ed3\u70b9\u8bbf\u95ee\u5230\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e00\u4e2a\u6307\u5411 \\(f\\) \u7684\u8f85\u52a9\u6307\u9488\u5e2e\u52a9\u6211\u4eec\u8bbf\u95ee \\(f\\) \u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 node * R_rotate ( node * g ){ node * f = g -> lc ; if ( f -> rc != nullptr ) f -> rc -> fa = g ; g -> lc = f -> rc ; f -> rc = g ; f -> fa = g -> fa ; if ( g -> fa != nullptr ){ if ( g -> fa -> lc == g ){ g -> fa -> lc = f ; } else { g -> fa -> rc = f ; } } g -> fa = f ; return f ; } node * L_rotate ( node * g ){ node * f = g -> rc ; if ( f -> lc != nullptr ) f -> lc -> fa = g ; g -> rc = f -> lc ; f -> lc = g ; f -> fa = g -> fa ; if ( g -> fa != nullptr ){ if ( g -> fa -> rc == g ){ g -> fa -> rc = f ; } else { g -> fa -> lc = f ; } } g -> fa = f ; return f ; } Note \u77e5\u4e4e\u4e0a \u67d0\u4f4d\u533f\u540d\u5927\u4f6c\u7ed9\u51fa\u7684 \u65cb\u8f6c\u64cd\u4f5c \u4e0d\u9700\u8981\u8f85\u52a9\u6307\u9488 \u7684\u5b9e\u73b0 \u539f\u6587\u94fe\u63a5 1 2 3 4 5 6 g -> parent -> left = g -> left ; // R's left is now f g -> left -> parent = g -> parent ; // f's parent is now R g -> left -> right -> parent = g ; // fr's parent is now g g -> parent = g -> left ; // g's parent is now f g -> left = g -> left -> right ; // g's left is now fr g -> parent -> right = g ; // f's right is not g","title":"\u5de6\u65cb &amp; \u53f3\u65cb"},{"location":"ds/splay/#_3","text":"\u6ce8\u610f\uff0c\u4e0d\u80fd\u9012\u5f52\u8fdb\u5165\u63d2\u5165\u70b9\u540e\u624d\u8fd4\u56de\uff0c 1 2 3 4 5 6 // Incorrect if ( root == nullptr ){ // Insert to current node // cannot mantain root->fa return ; } \u800c\u5e94\u8be5\u5728\u5176\u7236\u8282\u70b9\u5904\u5c31\u5224\u65ad\u5176\u5de6\u53f3\u5b69\u5b50\u80fd\u4e0d\u80fd\u63d2\u5165\uff0c\u80fd\u63d2\u5165\u7684\u8bdd\uff0c\u5728\u7236\u8282\u70b9\u5185\u5c31\u8fd4\u56de\uff0c\u5426\u5219\u5c06\u96be\u4ee5\u7ef4\u62a4\u7236\u6307\u9488 1 2 3 4 5 6 7 8 9 10 11 // Correct if ( root -> lc == nullptr ){ // Insert to the left child of current node root -> lc -> fa = root ; return ; } if ( root -> lc == nullptr ){ // Insert to the right child of current node root -> rc -> fa = root ; return ; } \u63d2\u5165\u64cd\u4f5c\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 node * insert ( node *& root , int _val ){ if ( root == nullptr ){ // \u63d2\u5165\u7b2c\u4e00\u4e2a\u5143\u7d20 root = new node ; root -> val = _val ; return root ; // \u5c31\u4e00\u4e2a\u5143\u7d20\u4e0d\u7528 Splay } if ( _val < root -> val ){ if ( root -> lc == nullptr ){ root -> lc = new node ; root -> lc -> val = _val ; root -> lc -> fa = root ; return splay ( root -> lc ); // \u63d2\u5165\u7684 _val \u88ab\u8f6c\u5230\u4e86\u6839\u8282\u70b9\uff0c\u8fd4\u56de\u5b83 } return insert ( root -> lc , _val ); // \u4e00\u8def\u8fd4\u56de } else if ( _val > root -> val ){ if ( root -> rc == nullptr ){ root -> rc = new node ; root -> rc -> val = _val ; root -> rc -> fa = root ; return splay ( root -> rc ); // \u63d2\u5165\u7684 _val \u88ab\u8f6c\u5230\u4e86\u6839\u8282\u70b9\uff0c\u8fd4\u56de\u5b83 } return insert ( root -> rc , _val ); // \u4e00\u8def\u8fd4\u56de } else { root -> cnt ++ ; // \u5df2\u7ecf\u5b58\u5728 return splay ( root ); // \u4e5f\u8981\u8f6c\u5230\u6839\u8282\u70b9 } }","title":"\u63d2\u5165"},{"location":"ds/stack/","text":"\u6808 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 typedef unsigned long item ; class stack { private : enum { MAXN = 10 }; item data [ MAXN ]; public : stack (); bool is_empty (); bool is_full (); bool push ( item ); bool pop (); item top (); item size (); }; stack :: stack (){ data [ 0 ] = 0 ; } bool stack :: is_empty (){ return data [ 0 ] == 0 ; } bool stack :: is_full (){ return data [ 0 ] == MAXN -1 ; } bool stack :: push ( item val ){ data [ ++ data [ 0 ]] = val ; return this -> is_full (); } bool stack :: pop (){ if ( this -> is_empty ()) return false ; return data [ -- data [ 0 ]], true ; } item stack :: top (){ return data [ data [ 0 ]]; } item stack :: size (){ return data [ 0 ]; }","title":"\u6808"},{"location":"ds/stack/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 typedef unsigned long item ; class stack { private : enum { MAXN = 10 }; item data [ MAXN ]; public : stack (); bool is_empty (); bool is_full (); bool push ( item ); bool pop (); item top (); item size (); }; stack :: stack (){ data [ 0 ] = 0 ; } bool stack :: is_empty (){ return data [ 0 ] == 0 ; } bool stack :: is_full (){ return data [ 0 ] == MAXN -1 ; } bool stack :: push ( item val ){ data [ ++ data [ 0 ]] = val ; return this -> is_full (); } bool stack :: pop (){ if ( this -> is_empty ()) return false ; return data [ -- data [ 0 ]], true ; } item stack :: top (){ return data [ data [ 0 ]]; } item stack :: size (){ return data [ 0 ]; }","title":"\u6808"},{"location":"language/C%2B%2B/classcask/","text":"\u7c7b\u7684\u7c7b\u578b\u8f6c\u6362 \u00b6","title":"\u7c7b\u7684\u7c7b\u578b\u8f6c\u6362"},{"location":"language/C%2B%2B/classcask/#_1","text":"","title":"\u7c7b\u7684\u7c7b\u578b\u8f6c\u6362"},{"location":"language/C%2B%2B/ewsz/","text":"\u4e8c\u7ef4\u6570\u7ec4 \u00b6 \u4e8c\u7ef4\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4 \u4e8c\u7ef4\u6570\u7ec4\u540d\u662f\u6307\u5411 \u7b2c\u4e00\u884c\u5143\u7d20 \u7684\u6307\u9488\uff0c\u89e3\u5f15\u7528\u540e\u5f97\u5230 \u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4 \u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u5f62\u53c2\u65f6\uff0c\u9700\u8981 \u4f20\u5165\u7b2c\u4e8c\u7ef4\u5927\u5c0f \uff0c\u5426\u5219\u53ea\u80fd \u4f5c\u4e3a\u6307\u9488\u4f20\u5165\uff0c\u518d\u624b\u52a8\u5bfb\u5740 \u53d6\u5f97\u4e00\u6574\u884c\u5143\u7d20\u540e\u518d\u52a0\u51cf\u5c31\u662f\u79fb\u52a8\u5217\u4e86","title":"\u4e8c\u7ef4\u6570\u7ec4"},{"location":"language/C%2B%2B/ewsz/#_1","text":"\u4e8c\u7ef4\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4 \u4e8c\u7ef4\u6570\u7ec4\u540d\u662f\u6307\u5411 \u7b2c\u4e00\u884c\u5143\u7d20 \u7684\u6307\u9488\uff0c\u89e3\u5f15\u7528\u540e\u5f97\u5230 \u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4 \u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u5f62\u53c2\u65f6\uff0c\u9700\u8981 \u4f20\u5165\u7b2c\u4e8c\u7ef4\u5927\u5c0f \uff0c\u5426\u5219\u53ea\u80fd \u4f5c\u4e3a\u6307\u9488\u4f20\u5165\uff0c\u518d\u624b\u52a8\u5bfb\u5740 \u53d6\u5f97\u4e00\u6574\u884c\u5143\u7d20\u540e\u518d\u52a0\u51cf\u5c31\u662f\u79fb\u52a8\u5217\u4e86","title":"\u4e8c\u7ef4\u6570\u7ec4"},{"location":"language/C%2B%2B/lrvalue/","text":"\u5de6\u503c & \u53f3\u503c \u00b6 \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u53f3\u503c","title":"\u5de6\u503c & \u53f3\u503c"},{"location":"language/C%2B%2B/lrvalue/#_1","text":"\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u53f3\u503c","title":"\u5de6\u503c &amp; \u53f3\u503c"},{"location":"language/C%2B%2B/pointer/","text":"\u6307\u9488 \u00b6 \u6307\u4e00\u7c7b\u5b58\u50a8 \u5185\u5b58\u5730\u5740 \u7684\u53d8\u91cf \u6307\u9488\u7684\u57fa\u7c7b\u578b \u00b6 \u544a\u8bc9\u7f16\u8bd1\u5668\u6307\u9488\u6307\u5411\u7684 \u5185\u5b58\u5757\u5927\u5c0f \u548c \u7f16\u7801\u65b9\u5f0f \u4e00\u822c\u5b58\u7684\u6570\u636e\u662f\u4ec0\u4e48\u7c7b\u578b\uff0c\u57fa\u7c7b\u578b\u6807\u8bc6\u7b26\u5c31\u662f\u4ec0\u4e48\u7c7b\u578b \u6bd4\u5982\uff1a 1 2 3 int val = 65 ; int * p =& val ; // p \u5b58\u7684\u662f val \u6240\u5728\u7684\u5185\u5b58\u5757\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u5730\u5740 // int \u6807\u8bc6\u7b26\u544a\u8bc9\u7f16\u8bd1\u5668\uff1a\u89e3\u5f15\u7528\u65f6\uff0c\u6309 int \u5927\u5c0f\u5f80\u540e\u53d6 4 \u5b57\u8282\u5e76\u6309 int \u7684\u7f16\u7801\u65b9\u5f0f\u7ffb\u8bd1 \u6307\u9488\u7684\u504f\u79fb\u91cf \u00b6 \u5982\u679c\u6ca1\u6709\u504f\u79fb\u6807\u8bc6\u7b26\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528\u57fa\u7c7b\u578b\u6807\u8bc6\u7b26\u6307\u5b9a\u504f\u79fb\u89c4\u5219 1 int * p =& a ; // p+1 \u52a0 sizeof(int) = 4 Byte \u4e5f\u53ef\u7528 [n] \u81ea\u884c\u6307\u5b9a\u504f\u79fb\u91cf \u504f\u79fb\u91cf \\(=\\) \\(n\u00d7\\mathrm{sizeof(}\\) \u57fa\u7c7b\u578b \\()\\) 1 2 int ( * p )[ 2 ] =& a ; // \u6bcf\u6b21\u504f\u79fb 2*sizeof(int) = 8 Byte char ( * pp )[ 8 ] =& a ; // \u6bcf\u6b21\u504f\u79fb 8*sizeof(char) = 8 Byte Warning void* \u6307\u9488\u7684\u504f\u79fb\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u53ef\u80fd\u6709\u5dee\u522b\uff0c\u5c3d\u91cf\u907f\u514d\u4f7f\u7528 \u5982\uff1a ANSI C \u89c4\u5b9a void* \u6307\u9488\u4e0d\u80fd\u504f\u79fb\uff1b\u800c GNU \u89c4\u5b9a void* \u6307\u9488\u7684\u504f\u79fb\u89c4\u5219\u4e0e char* \u5b8c\u5168\u76f8\u540c \u6ce8\u610f\u4e0e\u6307\u9488\u6570\u7ec4\u533a\u522b 1 2 int ( * p )[ 8 ] =& a ; // \u6307\u9488 int * p [ 8 ]; // \u6307\u9488\u6570\u7ec4 Note \u4e0d\u5efa\u8bae\u5c06 int (*p)[8] \u79f0\u4f5c \u6570\u7ec4\u6307\u9488\uff0c\u5426\u5219\u5bb9\u6613\u4ee5\u4e3a sizeof(p)=8*sizeof(int) \u6307\u9488\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 \u00b6 \u6307\u9488\u4e0e\u6570\u7ec4\u540d \u00b6 \u518d\u6b21\u5f3a\u8c03\uff0c\u6570\u7ec4\u540d \u2260 \u6307\u5411\u6570\u7ec4\u9996\u5730\u5740\u7684\u6307\u9488 \u76f8\u540c \u00b6 \u6570\u7ec4\u540d\u548c\u6307\u9488\u6709\u8bb8\u591a\u76f8\u4f3c\u4e4b\u5904\uff0c\u6bd4\u5982\uff1a \u6570\u7ec4\u540d\u53ef\u4ee5\u5f53\u505a\u6307\u9488\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u504f\u79fb\u91cf\u4e3a\u6570\u7ec4\u4e2d \u5355\u4e2a\u5143\u7d20\u6240\u5360\u7684\u5185\u5b58\u5927\u5c0f 1 2 3 int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d %d \\n \" , arr [ 0 ], * arr ); // Result: 1 1 printf ( \"%d %d \\n \" , arr [ 2 ], * ( arr + 2 )); // Result: 3 3 \u533a\u522b \u00b6 \u4f46\u6307\u9488\u4e0e\u6570\u7ec4\u540d\u4e5f\u6709\u8bb8\u591a\u4e0d\u540c\uff1a sizeof \u8fd0\u7b97\u7b26 \\(\\mathrm{sizeof}(\\) \u6307\u9488 \\()=\\) \u6307\u9488\u53d8\u91cf\u6240\u5360\u5185\u5b58\u5927\u5c0f \\(\\mathrm{sizeof}(\\) \u6570\u7ec4\u540d \\()=\\) \u6570\u7ec4\u6240\u5360\u5185\u5b58\u5927\u5c0f \u4e00\u822c\u6765\u8bf4\uff0c\u6307\u9488\u53d8\u91cf\u6240\u5360\u5185\u5b58\u5927\u5c0f\u4e00\u822c\u7b49\u4e8e\u5f53\u524d CPU \u7684\u6700\u5927\u4f4d\u6570 1 2 3 4 5 6 7 8 9 10 int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%lu \\n \" , sizeof ( arr )); // Result: 20 = 5 * sizeof(int) int * pi = nullptr ; double * pd = nullptr ; char * pc = nullptr ; void * pv = nullptr ; printf ( \"%lu \\n \" , sizeof ( pi )); // Result: 8 printf ( \"%lu \\n \" , sizeof ( pd )); // Result: 8 printf ( \"%lu \\n \" , sizeof ( pc )); // Result: 8 printf ( \"%lu \\n \" , sizeof ( pv )); // Result: 8 \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4 1 2 3 int arr [ 2 ][ 2 ] = { 1 , 2 , 3 , 4 }; printf ( \"%lu \\n \" , sizeof ( arr )); // Result:16 printf ( \"%lu \\n \" , sizeof ( arr [ 0 ])); // Result: 8 \u53ef\u4ee5\u770b\u5230 arr[i] \u5b9e\u9645\u4e0a\u5c31\u662f\u53d6\u51fa\u4e86 arr \u7684\u7b2c i \u884c \u5bf9\u6570\u7ec4\u540d\u53d6\u5730\u5740\u4f1a\u5f97\u5230\u4e00\u4e2a \u6307\u5411\u6570\u7ec4\u9996\u5730\u5740\u7684\u5e38\u91cf\u6307\u9488 \uff0c\u5e76\u4e14\u8fd9\u4e2a\u6307\u9488\u7684 \u504f\u79fb\u91cf\u7b49\u4e8e\u6570\u7ec4\u6240\u5360\u5185\u5b58\u5927\u5c0f \uff0c\u4e5f\u5c31\u662f &str \u4f1a\u5f97\u5230\u4e00\u4e2a\u7c7b\u578b\u4e3a const char(*)[sizeof(str)] \u7684\u6307\u9488 \u4e5f\u53ef\u4ee5\u8ba4\u4e3a\uff0c\u6570\u7ec4\u540d\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b9e\u4f53\u7684\u53d8\u91cf\uff0c\u6ca1\u6709\u88ab\u5206\u914d\u7684\u5185\u5b58\uff0c\u53ea\u662f\u4f9d\u9644\u4e8e\u6570\u7ec4\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u548c\u6570\u7ec4\u6346\u7ed1\u5b58\u50a8\uff0c\u8fd9\u6837\uff0c\u5bf9\u6570\u7ec4\u540d\u53d6\u5730\u5740\u5f97\u5230\u7684\u81ea\u7136\u8fd8\u662f\u6570\u7ec4\u7684\u9996\u5730\u5740 \u4f60\u53ef\u4ee5\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5730\u5740\uff0c\u4f46\u4f60\u4e0d\u80fd\u4fee\u6539\u6570\u7ec4\u540d\u7684\u6307\u5411 \u6570\u7ec4\u540d\u9000\u5316\u4e3a\u6307\u9488 \u00b6 \u4f17\u6240\u5468\u77e5\uff0c\u5728\u6570\u7ec4\u540d\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u51fd\u6570\u65f6\uff0c\u6570\u7ec4\u540d\u4f1a\u9000\u5316\u4e3a\u6307\u9488\u3002\u56e0\u4e3a\u7528\u6765\u63a5\u6536\u6570\u7ec4\u540d\u7684\u5f62\u53c2\u662f\u6307\u9488\uff0c\u800c\u6307\u9488\u53ea\u80fd\u5b58\u4e00\u4e2a\u5730\u5740\uff0c\u800c\u4e0d\u80fd\u5b58\u6570\u7ec4\u5927\u5c0f\u7b49\u4fe1\u606f\uff0c\u56e0\u6b64\u4f1a\u53d1\u751f\u4fe1\u606f\u7684\u4e22\u5931\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8bf4\u7684 \u9000\u5316 1 2 3 4 5 6 7 8 9 10 11 void test ( int * a ){ printf ( \"%#x \\n \" , a ); // Result: 0xee01a8d0 printf ( \"%#x \\n \" , & a ); // Result: 0xee01a8a8 } int main (){ int arr [ 5 ]; printf ( \"%#x \\n \" , arr ); // Result: 0xee01a8d0 printf ( \"%#x \\n \" , & arr ); // Result: 0xee01a8d0 test ( arr ); return 0 ; } \u901a\u8fc7\u8fd9\u4e2a\u7a0b\u5e8f\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c arr \u548c a \u90fd\u5b58\u50a8\u4e86\u6570\u7ec4\u7684\u9996\u5730\u5740 0xee01a8d0 \uff0c\u800c a \u7684\u5730\u5740 &a \u4e0d\u540c\u4e8e\u6570\u7ec4\u9996\u5730\u5740\uff0c\u8fd9\u8bf4\u660e\u7f16\u8f91\u5668\u65b0\u5efa\u4e86\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\uff0c\u5e76\u5c06\u6570\u7ec4\u9996\u5730\u5740\u5b58\u8fdb\u53bb\u4e86\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684**\u4f20\u503c\u4f20\u53c2** \u65e2\u7136\u95ee\u9898\u51fa\u5728\u4f20\u53c2\u4e0a\uff0c\u90a3\u6211\u4eec\u5e38\u7528\u7684\u9632\u6b62\u62f7\u8d1d\u590d\u5236\u7684\u4f20\u53c2\u65b9\u5f0f \u4f20\u5f15\u7528 \uff0c\u80fd\u4e0d\u80fd\u7528\u5728\u8fd9\u91cc\u9632\u6b62\u6570\u7ec4\u540d\u9000\u5316\u5462\uff1f 1 2 3 4 5 6 7 8 9 10 11 void test ( int ( & a )[ 5 ]){ printf ( \"%#x \\n \" , a ); // Result: 0xee01a8d0 printf ( \"%#x \\n \" , & a ); // Result: 0xee01a8d0 printf ( \"%lu \\n \" , sizeof ( a )); // Result: 20 } int main (){ int arr [ 5 ]; printf ( \"%#x \\n \" , & arr ); // Result: 0xee01a8d0 test ( arr ); return 0 ; } \u53ef\u4ee5\u770b\u5230\uff0c\u6539\u7528\u4f20\u5f15\u7528\u7684\u65b9\u5f0f\u4f20\u9012\u6570\u7ec4\u540d\u540e\uff0c\u6ca1\u6709\u53d1\u751f\u6570\u7ec4\u540d\u9000\u5316\u4e3a\u6307\u9488\u7684\u60c5\u51b5\uff0c\u5bf9 a \u4f7f\u7528 sizeof \u8fd0\u7b97\u7b26\u4e5f\u80fd\u5f97\u5230\u6570\u7ec4\u6240\u5360\u5185\u5b58\u5927\u5c0f 20 \u4f46\u8fd9\u4e00\u65b9\u6cd5\u8981\u6c42\u6211\u4eec\u5728\u5f62\u53c2\u4e2d\u6307\u5b9a\u4f20\u5165\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5f62\u53c2\u6307\u5b9a\u7684\u5927\u5c0f\u548c\u4f20\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u4e0d\u4e00\u6837\uff0c\u5c31\u4f1a\u62a5\u9519 \u8fd9\u4e00\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u89e3\u51b3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < int T > void test ( int ( & a )[ T ]){ printf ( \"%lu \\n \" , sizeof ( a )); for ( auto i : a ) printf ( \"%d \" , i ); putchar ( '\\n' ); } int main (){ int a [ 3 ] = { 1 , 2 , 3 }; int b [ 6 ] = { 1 , 1 , 4 , 5 , 1 , 4 }; test ( a ); test ( b ); return 0 ; } \u901a\u8fc7\u6a21\u677f\uff0c\u6211\u4eec\u5f15\u8fdb\u4e86\u4e00\u4e2a int \u7684 \u975e\u7c7b\u578b\u53c2\u6570 \uff08\u8868\u793a\u4e00\u4e2a\u503c\u800c\u975e\u4e00\u4e2a\u7c7b\u578b\uff09\uff0c\u5f53\u8c03\u7528 print \u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u4ece\u5b9e\u53c2\u4e2d\u63a8\u65ad\u51fa\u53c2\u6570\u6570\u7ec4\u7684\u5927\u5c0f T\uff0c\u5e76\u4e14\u5b9e\u4f8b\u5316\u5bf9\u5e94\u7684\u51fd\u6570\u6a21\u677f \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u51fd\u6570\u58f0\u660e\u4f5c\u5982\u4e0b\u4fee\u6539\u5373\u53ef\uff1a 1 2 template < int T > void test ( int ( & a )[ T ][ T ]) \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u5728\u51fd\u6570\u91cc\u7528 sizeof \u548c a[i][j] \u4e86\uff01 Question C \u6ca1\u6709\u6a21\u677f\u600e\u4e48\u641e\u5462\uff1f const \u4fee\u9970\u7684\u6307\u9488 \u00b6 \u5e38\u6307\u9488 \u00b6 const int* p=&a \uff1a\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\uff0c\u6307\u9488\u6240\u6307\u5730\u5740\u53ef\u4ee5\u53d8\uff0c\u4f46\u6240\u6307\u5730\u5740\u5b58\u7684\u4e1c\u897f\u4e0d\u80fd\u53d8 \u6307\u9488\u5e38\u91cf \u00b6 int* const p=&a \uff1a\u6307\u9488\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u6307\u9488\u6240\u6307\u5730\u5740\u4e0d\u80fd\u53d8\uff0c\u4f46\u6240\u6307\u5730\u5740\u5b58\u7684\u4e1c\u897f\u53ef\u4ee5\u53d8 \u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\u5e38\u91cf \u00b6 const int* const p=&a \uff1a \u6240\u6307\u5730\u5740\uff0c\u548c\u6240\u6307\u5730\u5740\u5b58\u7684\u4e1c\u897f\u90fd\u4e0d\u80fd\u53d8 Note \u53ef\u4ee5\u8fd9\u6837\u8bb0\u5fc6\uff1a const \u4fee\u9970\u8c01\uff0c\u8c01\u5c31\u4e0d\u80fd\u53d8 const int* p \u4e2d\uff0c const \u4fee\u9970\u4e86 *p \uff0c\u6240\u4ee5\u6240\u6307\u5730\u5740\u5b58\u7684\u4e1c\u897f\u4e0d\u80fd\u53d8 int* const p \u4e2d const \u53ea\u4fee\u9970\u4e86 p \u6240\u4ee5\u662f\u6307\u9488\u6240\u6307\u5730\u5740\u4e0d\u80fd\u53d8 void \u6307\u9488 \u00b6 \u5373\u6ca1\u6709\u6307\u5b9a\u57fa\u7c7b\u578b\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u58f0\u660e\u51fd\u6570\u8fd4\u56de\u503c\u548c\u5f62\u53c2\u4e3a\u4efb\u4f55\u7c7b\u578b\uff0c\u8fd9\u4e00\u70b9\u5e38\u7528\u4e8e \u5b9e\u73b0\u6cdb\u578b \u6bd4\u5982 memcpy \u53ef\u4ee5\u5c06\u4e00\u5757\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u53e6\u4e00\u5757\u5185\u5b58\u4e2d\u53bb\uff0c\u5f88\u660e\u663e\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\u6211\u4eec\u6ca1\u5fc5\u8981\u77e5\u9053\u5185\u5b58\u4e2d\u5b58\u7684\u6570\u636e\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 void \u6307\u9488\uff08 void* memcpy(void* dest,const void* src,size_t len) \uff09 Warning void* \u6307\u9488\u7684\u504f\u79fb\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u53ef\u80fd\u6709\u5dee\u522b\uff0c\u5c3d\u91cf\u907f\u514d\u4f7f\u7528 \u5982\uff1a ANSI C \u89c4\u5b9a void* \u6307\u9488\u4e0d\u80fd\u504f\u79fb\uff1b\u800c GNU \u89c4\u5b9a void* \u6307\u9488\u7684\u504f\u79fb\u89c4\u5219\u4e0e char* \u5b8c\u5168\u76f8\u540c","title":"\u6307\u9488"},{"location":"language/C%2B%2B/pointer/#_1","text":"\u6307\u4e00\u7c7b\u5b58\u50a8 \u5185\u5b58\u5730\u5740 \u7684\u53d8\u91cf","title":"\u6307\u9488"},{"location":"language/C%2B%2B/pointer/#_2","text":"\u544a\u8bc9\u7f16\u8bd1\u5668\u6307\u9488\u6307\u5411\u7684 \u5185\u5b58\u5757\u5927\u5c0f \u548c \u7f16\u7801\u65b9\u5f0f \u4e00\u822c\u5b58\u7684\u6570\u636e\u662f\u4ec0\u4e48\u7c7b\u578b\uff0c\u57fa\u7c7b\u578b\u6807\u8bc6\u7b26\u5c31\u662f\u4ec0\u4e48\u7c7b\u578b \u6bd4\u5982\uff1a 1 2 3 int val = 65 ; int * p =& val ; // p \u5b58\u7684\u662f val \u6240\u5728\u7684\u5185\u5b58\u5757\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u5730\u5740 // int \u6807\u8bc6\u7b26\u544a\u8bc9\u7f16\u8bd1\u5668\uff1a\u89e3\u5f15\u7528\u65f6\uff0c\u6309 int \u5927\u5c0f\u5f80\u540e\u53d6 4 \u5b57\u8282\u5e76\u6309 int \u7684\u7f16\u7801\u65b9\u5f0f\u7ffb\u8bd1","title":"\u6307\u9488\u7684\u57fa\u7c7b\u578b"},{"location":"language/C%2B%2B/pointer/#_3","text":"\u5982\u679c\u6ca1\u6709\u504f\u79fb\u6807\u8bc6\u7b26\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528\u57fa\u7c7b\u578b\u6807\u8bc6\u7b26\u6307\u5b9a\u504f\u79fb\u89c4\u5219 1 int * p =& a ; // p+1 \u52a0 sizeof(int) = 4 Byte \u4e5f\u53ef\u7528 [n] \u81ea\u884c\u6307\u5b9a\u504f\u79fb\u91cf \u504f\u79fb\u91cf \\(=\\) \\(n\u00d7\\mathrm{sizeof(}\\) \u57fa\u7c7b\u578b \\()\\) 1 2 int ( * p )[ 2 ] =& a ; // \u6bcf\u6b21\u504f\u79fb 2*sizeof(int) = 8 Byte char ( * pp )[ 8 ] =& a ; // \u6bcf\u6b21\u504f\u79fb 8*sizeof(char) = 8 Byte Warning void* \u6307\u9488\u7684\u504f\u79fb\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u53ef\u80fd\u6709\u5dee\u522b\uff0c\u5c3d\u91cf\u907f\u514d\u4f7f\u7528 \u5982\uff1a ANSI C \u89c4\u5b9a void* \u6307\u9488\u4e0d\u80fd\u504f\u79fb\uff1b\u800c GNU \u89c4\u5b9a void* \u6307\u9488\u7684\u504f\u79fb\u89c4\u5219\u4e0e char* \u5b8c\u5168\u76f8\u540c \u6ce8\u610f\u4e0e\u6307\u9488\u6570\u7ec4\u533a\u522b 1 2 int ( * p )[ 8 ] =& a ; // \u6307\u9488 int * p [ 8 ]; // \u6307\u9488\u6570\u7ec4 Note \u4e0d\u5efa\u8bae\u5c06 int (*p)[8] \u79f0\u4f5c \u6570\u7ec4\u6307\u9488\uff0c\u5426\u5219\u5bb9\u6613\u4ee5\u4e3a sizeof(p)=8*sizeof(int)","title":"\u6307\u9488\u7684\u504f\u79fb\u91cf"},{"location":"language/C%2B%2B/pointer/#_4","text":"","title":"\u6307\u9488\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362"},{"location":"language/C%2B%2B/pointer/#_5","text":"\u518d\u6b21\u5f3a\u8c03\uff0c\u6570\u7ec4\u540d \u2260 \u6307\u5411\u6570\u7ec4\u9996\u5730\u5740\u7684\u6307\u9488","title":"\u6307\u9488\u4e0e\u6570\u7ec4\u540d"},{"location":"language/C%2B%2B/pointer/#_6","text":"\u6570\u7ec4\u540d\u548c\u6307\u9488\u6709\u8bb8\u591a\u76f8\u4f3c\u4e4b\u5904\uff0c\u6bd4\u5982\uff1a \u6570\u7ec4\u540d\u53ef\u4ee5\u5f53\u505a\u6307\u9488\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u504f\u79fb\u91cf\u4e3a\u6570\u7ec4\u4e2d \u5355\u4e2a\u5143\u7d20\u6240\u5360\u7684\u5185\u5b58\u5927\u5c0f 1 2 3 int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d %d \\n \" , arr [ 0 ], * arr ); // Result: 1 1 printf ( \"%d %d \\n \" , arr [ 2 ], * ( arr + 2 )); // Result: 3 3","title":"\u76f8\u540c"},{"location":"language/C%2B%2B/pointer/#_7","text":"\u4f46\u6307\u9488\u4e0e\u6570\u7ec4\u540d\u4e5f\u6709\u8bb8\u591a\u4e0d\u540c\uff1a sizeof \u8fd0\u7b97\u7b26 \\(\\mathrm{sizeof}(\\) \u6307\u9488 \\()=\\) \u6307\u9488\u53d8\u91cf\u6240\u5360\u5185\u5b58\u5927\u5c0f \\(\\mathrm{sizeof}(\\) \u6570\u7ec4\u540d \\()=\\) \u6570\u7ec4\u6240\u5360\u5185\u5b58\u5927\u5c0f \u4e00\u822c\u6765\u8bf4\uff0c\u6307\u9488\u53d8\u91cf\u6240\u5360\u5185\u5b58\u5927\u5c0f\u4e00\u822c\u7b49\u4e8e\u5f53\u524d CPU \u7684\u6700\u5927\u4f4d\u6570 1 2 3 4 5 6 7 8 9 10 int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%lu \\n \" , sizeof ( arr )); // Result: 20 = 5 * sizeof(int) int * pi = nullptr ; double * pd = nullptr ; char * pc = nullptr ; void * pv = nullptr ; printf ( \"%lu \\n \" , sizeof ( pi )); // Result: 8 printf ( \"%lu \\n \" , sizeof ( pd )); // Result: 8 printf ( \"%lu \\n \" , sizeof ( pc )); // Result: 8 printf ( \"%lu \\n \" , sizeof ( pv )); // Result: 8 \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4 1 2 3 int arr [ 2 ][ 2 ] = { 1 , 2 , 3 , 4 }; printf ( \"%lu \\n \" , sizeof ( arr )); // Result:16 printf ( \"%lu \\n \" , sizeof ( arr [ 0 ])); // Result: 8 \u53ef\u4ee5\u770b\u5230 arr[i] \u5b9e\u9645\u4e0a\u5c31\u662f\u53d6\u51fa\u4e86 arr \u7684\u7b2c i \u884c \u5bf9\u6570\u7ec4\u540d\u53d6\u5730\u5740\u4f1a\u5f97\u5230\u4e00\u4e2a \u6307\u5411\u6570\u7ec4\u9996\u5730\u5740\u7684\u5e38\u91cf\u6307\u9488 \uff0c\u5e76\u4e14\u8fd9\u4e2a\u6307\u9488\u7684 \u504f\u79fb\u91cf\u7b49\u4e8e\u6570\u7ec4\u6240\u5360\u5185\u5b58\u5927\u5c0f \uff0c\u4e5f\u5c31\u662f &str \u4f1a\u5f97\u5230\u4e00\u4e2a\u7c7b\u578b\u4e3a const char(*)[sizeof(str)] \u7684\u6307\u9488 \u4e5f\u53ef\u4ee5\u8ba4\u4e3a\uff0c\u6570\u7ec4\u540d\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b9e\u4f53\u7684\u53d8\u91cf\uff0c\u6ca1\u6709\u88ab\u5206\u914d\u7684\u5185\u5b58\uff0c\u53ea\u662f\u4f9d\u9644\u4e8e\u6570\u7ec4\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u548c\u6570\u7ec4\u6346\u7ed1\u5b58\u50a8\uff0c\u8fd9\u6837\uff0c\u5bf9\u6570\u7ec4\u540d\u53d6\u5730\u5740\u5f97\u5230\u7684\u81ea\u7136\u8fd8\u662f\u6570\u7ec4\u7684\u9996\u5730\u5740 \u4f60\u53ef\u4ee5\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5730\u5740\uff0c\u4f46\u4f60\u4e0d\u80fd\u4fee\u6539\u6570\u7ec4\u540d\u7684\u6307\u5411","title":"\u533a\u522b"},{"location":"language/C%2B%2B/pointer/#_8","text":"\u4f17\u6240\u5468\u77e5\uff0c\u5728\u6570\u7ec4\u540d\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9\u51fd\u6570\u65f6\uff0c\u6570\u7ec4\u540d\u4f1a\u9000\u5316\u4e3a\u6307\u9488\u3002\u56e0\u4e3a\u7528\u6765\u63a5\u6536\u6570\u7ec4\u540d\u7684\u5f62\u53c2\u662f\u6307\u9488\uff0c\u800c\u6307\u9488\u53ea\u80fd\u5b58\u4e00\u4e2a\u5730\u5740\uff0c\u800c\u4e0d\u80fd\u5b58\u6570\u7ec4\u5927\u5c0f\u7b49\u4fe1\u606f\uff0c\u56e0\u6b64\u4f1a\u53d1\u751f\u4fe1\u606f\u7684\u4e22\u5931\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8bf4\u7684 \u9000\u5316 1 2 3 4 5 6 7 8 9 10 11 void test ( int * a ){ printf ( \"%#x \\n \" , a ); // Result: 0xee01a8d0 printf ( \"%#x \\n \" , & a ); // Result: 0xee01a8a8 } int main (){ int arr [ 5 ]; printf ( \"%#x \\n \" , arr ); // Result: 0xee01a8d0 printf ( \"%#x \\n \" , & arr ); // Result: 0xee01a8d0 test ( arr ); return 0 ; } \u901a\u8fc7\u8fd9\u4e2a\u7a0b\u5e8f\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c arr \u548c a \u90fd\u5b58\u50a8\u4e86\u6570\u7ec4\u7684\u9996\u5730\u5740 0xee01a8d0 \uff0c\u800c a \u7684\u5730\u5740 &a \u4e0d\u540c\u4e8e\u6570\u7ec4\u9996\u5730\u5740\uff0c\u8fd9\u8bf4\u660e\u7f16\u8f91\u5668\u65b0\u5efa\u4e86\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\uff0c\u5e76\u5c06\u6570\u7ec4\u9996\u5730\u5740\u5b58\u8fdb\u53bb\u4e86\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684**\u4f20\u503c\u4f20\u53c2** \u65e2\u7136\u95ee\u9898\u51fa\u5728\u4f20\u53c2\u4e0a\uff0c\u90a3\u6211\u4eec\u5e38\u7528\u7684\u9632\u6b62\u62f7\u8d1d\u590d\u5236\u7684\u4f20\u53c2\u65b9\u5f0f \u4f20\u5f15\u7528 \uff0c\u80fd\u4e0d\u80fd\u7528\u5728\u8fd9\u91cc\u9632\u6b62\u6570\u7ec4\u540d\u9000\u5316\u5462\uff1f 1 2 3 4 5 6 7 8 9 10 11 void test ( int ( & a )[ 5 ]){ printf ( \"%#x \\n \" , a ); // Result: 0xee01a8d0 printf ( \"%#x \\n \" , & a ); // Result: 0xee01a8d0 printf ( \"%lu \\n \" , sizeof ( a )); // Result: 20 } int main (){ int arr [ 5 ]; printf ( \"%#x \\n \" , & arr ); // Result: 0xee01a8d0 test ( arr ); return 0 ; } \u53ef\u4ee5\u770b\u5230\uff0c\u6539\u7528\u4f20\u5f15\u7528\u7684\u65b9\u5f0f\u4f20\u9012\u6570\u7ec4\u540d\u540e\uff0c\u6ca1\u6709\u53d1\u751f\u6570\u7ec4\u540d\u9000\u5316\u4e3a\u6307\u9488\u7684\u60c5\u51b5\uff0c\u5bf9 a \u4f7f\u7528 sizeof \u8fd0\u7b97\u7b26\u4e5f\u80fd\u5f97\u5230\u6570\u7ec4\u6240\u5360\u5185\u5b58\u5927\u5c0f 20 \u4f46\u8fd9\u4e00\u65b9\u6cd5\u8981\u6c42\u6211\u4eec\u5728\u5f62\u53c2\u4e2d\u6307\u5b9a\u4f20\u5165\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5f62\u53c2\u6307\u5b9a\u7684\u5927\u5c0f\u548c\u4f20\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u4e0d\u4e00\u6837\uff0c\u5c31\u4f1a\u62a5\u9519 \u8fd9\u4e00\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u89e3\u51b3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < int T > void test ( int ( & a )[ T ]){ printf ( \"%lu \\n \" , sizeof ( a )); for ( auto i : a ) printf ( \"%d \" , i ); putchar ( '\\n' ); } int main (){ int a [ 3 ] = { 1 , 2 , 3 }; int b [ 6 ] = { 1 , 1 , 4 , 5 , 1 , 4 }; test ( a ); test ( b ); return 0 ; } \u901a\u8fc7\u6a21\u677f\uff0c\u6211\u4eec\u5f15\u8fdb\u4e86\u4e00\u4e2a int \u7684 \u975e\u7c7b\u578b\u53c2\u6570 \uff08\u8868\u793a\u4e00\u4e2a\u503c\u800c\u975e\u4e00\u4e2a\u7c7b\u578b\uff09\uff0c\u5f53\u8c03\u7528 print \u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u4ece\u5b9e\u53c2\u4e2d\u63a8\u65ad\u51fa\u53c2\u6570\u6570\u7ec4\u7684\u5927\u5c0f T\uff0c\u5e76\u4e14\u5b9e\u4f8b\u5316\u5bf9\u5e94\u7684\u51fd\u6570\u6a21\u677f \u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u51fd\u6570\u58f0\u660e\u4f5c\u5982\u4e0b\u4fee\u6539\u5373\u53ef\uff1a 1 2 template < int T > void test ( int ( & a )[ T ][ T ]) \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u5728\u51fd\u6570\u91cc\u7528 sizeof \u548c a[i][j] \u4e86\uff01 Question C \u6ca1\u6709\u6a21\u677f\u600e\u4e48\u641e\u5462\uff1f","title":"\u6570\u7ec4\u540d\u9000\u5316\u4e3a\u6307\u9488"},{"location":"language/C%2B%2B/pointer/#const","text":"","title":"const \u4fee\u9970\u7684\u6307\u9488"},{"location":"language/C%2B%2B/pointer/#_9","text":"const int* p=&a \uff1a\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\uff0c\u6307\u9488\u6240\u6307\u5730\u5740\u53ef\u4ee5\u53d8\uff0c\u4f46\u6240\u6307\u5730\u5740\u5b58\u7684\u4e1c\u897f\u4e0d\u80fd\u53d8","title":"\u5e38\u6307\u9488"},{"location":"language/C%2B%2B/pointer/#_10","text":"int* const p=&a \uff1a\u6307\u9488\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u6307\u9488\u6240\u6307\u5730\u5740\u4e0d\u80fd\u53d8\uff0c\u4f46\u6240\u6307\u5730\u5740\u5b58\u7684\u4e1c\u897f\u53ef\u4ee5\u53d8","title":"\u6307\u9488\u5e38\u91cf"},{"location":"language/C%2B%2B/pointer/#_11","text":"const int* const p=&a \uff1a \u6240\u6307\u5730\u5740\uff0c\u548c\u6240\u6307\u5730\u5740\u5b58\u7684\u4e1c\u897f\u90fd\u4e0d\u80fd\u53d8 Note \u53ef\u4ee5\u8fd9\u6837\u8bb0\u5fc6\uff1a const \u4fee\u9970\u8c01\uff0c\u8c01\u5c31\u4e0d\u80fd\u53d8 const int* p \u4e2d\uff0c const \u4fee\u9970\u4e86 *p \uff0c\u6240\u4ee5\u6240\u6307\u5730\u5740\u5b58\u7684\u4e1c\u897f\u4e0d\u80fd\u53d8 int* const p \u4e2d const \u53ea\u4fee\u9970\u4e86 p \u6240\u4ee5\u662f\u6307\u9488\u6240\u6307\u5730\u5740\u4e0d\u80fd\u53d8","title":"\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\u5e38\u91cf"},{"location":"language/C%2B%2B/pointer/#void","text":"\u5373\u6ca1\u6709\u6307\u5b9a\u57fa\u7c7b\u578b\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u58f0\u660e\u51fd\u6570\u8fd4\u56de\u503c\u548c\u5f62\u53c2\u4e3a\u4efb\u4f55\u7c7b\u578b\uff0c\u8fd9\u4e00\u70b9\u5e38\u7528\u4e8e \u5b9e\u73b0\u6cdb\u578b \u6bd4\u5982 memcpy \u53ef\u4ee5\u5c06\u4e00\u5757\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u53e6\u4e00\u5757\u5185\u5b58\u4e2d\u53bb\uff0c\u5f88\u660e\u663e\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\u6211\u4eec\u6ca1\u5fc5\u8981\u77e5\u9053\u5185\u5b58\u4e2d\u5b58\u7684\u6570\u636e\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 void \u6307\u9488\uff08 void* memcpy(void* dest,const void* src,size_t len) \uff09 Warning void* \u6307\u9488\u7684\u504f\u79fb\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u53ef\u80fd\u6709\u5dee\u522b\uff0c\u5c3d\u91cf\u907f\u514d\u4f7f\u7528 \u5982\uff1a ANSI C \u89c4\u5b9a void* \u6307\u9488\u4e0d\u80fd\u504f\u79fb\uff1b\u800c GNU \u89c4\u5b9a void* \u6307\u9488\u7684\u504f\u79fb\u89c4\u5219\u4e0e char* \u5b8c\u5168\u76f8\u540c","title":"void \u6307\u9488"},{"location":"language/C%2B%2B/wdg/","text":"\u5c3e\u9012\u5f52 \u00b6 \u53c2\u8003\uff1a\u5c3e\u9012\u5f52\u4e3a\u5565\u80fd\u4f18\u5316\uff1f","title":"\u5c3e\u9012\u5f52"},{"location":"language/C%2B%2B/wdg/#_1","text":"\u53c2\u8003\uff1a\u5c3e\u9012\u5f52\u4e3a\u5565\u80fd\u4f18\u5316\uff1f","title":"\u5c3e\u9012\u5f52"},{"location":"math/ksm/","text":"\u5feb\u901f\u5e42 \u00b6 \u9012\u5f52\u5feb\u901f\u5e42 \u00b6 \\[ a_n=\\left\\{ \\begin{aligned} & a^{n-1}\u00d7a & (\\ \\text{if }n\\text{ is odd}\\ )\\\\ & a^{n/2}\u00d7a^{n/2} & (\\ \\text{if }n\\text{ is even but not 0}\\ )\\\\ & 1 & (\\ \\text{if }n=0\\ )\\\\ \\end{aligned} \\right. \\] 1 2 3 4 5 6 int qpow ( int a , int n ){ if ( n == 0 ) return 1 ; if ( n % 2 == 1 ) return a * qpow ( a , n -1 ); int tmp = qpow ( a , n / 2 ); return tmp * tmp ; } \u975e\u9012\u5f52\u5feb\u901f\u5e42 \u00b6 \u5148\u5c06\u5e42\u5199\u6210\u4e8c\u8fdb\u5236\uff0c\u5e76\u62c6\u5206\u4e3a\u9664\u6700\u9ad8\u4f4d\u5916\u5176\u4ed6\u4f4d\u90fd\u662f 0 \u7684\u5e42\u4e4b\u79ef \\[ x^{10}=x^{(1010)_2}=x^{(10)_2}\\cdot x^{(1000)_2} \\] \\[ x^{15}=x^{(1111)_2}= x^{(1)_2}\\cdot x^{(10)_2}\\cdot x^{(100)_2}\\cdot x^{(1000)_2} \\] \u5bf9\u4e8e\u9664\u6700\u9ad8\u4f4d\u5916\u5176\u4ed6\u4f4d\u90fd\u662f 0 \u7684\u5e42\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u5e73\u65b9\u5e95\u6570\u6c42\u5f97 \\[ x^{(1)_2}=x^1 \\] \\[ x^{(10)_2}=x^2 \\] \\[ x^{(100)_2}=x^4 \\] \\[ x^{(1000)_2}=x^8 \\] \u6240\u4ee5\u5feb\u901f\u5e42\u8fd8\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u975e\u9012\u5f52\u7248\u672c\uff1a 1 2 3 4 5 6 7 8 9 int qpow ( int a , int n ){ int ans = 1 ; while ( n ){ if ( n & 1 ) ans *= a ; // \u5f53\u524d\u672b\u4f4d\u4e3a 1 a *= a ; // \u4e0d\u65ad\u5e73\u65b9 n >>= 1 ; // \u62b9\u6389\u672b\u4f4d } return ans ; } \u6cdb\u578b\u5feb\u901f\u5e42 \u00b6 \u975e\u9012\u5f52\u7248\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 template < typrname T > T qpow ( T a , T n ){ T ans = 1 ; // \u8d4b\u503c\u4e3a\u4e58\u6cd5\u5355\u4f4d\u5143 while ( n ){ if ( n & 1 ) ans = ans * a ; // \u4e0d\u7528 *=\uff0c\u5426\u5219\u8fd8\u5f97\u91cd\u8f7d *= a = a * a ; n >>= 1 ; } return ans ; }","title":"\u5feb\u901f\u5e42"},{"location":"math/ksm/#_1","text":"","title":"\u5feb\u901f\u5e42"},{"location":"math/ksm/#_2","text":"\\[ a_n=\\left\\{ \\begin{aligned} & a^{n-1}\u00d7a & (\\ \\text{if }n\\text{ is odd}\\ )\\\\ & a^{n/2}\u00d7a^{n/2} & (\\ \\text{if }n\\text{ is even but not 0}\\ )\\\\ & 1 & (\\ \\text{if }n=0\\ )\\\\ \\end{aligned} \\right. \\] 1 2 3 4 5 6 int qpow ( int a , int n ){ if ( n == 0 ) return 1 ; if ( n % 2 == 1 ) return a * qpow ( a , n -1 ); int tmp = qpow ( a , n / 2 ); return tmp * tmp ; }","title":"\u9012\u5f52\u5feb\u901f\u5e42"},{"location":"math/ksm/#_3","text":"\u5148\u5c06\u5e42\u5199\u6210\u4e8c\u8fdb\u5236\uff0c\u5e76\u62c6\u5206\u4e3a\u9664\u6700\u9ad8\u4f4d\u5916\u5176\u4ed6\u4f4d\u90fd\u662f 0 \u7684\u5e42\u4e4b\u79ef \\[ x^{10}=x^{(1010)_2}=x^{(10)_2}\\cdot x^{(1000)_2} \\] \\[ x^{15}=x^{(1111)_2}= x^{(1)_2}\\cdot x^{(10)_2}\\cdot x^{(100)_2}\\cdot x^{(1000)_2} \\] \u5bf9\u4e8e\u9664\u6700\u9ad8\u4f4d\u5916\u5176\u4ed6\u4f4d\u90fd\u662f 0 \u7684\u5e42\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u5e73\u65b9\u5e95\u6570\u6c42\u5f97 \\[ x^{(1)_2}=x^1 \\] \\[ x^{(10)_2}=x^2 \\] \\[ x^{(100)_2}=x^4 \\] \\[ x^{(1000)_2}=x^8 \\] \u6240\u4ee5\u5feb\u901f\u5e42\u8fd8\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u975e\u9012\u5f52\u7248\u672c\uff1a 1 2 3 4 5 6 7 8 9 int qpow ( int a , int n ){ int ans = 1 ; while ( n ){ if ( n & 1 ) ans *= a ; // \u5f53\u524d\u672b\u4f4d\u4e3a 1 a *= a ; // \u4e0d\u65ad\u5e73\u65b9 n >>= 1 ; // \u62b9\u6389\u672b\u4f4d } return ans ; }","title":"\u975e\u9012\u5f52\u5feb\u901f\u5e42"},{"location":"math/ksm/#_4","text":"\u975e\u9012\u5f52\u7248\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 template < typrname T > T qpow ( T a , T n ){ T ans = 1 ; // \u8d4b\u503c\u4e3a\u4e58\u6cd5\u5355\u4f4d\u5143 while ( n ){ if ( n & 1 ) ans = ans * a ; // \u4e0d\u7528 *=\uff0c\u5426\u5219\u8fd8\u5f97\u91cd\u8f7d *= a = a * a ; n >>= 1 ; } return ans ; }","title":"\u6cdb\u578b\u5feb\u901f\u5e42"},{"location":"math/ejz/bz/","text":"\u500d\u589e \u00b6 \u539f\u7406 \u00b6 \u4efb\u610f\u6b63\u6574\u6570\u90fd\u80fd\u8868\u793a\u4e3a 2 \u7684\u4e0d\u540c\u5e42\u6b21\u4e4b\u548c \u5c31\u8fd9\u4e48\u7b80\u5355 qwq","title":"\u500d\u589e"},{"location":"math/ejz/bz/#_1","text":"","title":"\u500d\u589e"},{"location":"math/ejz/bz/#_2","text":"\u4efb\u610f\u6b63\u6574\u6570\u90fd\u80fd\u8868\u793a\u4e3a 2 \u7684\u4e0d\u540c\u5e42\u6b21\u4e4b\u548c \u5c31\u8fd9\u4e48\u7b80\u5355 qwq","title":"\u539f\u7406"},{"location":"math/shulun/prime/","text":".katex img { display: block; position: absolute; width: 100%; height: inherit; } \u7d20\u6570 \u00b6 \u76f8\u5173\u6982\u5ff5 \u00b6 \u5224\u65ad\u7d20\u6570 \u00b6 \u8bd5\u9664\u6cd5 \u00b6 \u5747\u503c\u4f18\u5316 \u00b6 \u518d\u6b21\u9605\u8bfb\u5408\u6570\u7684\u5b9a\u4e49\uff1a \u9664\u4e86 1 \u548c\u5176\u672c\u8eab\u5916\u5177\u6709\u5176\u4ed6\u6b63\u56e0\u6570\u7684\u6b63\u6574\u6570 \u5bb9\u6613\u77e5\u9053\uff0c\u5bf9\u4efb\u4e00\u5408\u6570 \\(A\\) \uff0c\u4e00\u5b9a\u5b58\u5728\u4e24\u4e2a\u6b63\u56e0\u5b50 \\(M\\ ,\\ N\\) \u6ee1\u8db3 \\(A=M\u00d7N\\) \uff0c\u53c8\u7531\u5747\u503c\u4e0d\u7b49\u5f0f\u53ef\u77e5 \\(M\\ ,\\ N\\) \u4e2d\u4e00\u5b9a\u4e00\u4e2a \\(\u2265\\sqrt{A}\\) \uff0c\u4e00\u4e2a \\(\u2264\\sqrt{A}\\) \u6240\u4ee5\u4e00\u4e2a\u6570 \\(A\\) \u5982\u679c\u5728 \\((\\ 1\\ ,\\ \\sqrt{A}\\ ]\\) \u5185\u627e\u4e0d\u5230\u56e0\u5b50\uff0c\u90a3\u5728 \\([\\ \\sqrt{A}\\ ,\\ A\\ )\\) \u5185\u4e5f\u4e0d\u53ef\u80fd\u6709\u56e0\u5b50\uff0c\u5373\u53ef\u5224\u65ad \\(A\\) \u4e3a\u7d20\u6570 \u7d20\u6570\u7b5b\u6cd5 \u00b6 \u57c3\u6c0f\u7b5b \u00b6 Eratosthenes \u7b5b\u6cd5\uff0c\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\uff0c\u7b80\u79f0 \u57c3\u6c0f\u7b5b\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n\\log\\log n)\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 vector Eratosthenes ( int n ){ bool is_prime [ n + 1 ]; vector < int > primes ; fill ( is_prime , is_prime + n + 1 , true ); // \u7528 fill \u800c\u4e0d\u662f memset \u521d\u59cb\u5316\uff0cmemset \u53ea\u80fd\u521d\u59cb\u5316\u4e3a 0,-1 for ( int i = 2 ; i <= sqrt ( n ); i ++ ){ // \u7b5b\u5230 sqrt(n) \u5373\u53ef\uff0c\u5927\u4e8e sqrt(n) \u7684\u6570\u6839\u672c\u4e0d\u4f1a\u8fdb\u5185\u5c42\u5faa\u73af if ( flag [ i ]){ primes . push_back ( i ); // \u52a0\u5165\u7d20\u6570\u8868 for ( int j = i * i ; j <= n ; j += i ){ // 2 \u5230 i-1 \u7684\u500d\u6570\u5df2\u7ecf\u7b5b\u8fc7\u4e86\uff0c\u76f4\u63a5\u4ece i \u7684\u500d\u6570\u5f00\u59cb\u7b5b flag [ i ] = false ; } } } return primes ; } \u6b27\u62c9\u7b5b \u00b6 \u5728\u57c3\u6c0f\u7b5b\u6cd5\u7684\u57fa\u7840\u4e0a\uff0c\u8ba9\u6bcf\u4e2a\u5408\u6570\u53ea\u88ab\u5176 \u6700\u5c0f\u8d28\u56e0\u6570 \u7b5b\u53bb \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff08\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6545\u6b27\u62c9\u7b5b\u4e5f\u79f0 \u7ebf\u6027\u7b5b \uff09 \u4ece 2 \u5f00\u59cb\u904d\u5386\uff0c\u5e76\u7ef4\u62a4\u4e00\u4e2a\u7d20\u6570\u8868\uff08\u521d\u59cb\u4e3a\u7a7a\uff09 2 3 4 5 6 7 8 9 10 p r i m e s : ( ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ 4\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ 6\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ 8\\ \\ \\ \\ \\ 9\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(\\ ) 2 3 4 5 6 7 8 9 1 0 p r i m e s : ( ) \u904d\u5386\u5230 2\uff0c\u672a\u88ab\u6807\u8bb0\uff08\u6ca1\u6709\u53d8\u7070\uff09\uff0c\u5c06\u5176\u653e\u5165\u7d20\u6570\u8868\u4e2d ( 2 ) 3 4 5 6 7 8 9 10 p r i m e s : ( 2 , ) (2)\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ 4\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ 6\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ 8\\ \\ \\ \\ \\ 9\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(2,) ( 2 ) 3 4 5 6 7 8 9 1 0 p r i m e s : ( 2 , ) \u7528 2 \u53bb\u4e58\u8d28\u6570\u8868\u91cc\u7684\u6bcf\u4e2a\u6570\uff0c\u6807\u8bb0\u6240\u5f97\u6570\uff08\u6807\u8bb0\u4e86 \\(2\u00d72=4\\) \uff09 ( 2 ) 3 4 5 6 7 8 9 10 p r i m e s : ( 2 , ) (2)\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ 6\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ 8\\ \\ \\ \\ \\ 9\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(2,) ( 2 ) 3 4 5 6 7 8 9 1 0 p r i m e s : ( 2 , ) \u904d\u5386\u5230 3\uff0c\u672a\u88ab\u6807\u8bb0\uff0c\u5c06\u5176\u653e\u5165\u7d20\u6570\u8868\u4e2d\uff0c\u5e76\u6807\u8bb0 6\uff0c9 2 ( 3 ) 4 5 6 7 8 9 10 p r i m e s : ( 2 , 3 , ) 2\\ \\ \\ \\ \\ (3)\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ 8\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(2,3,) 2 ( 3 ) 4 5 6 7 8 9 1 0 p r i m e s : ( 2 , 3 , ) \u904d\u5386\u5230 4\uff0c\u5df2\u88ab\u6807\u8bb0\uff0c\u4e0d\u5c06\u5176\u653e\u5165\u7d20\u6570\u8868\u4e2d\uff0c\u5148\u6807\u8bb0 \\(4\u00d72=8\\) \uff0c\u4f46\u53d1\u73b0 4 \u80fd\u88ab 2 \u6574\u9664\uff0c\u4e8e\u662f\u4e0d\u7ee7\u7eed\u6807\u8bb0\uff0c\u76f4\u63a5\u904d\u5386\u4e0b\u4e00\u4e2a\u6570 \\(5\\) 2 3 ( 4 ) 5 6 7 8 9 10 p r i m e s : ( 2 , 3 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ ({\\color{lightgray}4})\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(2,3,) 2 3 ( 4 ) 5 6 7 8 9 1 0 p r i m e s : ( 2 , 3 , ) Warning \u6807\u8bb0 i*primes[j] \u65f6\uff0c\u5982\u679c\u53d1\u73b0 i%primes[j]==0 \uff0c\u5219\u4e0d\u518d\u6807\u8bb0 i*primes[j+1] \u56e0\u4e3a i%primes[j]==0 \u8bf4\u660e i \u4e2d\u6709 primes[j] \u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c\u90a3\u4e48 i*primes[j+1] \u4e2d\u4e5f\u80af\u5b9a\u6709 primes[j] \u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c\u800c i>primes[j] \uff0c\u6240\u4ee5 i*primes[j+1] \u5e94\u8be5\u7531\u6700\u5c0f\u7684\u8d28\u56e0\u5b50 primes[j] \u800c\u4e0d\u662f\u5f53\u524d\u8d28\u56e0\u5b50 i \u53bb\u7b5b\u6389 \u5c31\u62ff 4 \u4e3a\u4f8b\uff0c 4%2==0 \u8bf4\u660e 4 \u4e2d\u6709 2 \u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c\u90a3\u4e48 4\u00d73=12 \u4e2d\u4e5f\u6709 2 \u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5 12 \u5e94\u8be5\u5728\u540e\u9762\u904d\u5386\u5230 6 \u65f6\u7531 6\u00d72=12 \u7b5b\u6389\uff0c\u800c\u4e0d\u662f\u73b0\u5728\u7528 4 \u7b5b\u6389 2 3 4 ( 5 ) 6 7 8 9 10 p r i m e s : ( 2 , 3 , 5 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ (5)\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,) 2 3 4 ( 5 ) 6 7 8 9 1 0 p r i m e s : ( 2 , 3 , 5 , ) 2 3 4 5 ( 6 ) 7 8 9 10 p r i m e s : ( 2 , 3 , 5 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ ({\\color{lightgray}6})\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,) 2 3 4 5 ( 6 ) 7 8 9 1 0 p r i m e s : ( 2 , 3 , 5 , ) 2 3 4 5 6 ( 7 ) 8 9 10 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ (7)\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,7,) 2 3 4 5 6 ( 7 ) 8 9 1 0 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2 3 4 5 6 7 ( 8 ) 9 10 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ ({\\color{lightgray}8})\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,7,) 2 3 4 5 6 7 ( 8 ) 9 1 0 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2 3 4 5 6 7 8 ( 9 ) 10 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ ({\\color{lightgray}9})\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,7,) 2 3 4 5 6 7 8 ( 9 ) 1 0 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2 3 4 5 6 7 8 9 ( 10 ) p r i m e s : ( 2 , 3 , 5 , 7 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ ({\\color{lightgray}10})\\\\ \\mathrm{primes}:(2,3,5,7,) 2 3 4 5 6 7 8 9 ( 1 0 ) p r i m e s : ( 2 , 3 , 5 , 7 , ) \u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 vector Euler ( int n ){ bool is_prime [ n + 1 ]; vector < int > primes ; fill ( is_prime , is_prime + n + 1 , true ); for ( int i = 2 ; i <= n ; i ++ ){ if ( is_prime [ i ]){ primes . push_back ( i ); } for ( int p : primes ){ if ( i * p > n ) break ; is_prime [ i * p ] = false ; if ( i % p == 0 ) break ; } } return primes ; } Min_25 \u7b5b \u00b6","title":"\u7d20\u6570"},{"location":"math/shulun/prime/#_1","text":"","title":"\u7d20\u6570"},{"location":"math/shulun/prime/#_2","text":"","title":"\u76f8\u5173\u6982\u5ff5"},{"location":"math/shulun/prime/#_3","text":"","title":"\u5224\u65ad\u7d20\u6570"},{"location":"math/shulun/prime/#_4","text":"","title":"\u8bd5\u9664\u6cd5"},{"location":"math/shulun/prime/#_5","text":"\u518d\u6b21\u9605\u8bfb\u5408\u6570\u7684\u5b9a\u4e49\uff1a \u9664\u4e86 1 \u548c\u5176\u672c\u8eab\u5916\u5177\u6709\u5176\u4ed6\u6b63\u56e0\u6570\u7684\u6b63\u6574\u6570 \u5bb9\u6613\u77e5\u9053\uff0c\u5bf9\u4efb\u4e00\u5408\u6570 \\(A\\) \uff0c\u4e00\u5b9a\u5b58\u5728\u4e24\u4e2a\u6b63\u56e0\u5b50 \\(M\\ ,\\ N\\) \u6ee1\u8db3 \\(A=M\u00d7N\\) \uff0c\u53c8\u7531\u5747\u503c\u4e0d\u7b49\u5f0f\u53ef\u77e5 \\(M\\ ,\\ N\\) \u4e2d\u4e00\u5b9a\u4e00\u4e2a \\(\u2265\\sqrt{A}\\) \uff0c\u4e00\u4e2a \\(\u2264\\sqrt{A}\\) \u6240\u4ee5\u4e00\u4e2a\u6570 \\(A\\) \u5982\u679c\u5728 \\((\\ 1\\ ,\\ \\sqrt{A}\\ ]\\) \u5185\u627e\u4e0d\u5230\u56e0\u5b50\uff0c\u90a3\u5728 \\([\\ \\sqrt{A}\\ ,\\ A\\ )\\) \u5185\u4e5f\u4e0d\u53ef\u80fd\u6709\u56e0\u5b50\uff0c\u5373\u53ef\u5224\u65ad \\(A\\) \u4e3a\u7d20\u6570","title":"\u5747\u503c\u4f18\u5316"},{"location":"math/shulun/prime/#_6","text":"","title":"\u7d20\u6570\u7b5b\u6cd5"},{"location":"math/shulun/prime/#_7","text":"Eratosthenes \u7b5b\u6cd5\uff0c\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\uff0c\u7b80\u79f0 \u57c3\u6c0f\u7b5b\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n\\log\\log n)\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 vector Eratosthenes ( int n ){ bool is_prime [ n + 1 ]; vector < int > primes ; fill ( is_prime , is_prime + n + 1 , true ); // \u7528 fill \u800c\u4e0d\u662f memset \u521d\u59cb\u5316\uff0cmemset \u53ea\u80fd\u521d\u59cb\u5316\u4e3a 0,-1 for ( int i = 2 ; i <= sqrt ( n ); i ++ ){ // \u7b5b\u5230 sqrt(n) \u5373\u53ef\uff0c\u5927\u4e8e sqrt(n) \u7684\u6570\u6839\u672c\u4e0d\u4f1a\u8fdb\u5185\u5c42\u5faa\u73af if ( flag [ i ]){ primes . push_back ( i ); // \u52a0\u5165\u7d20\u6570\u8868 for ( int j = i * i ; j <= n ; j += i ){ // 2 \u5230 i-1 \u7684\u500d\u6570\u5df2\u7ecf\u7b5b\u8fc7\u4e86\uff0c\u76f4\u63a5\u4ece i \u7684\u500d\u6570\u5f00\u59cb\u7b5b flag [ i ] = false ; } } } return primes ; }","title":"\u57c3\u6c0f\u7b5b"},{"location":"math/shulun/prime/#_8","text":"\u5728\u57c3\u6c0f\u7b5b\u6cd5\u7684\u57fa\u7840\u4e0a\uff0c\u8ba9\u6bcf\u4e2a\u5408\u6570\u53ea\u88ab\u5176 \u6700\u5c0f\u8d28\u56e0\u6570 \u7b5b\u53bb \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff08\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6545\u6b27\u62c9\u7b5b\u4e5f\u79f0 \u7ebf\u6027\u7b5b \uff09 \u4ece 2 \u5f00\u59cb\u904d\u5386\uff0c\u5e76\u7ef4\u62a4\u4e00\u4e2a\u7d20\u6570\u8868\uff08\u521d\u59cb\u4e3a\u7a7a\uff09 2 3 4 5 6 7 8 9 10 p r i m e s : ( ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ 4\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ 6\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ 8\\ \\ \\ \\ \\ 9\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(\\ ) 2 3 4 5 6 7 8 9 1 0 p r i m e s : ( ) \u904d\u5386\u5230 2\uff0c\u672a\u88ab\u6807\u8bb0\uff08\u6ca1\u6709\u53d8\u7070\uff09\uff0c\u5c06\u5176\u653e\u5165\u7d20\u6570\u8868\u4e2d ( 2 ) 3 4 5 6 7 8 9 10 p r i m e s : ( 2 , ) (2)\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ 4\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ 6\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ 8\\ \\ \\ \\ \\ 9\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(2,) ( 2 ) 3 4 5 6 7 8 9 1 0 p r i m e s : ( 2 , ) \u7528 2 \u53bb\u4e58\u8d28\u6570\u8868\u91cc\u7684\u6bcf\u4e2a\u6570\uff0c\u6807\u8bb0\u6240\u5f97\u6570\uff08\u6807\u8bb0\u4e86 \\(2\u00d72=4\\) \uff09 ( 2 ) 3 4 5 6 7 8 9 10 p r i m e s : ( 2 , ) (2)\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ 6\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ 8\\ \\ \\ \\ \\ 9\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(2,) ( 2 ) 3 4 5 6 7 8 9 1 0 p r i m e s : ( 2 , ) \u904d\u5386\u5230 3\uff0c\u672a\u88ab\u6807\u8bb0\uff0c\u5c06\u5176\u653e\u5165\u7d20\u6570\u8868\u4e2d\uff0c\u5e76\u6807\u8bb0 6\uff0c9 2 ( 3 ) 4 5 6 7 8 9 10 p r i m e s : ( 2 , 3 , ) 2\\ \\ \\ \\ \\ (3)\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ 8\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(2,3,) 2 ( 3 ) 4 5 6 7 8 9 1 0 p r i m e s : ( 2 , 3 , ) \u904d\u5386\u5230 4\uff0c\u5df2\u88ab\u6807\u8bb0\uff0c\u4e0d\u5c06\u5176\u653e\u5165\u7d20\u6570\u8868\u4e2d\uff0c\u5148\u6807\u8bb0 \\(4\u00d72=8\\) \uff0c\u4f46\u53d1\u73b0 4 \u80fd\u88ab 2 \u6574\u9664\uff0c\u4e8e\u662f\u4e0d\u7ee7\u7eed\u6807\u8bb0\uff0c\u76f4\u63a5\u904d\u5386\u4e0b\u4e00\u4e2a\u6570 \\(5\\) 2 3 ( 4 ) 5 6 7 8 9 10 p r i m e s : ( 2 , 3 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ ({\\color{lightgray}4})\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ 10\\\\ \\mathrm{primes}:(2,3,) 2 3 ( 4 ) 5 6 7 8 9 1 0 p r i m e s : ( 2 , 3 , ) Warning \u6807\u8bb0 i*primes[j] \u65f6\uff0c\u5982\u679c\u53d1\u73b0 i%primes[j]==0 \uff0c\u5219\u4e0d\u518d\u6807\u8bb0 i*primes[j+1] \u56e0\u4e3a i%primes[j]==0 \u8bf4\u660e i \u4e2d\u6709 primes[j] \u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c\u90a3\u4e48 i*primes[j+1] \u4e2d\u4e5f\u80af\u5b9a\u6709 primes[j] \u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c\u800c i>primes[j] \uff0c\u6240\u4ee5 i*primes[j+1] \u5e94\u8be5\u7531\u6700\u5c0f\u7684\u8d28\u56e0\u5b50 primes[j] \u800c\u4e0d\u662f\u5f53\u524d\u8d28\u56e0\u5b50 i \u53bb\u7b5b\u6389 \u5c31\u62ff 4 \u4e3a\u4f8b\uff0c 4%2==0 \u8bf4\u660e 4 \u4e2d\u6709 2 \u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c\u90a3\u4e48 4\u00d73=12 \u4e2d\u4e5f\u6709 2 \u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5 12 \u5e94\u8be5\u5728\u540e\u9762\u904d\u5386\u5230 6 \u65f6\u7531 6\u00d72=12 \u7b5b\u6389\uff0c\u800c\u4e0d\u662f\u73b0\u5728\u7528 4 \u7b5b\u6389 2 3 4 ( 5 ) 6 7 8 9 10 p r i m e s : ( 2 , 3 , 5 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ (5)\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,) 2 3 4 ( 5 ) 6 7 8 9 1 0 p r i m e s : ( 2 , 3 , 5 , ) 2 3 4 5 ( 6 ) 7 8 9 10 p r i m e s : ( 2 , 3 , 5 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ ({\\color{lightgray}6})\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,) 2 3 4 5 ( 6 ) 7 8 9 1 0 p r i m e s : ( 2 , 3 , 5 , ) 2 3 4 5 6 ( 7 ) 8 9 10 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ (7)\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,7,) 2 3 4 5 6 ( 7 ) 8 9 1 0 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2 3 4 5 6 7 ( 8 ) 9 10 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ ({\\color{lightgray}8})\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,7,) 2 3 4 5 6 7 ( 8 ) 9 1 0 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2 3 4 5 6 7 8 ( 9 ) 10 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ ({\\color{lightgray}9})\\ \\ \\ \\ \\ {\\color{lightgray}10}\\\\ \\mathrm{primes}:(2,3,5,7,) 2 3 4 5 6 7 8 ( 9 ) 1 0 p r i m e s : ( 2 , 3 , 5 , 7 , ) 2 3 4 5 6 7 8 9 ( 10 ) p r i m e s : ( 2 , 3 , 5 , 7 , ) 2\\ \\ \\ \\ \\ 3\\ \\ \\ \\ \\ {\\color{lightgray}4}\\ \\ \\ \\ \\ 5\\ \\ \\ \\ \\ {\\color{lightgray}6}\\ \\ \\ \\ \\ 7\\ \\ \\ \\ \\ {\\color{lightgray}8}\\ \\ \\ \\ \\ {\\color{lightgray}9}\\ \\ \\ \\ \\ ({\\color{lightgray}10})\\\\ \\mathrm{primes}:(2,3,5,7,) 2 3 4 5 6 7 8 9 ( 1 0 ) p r i m e s : ( 2 , 3 , 5 , 7 , )","title":"\u6b27\u62c9\u7b5b"},{"location":"math/shulun/prime/#_9","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 vector Euler ( int n ){ bool is_prime [ n + 1 ]; vector < int > primes ; fill ( is_prime , is_prime + n + 1 , true ); for ( int i = 2 ; i <= n ; i ++ ){ if ( is_prime [ i ]){ primes . push_back ( i ); } for ( int p : primes ){ if ( i * p > n ) break ; is_prime [ i * p ] = false ; if ( i % p == 0 ) break ; } } return primes ; }","title":"\u5b9e\u73b0"},{"location":"math/shulun/prime/#min_25","text":"","title":"Min_25 \u7b5b"},{"location":"others/shortkeys/","text":"Mac \u5feb\u6377\u952e \u00b6","title":"Mac \u5feb\u6377\u952e"},{"location":"others/shortkeys/#mac","text":"","title":"Mac \u5feb\u6377\u952e"},{"location":"others/words/","text":"\u5355\u8bcd \u00b6 fractional look through implicit append prefix preemptive simulation implement allocate covariance concrete ellipse coordinate","title":"\u5355\u8bcd\u8868"},{"location":"others/words/#_1","text":"fractional look through implicit append prefix preemptive simulation implement allocate covariance concrete ellipse coordinate","title":"\u5355\u8bcd"},{"location":"others/xyw/","text":"Mac \u8fde\u6821\u56ed\u7f51 \u00b6 \u8fde\u6821\u56ed\u7f51\u540e\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee captive.apple.com \uff0c\u5373\u53ef\u5f39\u51fa\u9a8c\u8bc1\u7a97\u53e3 Note Mac OS \u6240\u6709\u4e0d\u5f39\u9a8c\u8bc1\u7a97\u53e3\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u8fd9\u6837\u89e3\u51b3","title":"Mac \u8fde\u6821\u56ed\u7f51"},{"location":"others/xyw/#mac","text":"\u8fde\u6821\u56ed\u7f51\u540e\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee captive.apple.com \uff0c\u5373\u53ef\u5f39\u51fa\u9a8c\u8bc1\u7a97\u53e3 Note Mac OS \u6240\u6709\u4e0d\u5f39\u9a8c\u8bc1\u7a97\u53e3\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u8fd9\u6837\u89e3\u51b3","title":"Mac \u8fde\u6821\u56ed\u7f51"},{"location":"tools/IDE/","text":"IDE \u00b6","title":"IDE \u9009\u62e9"},{"location":"tools/IDE/#ide","text":"","title":"IDE"},{"location":"tools/Mkdocs/","text":"Mkdocs \u00b6 \u56fe\u7247\u653e\u5927 \u00b6 \u53c2\u8003\uff1a\u57fa\u4e8emkdocs-material\u5b9e\u73b0\u7684\u5e2e\u52a9\u4e2d\u5fc3(markdown + \u4e2d\u6587\u641c\u7d22 + \u56fe\u7247\u653e\u5927) \u57fa\u4e8e Gitalk \u642d\u5efa\u8bc4\u8bba\u7cfb\u7edf \u00b6 \u5728\u4f60\u7684 github \u4e0b\u65b0\u5efa\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u653e\u8bc4\u8bba\u7684\u4ed3\u5e93 comment\uff0c\u518d\u7533\u8bf7\u4e00\u4e2a\u7533\u8bf7 clientID \u548c clientSecret\uff0c \u70b9\u51fb\u8fd9\u4e2a\u94fe\u63a5 \u5c31\u53ef\u4ee5\u7533\u8bf7\u4e86 Note Application name \u968f\u4fbf\u53d6 Homepage URL \u5c31\u662f\u4f60\u535a\u5ba2\u7684\u4e3b\u9875\u5730\u5740 Authorization callback URL \u4fdd\u6301\u548c Homepage URL \u4e00\u6837 \u627e\u5230 mkdocs-material \u5b89\u88c5\u8def\u5f84 Note \u7ec8\u7aef\u4e2d\u8f93\u5165 1 python3 1 import material 1 material \u7136\u540e\u5e94\u8be5\u5c31\u80fd\u770b\u5230 1 <module 'material' from '/usr/local/lib/python3.8/site-packages/material/__init__.py'> \u540e\u9762\u8def\u5f84\u7684\u4e0a\u4e00\u7ea7 /usr/local/lib/python3.8/site-packages/material \u5c31\u662f mkdocs-material \u7684\u5b89\u88c5\u8def\u5f84 Finder \u4e2d\u524d\u5f80\u4e0a\u9762\u7684\u8def\u5f84\uff0c\u8fdb\u5165 /partials/intergrations \uff0c\u6253\u5f00\u91cc\u9762\u7684 disqus.html \u7528\u4e0b\u9762\u7684\u4ee3\u7801\u8986\u76d6 disqus.html \u91cc\u9762\u7684\u5185\u5bb9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < h2 id = \"__comments\" > {{ lang.t(\"meta.comments\") }} </ h2 > < form id = \"gitalk-form\" onsubmit = \"return false;\" > < div id = \"gitalk-container\" ></ div > </ form > < link rel = \"stylesheet\" href = \"https://unpkg.com/gitalk/dist/gitalk.css\" > < script src = \"https://unpkg.com/gitalk/dist/gitalk.min.js\" ></ script > < script src = \"https://cdnjs.loli.net/ajax/libs/blueimp-md5/2.10.0/js/md5.min.js\" ></ script > < script > const gitalk = new Gitalk ({ clientID : '' , // add yourself's clientSecret : '' , // add yourself's repo : 'comment' , // add yourself's owner : 'Stardusten' , admin : [ 'Stardusten' ], id : md5 ( location . pathname ), // Ensure uniqueness and length less than 50 distractionFreeMode : false // Facebook-like distraction free mode }) gitalk . render ( 'gitalk-container' ) </ script > Warning \u6ce8\u610f repo \u586b\u7684\u662f \u4ed3\u5e93\u540d \u800c\u4e0d\u662f\u5730\u5740\uff0c\u5426\u5219\u5c31\u4f1a\u51fa\u73b0 Failed: NOT Found","title":"Mkdocs"},{"location":"tools/Mkdocs/#mkdocs","text":"","title":"Mkdocs"},{"location":"tools/Mkdocs/#_1","text":"\u53c2\u8003\uff1a\u57fa\u4e8emkdocs-material\u5b9e\u73b0\u7684\u5e2e\u52a9\u4e2d\u5fc3(markdown + \u4e2d\u6587\u641c\u7d22 + \u56fe\u7247\u653e\u5927)","title":"\u56fe\u7247\u653e\u5927"},{"location":"tools/Mkdocs/#gitalk","text":"\u5728\u4f60\u7684 github \u4e0b\u65b0\u5efa\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u653e\u8bc4\u8bba\u7684\u4ed3\u5e93 comment\uff0c\u518d\u7533\u8bf7\u4e00\u4e2a\u7533\u8bf7 clientID \u548c clientSecret\uff0c \u70b9\u51fb\u8fd9\u4e2a\u94fe\u63a5 \u5c31\u53ef\u4ee5\u7533\u8bf7\u4e86 Note Application name \u968f\u4fbf\u53d6 Homepage URL \u5c31\u662f\u4f60\u535a\u5ba2\u7684\u4e3b\u9875\u5730\u5740 Authorization callback URL \u4fdd\u6301\u548c Homepage URL \u4e00\u6837 \u627e\u5230 mkdocs-material \u5b89\u88c5\u8def\u5f84 Note \u7ec8\u7aef\u4e2d\u8f93\u5165 1 python3 1 import material 1 material \u7136\u540e\u5e94\u8be5\u5c31\u80fd\u770b\u5230 1 <module 'material' from '/usr/local/lib/python3.8/site-packages/material/__init__.py'> \u540e\u9762\u8def\u5f84\u7684\u4e0a\u4e00\u7ea7 /usr/local/lib/python3.8/site-packages/material \u5c31\u662f mkdocs-material \u7684\u5b89\u88c5\u8def\u5f84 Finder \u4e2d\u524d\u5f80\u4e0a\u9762\u7684\u8def\u5f84\uff0c\u8fdb\u5165 /partials/intergrations \uff0c\u6253\u5f00\u91cc\u9762\u7684 disqus.html \u7528\u4e0b\u9762\u7684\u4ee3\u7801\u8986\u76d6 disqus.html \u91cc\u9762\u7684\u5185\u5bb9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < h2 id = \"__comments\" > {{ lang.t(\"meta.comments\") }} </ h2 > < form id = \"gitalk-form\" onsubmit = \"return false;\" > < div id = \"gitalk-container\" ></ div > </ form > < link rel = \"stylesheet\" href = \"https://unpkg.com/gitalk/dist/gitalk.css\" > < script src = \"https://unpkg.com/gitalk/dist/gitalk.min.js\" ></ script > < script src = \"https://cdnjs.loli.net/ajax/libs/blueimp-md5/2.10.0/js/md5.min.js\" ></ script > < script > const gitalk = new Gitalk ({ clientID : '' , // add yourself's clientSecret : '' , // add yourself's repo : 'comment' , // add yourself's owner : 'Stardusten' , admin : [ 'Stardusten' ], id : md5 ( location . pathname ), // Ensure uniqueness and length less than 50 distractionFreeMode : false // Facebook-like distraction free mode }) gitalk . render ( 'gitalk-container' ) </ script > Warning \u6ce8\u610f repo \u586b\u7684\u662f \u4ed3\u5e93\u540d \u800c\u4e0d\u662f\u5730\u5740\uff0c\u5426\u5219\u5c31\u4f1a\u51fa\u73b0 Failed: NOT Found","title":"\u57fa\u4e8e Gitalk \u642d\u5efa\u8bc4\u8bba\u7cfb\u7edf"},{"location":"tools/Texmacs/","text":"Texmacs \u00b6","title":"Texmacs"},{"location":"tools/Texmacs/#texmacs","text":"","title":"Texmacs"},{"location":"tools/cmake/","text":"cmake \u00b6 \u5b89\u88c5 \u00b6 \u4e0b\u8f7d cmake \u5b89\u88c5\u5305\u5e76\u5b89\u88c5\uff1a \u5b98\u7f51\u4e0b\u8f7d \u6253\u5f00\u540e\u83dc\u5355\u680f\u9009\u62e9 Tools - How to install for command line use \u590d\u5236\u65b9\u6cd5\u4e8c\u7684\u4ee3\u7801\uff1a 1 sudo \"/Applications/CMake.app/Contents/bin/cmake-gui\" --install \u7ec8\u7aef\u6267\u884c\u5373\u53ef. Note \u4f7f\u7528 brew \u4e5f\u53ef\u4ee5\uff0c\u7ec8\u7aef \u914d\u7f6e\u597d\u4ee3\u7406 \uff0c\u6267\u884c 1 brew install cmake \u5373\u53ef","title":"CMake"},{"location":"tools/cmake/#cmake","text":"","title":"cmake"},{"location":"tools/cmake/#_1","text":"\u4e0b\u8f7d cmake \u5b89\u88c5\u5305\u5e76\u5b89\u88c5\uff1a \u5b98\u7f51\u4e0b\u8f7d \u6253\u5f00\u540e\u83dc\u5355\u680f\u9009\u62e9 Tools - How to install for command line use \u590d\u5236\u65b9\u6cd5\u4e8c\u7684\u4ee3\u7801\uff1a 1 sudo \"/Applications/CMake.app/Contents/bin/cmake-gui\" --install \u7ec8\u7aef\u6267\u884c\u5373\u53ef. Note \u4f7f\u7528 brew \u4e5f\u53ef\u4ee5\uff0c\u7ec8\u7aef \u914d\u7f6e\u597d\u4ee3\u7406 \uff0c\u6267\u884c 1 brew install cmake \u5373\u53ef","title":"\u5b89\u88c5"},{"location":"tools/katex/","text":"Katex \u00b6 \u989c\u8272 \u00b6 Example 1 $${\\color{blue}\\mathrm{I\\ am\\ blue\\ \\ (\u3002>\ufe3f< )\u3002}}$$ Result \\[{\\color{blue}\\mathrm{I\\ am\\ blue\\ \\ (\u3002>\ufe3f< )\u3002}}\\] Optional Colors","title":"Katex"},{"location":"tools/katex/#katex","text":"","title":"Katex"},{"location":"tools/katex/#_1","text":"Example 1 $${\\color{blue}\\mathrm{I\\ am\\ blue\\ \\ (\u3002>\ufe3f< )\u3002}}$$ Result \\[{\\color{blue}\\mathrm{I\\ am\\ blue\\ \\ (\u3002>\ufe3f< )\u3002}}\\] Optional Colors","title":"\u989c\u8272"},{"location":"tools/md/","text":"Markdown \u00b6 \u8868\u683c \u00b6 Example 1 2 3 4 5 6 7 8 9 <center> | Method | Description | | :------: | :----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | </center> Result Method Description GET Fetch resource PUT Update resource DELETE Delete resource vscode \u81ea\u52a8\u683c\u5f0f\u5316\u5feb\u6377\u952e\uff1a option + shift + F \u6587\u5b57 \u00b6 \u5c45\u4e2d \u00b6 Example 1 <center>\u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a</center> Result \u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a \u5c45\u53f3 \u00b6 Example 1 <div style=\"text-align: right\">\u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a</div> Result \u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a \u9ad8\u4eae & \u4e0b\u5212\u7ebf & \u5220\u9664\u7ebf \u00b6 Example 1 2 3 ==This was marked== This was inserted^^ ~~This was deleted~~ Result This was marked This was inserted This was deleted Embed \u00b6 \u97f3\u4e50 \u00b6 \u5728\u7ebf\u97f3\u9891 \u00b6 Example 1 2 3 4 5 6 7 8 <center> <audio controls src=\"https://raw.githubusercontent.com/Stardusten/coding-notes/main/resources/obito.mp3\"> Your browser does not support the <code>audio</code> element. </audio> </center> Result Your browser does not support the audio element. \u7f51\u6613\u4e91\u97f3\u4e50 \u00b6 Example 1 1 2 3 <center> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32752002&auto=1&height=66\"></iframe> </center> Result 1 Example 2 1 2 3 <center> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=32752002&auto=1&height=32\"></iframe> </center> Result 2 \u89c6\u9891 \u00b6 Example 1 <iframe src=\"//player.bilibili.com/player.html?aid=6410834&bvid=BV1Bs411t7Lo&cid=10421871&page=1\" width=800 height=450 scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe> Result PDF \u00b6 Example 1 2 3 4 5 <object data=\"http://www.founderfx.cn/resources/support/\u65b9\u6b63\u4e66\u72482008-210\u4f7f\u7528\u6307\u5357.pdf\" type=\"application/pdf\" width=\"700px\" height=\"700px\"> <embed src=\"http://www.founderfx.cn/resources/support/\u65b9\u6b63\u4e66\u72482008-210\u4f7f\u7528\u6307\u5357.pdf\"> <p>This browser does not support PDFs. Please download the PDF to view it: <a href=\"http://www.founderfx.cn/resources/support/\u65b9\u6b63\u4e66\u72482008-210\u4f7f\u7528\u6307\u5357.pdf\">Download PDF</a>.</p> </embed> </object> Result This browser does not support PDFs. Please download the PDF to view it: Download PDF .","title":"Markdown"},{"location":"tools/md/#markdown","text":"","title":"Markdown"},{"location":"tools/md/#_1","text":"Example 1 2 3 4 5 6 7 8 9 <center> | Method | Description | | :------: | :----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | </center> Result Method Description GET Fetch resource PUT Update resource DELETE Delete resource vscode \u81ea\u52a8\u683c\u5f0f\u5316\u5feb\u6377\u952e\uff1a option + shift + F","title":"\u8868\u683c"},{"location":"tools/md/#_2","text":"","title":"\u6587\u5b57"},{"location":"tools/md/#_3","text":"Example 1 <center>\u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a</center> Result \u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a","title":"\u5c45\u4e2d"},{"location":"tools/md/#_4","text":"Example 1 <div style=\"text-align: right\">\u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a</div> Result \u6c42\u77e5\u82e5\u6e34\uff0c\u865a\u5fc3\u82e5\u611a","title":"\u5c45\u53f3"},{"location":"tools/md/#_5","text":"Example 1 2 3 ==This was marked== This was inserted^^ ~~This was deleted~~ Result This was marked This was inserted This was deleted","title":"\u9ad8\u4eae &amp; \u4e0b\u5212\u7ebf &amp; \u5220\u9664\u7ebf"},{"location":"tools/md/#embed","text":"","title":"Embed"},{"location":"tools/md/#_6","text":"","title":"\u97f3\u4e50"},{"location":"tools/md/#_7","text":"Example 1 2 3 4 5 6 7 8 <center> <audio controls src=\"https://raw.githubusercontent.com/Stardusten/coding-notes/main/resources/obito.mp3\"> Your browser does not support the <code>audio</code> element. </audio> </center> Result Your browser does not support the audio element.","title":"\u5728\u7ebf\u97f3\u9891"},{"location":"tools/md/#_8","text":"Example 1 1 2 3 <center> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32752002&auto=1&height=66\"></iframe> </center> Result 1 Example 2 1 2 3 <center> <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=32752002&auto=1&height=32\"></iframe> </center> Result 2","title":"\u7f51\u6613\u4e91\u97f3\u4e50"},{"location":"tools/md/#_9","text":"Example 1 <iframe src=\"//player.bilibili.com/player.html?aid=6410834&bvid=BV1Bs411t7Lo&cid=10421871&page=1\" width=800 height=450 scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe> Result","title":"\u89c6\u9891"},{"location":"tools/md/#pdf","text":"Example 1 2 3 4 5 <object data=\"http://www.founderfx.cn/resources/support/\u65b9\u6b63\u4e66\u72482008-210\u4f7f\u7528\u6307\u5357.pdf\" type=\"application/pdf\" width=\"700px\" height=\"700px\"> <embed src=\"http://www.founderfx.cn/resources/support/\u65b9\u6b63\u4e66\u72482008-210\u4f7f\u7528\u6307\u5357.pdf\"> <p>This browser does not support PDFs. Please download the PDF to view it: <a href=\"http://www.founderfx.cn/resources/support/\u65b9\u6b63\u4e66\u72482008-210\u4f7f\u7528\u6307\u5357.pdf\">Download PDF</a>.</p> </embed> </object> Result This browser does not support PDFs. Please download the PDF to view it: Download PDF .","title":"PDF"},{"location":"tools/pd/","text":"Parallels Desktop \u00b6 \u7cfb\u7edf macOS High Sierra 10.13.6 \u865a\u62df\u673a Parallels Desktop 16 Manjaro \u00b6 Manjaro Manjaro-KDE 20.1.1 Warning \u63d0\u524d\u58f0\u660e\uff1a\u4ee5\u4e0b\u5185\u5bb9\u5305\u542b\u5927\u91cf \u7384\u5b66\u64cd\u4f5c \uff0c\u4f7f\u7528\u524d\u8bf7\u786e\u4fdd\u5df2\u719f\u7ec3\u638c\u63e1 \u5220\u6389\u91cd\u88c5 \uff0c \u5173\u673a\u91cd\u542f \u7b49\u57fa\u64cd \u5361 TLP / \u65e0\u6cd5\u8fdb GUI Installer \u00b6 Solution 1 \u91cd\u542f\u8bd5\u8bd5\uff08\u4f60\u6ca1\u770b\u9519\uff0c\u6211\u5c31\u662f Solution 2 + \u91cd\u542f\u4e00\u6b21\u624d\u987a\u5229\u8fdb\u7684 GUI\uff09 Solution 2 \u4e0d\u8981\u8ba9 PD \u81ea\u52a8\u8bc6\u522b\u4e3a Manjaro Linux. \u5148\u4e0d\u9009\u7cfb\u7edf\u955c\u50cf\uff0c\u9009\u8981\u5b89\u88c5\u7684\u7cfb\u7edf\u7c7b\u578b\u4e3a \u5176\u4ed6 Linux \uff0c\u542f\u52a8\u540e\u518d\u6302\u8f7d Manjaro \u7684\u955c\u50cf Solution 3 \u8fdb\u5165\u547d\u4ee4\u884c\uff1a Crtl + Alt + F2 \u81ea\u884c\u6dfb\u52a0\u4e0a\u9762\u7684\u7ec4\u5408\u952e\uff0c\u5361 TLP \u65f6\u4f7f\u7528\u53ef\u4ee5\u8fdb\u5165\u547d\u4ee4\u884c\uff0c\u6309\u8981\u6c42\u767b\u5f55\u540e\uff1a \u5b89\u88c5 video-vesa \u9a71\u52a8 1 sudo mhwd -i pci video-vesa \u542f\u52a8 GUI Installer 1 startx Warning \u8fd9\u4e00\u65b9\u6cd5\u5bf9 Manjaro 20 \u597d\u50cf\u4e0d\u592a\u597d\u7528\uff0c\u867d\u7136\u53ef\u4ee5\u5f3a\u5236\u542f\u52a8 GUI Installer\uff0c\u4f46\u53ef\u80fd\u4f1a\u51fa\u73b0 \u201c\u51fa\u73b0\u4e24\u4e2a\u9f20\u6807\u6307\u9488\u201d \u201c\u6309\u5b89\u88c5\u540e\u65e0\u54cd\u5e94\u201d \u7b49\u95ee\u9898 \u5b89\u88c5 Parallels Tools \u00b6 \u7ec8\u7aef\u6302\u4ee3\u7406 \u914d\u7f6e\u6e90 1 2 3 sudo pacman-mirrors -g sudo pacman -Syyu reboot \u6253\u5f00\u7ec8\u7aef\uff0c\u8f93\u5165 sudo \uff0c\u6253\u5f00 Parallels Tools \u7684\u955c\u50cf\uff0c\u628a\u5b89\u88c5\u811a\u672c\u62d6\u5165\u7ec8\u7aef\uff0c\u56de\u8f66\uff0c\u8f93\u5bc6\u7801\uff0c\u5f00\u59cb\u5b89\u88c5 Warning \u4e0d\u6302\u4ee3\u7406\u8bbe\u7f6e\u6e90\u4f1a\u975e\u5e38\u6162 reboot \u540e\u53ef\u80fd\u955c\u50cf\u540d\u8fd8\u662f Manjaro KDE \u4f46\u6253\u5f00\u5c31\u4f1a\u53d1\u73b0\u5df2\u7ecf\u6302\u8f7d\u4e0a Parallels Tools \u5b89\u88c5\u76d8\u4e86 \u6e90\u914d\u7f6e\u5b8c\u53ef\u4ee5\u987a\u4fbf\u5b89\u88c5\u4e0b\u5b57\u4f53 1 sudo pacman -S wqy-microhei \u7b2c\u4e94\u6b65\u5b89\u88c5 Parallels Tools \u5f88\u6162\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\uff0c \u5343\u4e07\u522b\u624b\u8d31\u70b9\u9000\u51fa \u5b89\u88c5 Parallels Tools \u540e\u91cd\u542f\u9ed1\u5c4f\uff08\u53ea\u80fd\u8f93\u5165\u5b57\u7b26\uff09 \u00b6 \u865a\u62df\u673a\u4f7f\u7528\u5bbf\u4e3b\u673a\u4ee3\u7406 \u00b6 \u7f51\u7edc\u6539\u4e3a \u201c\u6865\u63a5\u6a21\u5f0f\u201d \u5bbf\u4e3b\u673a\u4ee3\u7406\u8f6f\u4ef6\u9009\u4e2d \u201c\u5141\u8bb8\u5c40\u57df\u7f51\u8fde\u63a5\u201d \u865a\u62df\u673a\u4e2d\u4f7f\u7528 \u5bbf\u4e3b\u673a IP \u548c \u76d1\u542c port \u5373\u53ef \u53c2\u8003\uff1a\u865a\u62df\u673a\u4f7f\u7528\u4ee3\u7406\u65b9\u6848 \u8ba9\u7ec8\u7aef\u8d70\u4ee3\u7406 \u00b6 1 export ALL_PROXY=socks5://proxyAdress:port \u6d4b\u8bd5\uff1a 1 curl cip.cc \u53c2\u8003\uff1a\u8ba9\u7ec8\u7aef\u8d70\u4ee3\u7406\u7684\u51e0\u79cd\u65b9\u6cd5","title":"Parallels Desktop"},{"location":"tools/pd/#parallels-desktop","text":"\u7cfb\u7edf macOS High Sierra 10.13.6 \u865a\u62df\u673a Parallels Desktop 16","title":"Parallels Desktop"},{"location":"tools/pd/#manjaro","text":"Manjaro Manjaro-KDE 20.1.1 Warning \u63d0\u524d\u58f0\u660e\uff1a\u4ee5\u4e0b\u5185\u5bb9\u5305\u542b\u5927\u91cf \u7384\u5b66\u64cd\u4f5c \uff0c\u4f7f\u7528\u524d\u8bf7\u786e\u4fdd\u5df2\u719f\u7ec3\u638c\u63e1 \u5220\u6389\u91cd\u88c5 \uff0c \u5173\u673a\u91cd\u542f \u7b49\u57fa\u64cd","title":"Manjaro"},{"location":"tools/pd/#tlp-gui-installer","text":"Solution 1 \u91cd\u542f\u8bd5\u8bd5\uff08\u4f60\u6ca1\u770b\u9519\uff0c\u6211\u5c31\u662f Solution 2 + \u91cd\u542f\u4e00\u6b21\u624d\u987a\u5229\u8fdb\u7684 GUI\uff09 Solution 2 \u4e0d\u8981\u8ba9 PD \u81ea\u52a8\u8bc6\u522b\u4e3a Manjaro Linux. \u5148\u4e0d\u9009\u7cfb\u7edf\u955c\u50cf\uff0c\u9009\u8981\u5b89\u88c5\u7684\u7cfb\u7edf\u7c7b\u578b\u4e3a \u5176\u4ed6 Linux \uff0c\u542f\u52a8\u540e\u518d\u6302\u8f7d Manjaro \u7684\u955c\u50cf Solution 3 \u8fdb\u5165\u547d\u4ee4\u884c\uff1a Crtl + Alt + F2 \u81ea\u884c\u6dfb\u52a0\u4e0a\u9762\u7684\u7ec4\u5408\u952e\uff0c\u5361 TLP \u65f6\u4f7f\u7528\u53ef\u4ee5\u8fdb\u5165\u547d\u4ee4\u884c\uff0c\u6309\u8981\u6c42\u767b\u5f55\u540e\uff1a \u5b89\u88c5 video-vesa \u9a71\u52a8 1 sudo mhwd -i pci video-vesa \u542f\u52a8 GUI Installer 1 startx Warning \u8fd9\u4e00\u65b9\u6cd5\u5bf9 Manjaro 20 \u597d\u50cf\u4e0d\u592a\u597d\u7528\uff0c\u867d\u7136\u53ef\u4ee5\u5f3a\u5236\u542f\u52a8 GUI Installer\uff0c\u4f46\u53ef\u80fd\u4f1a\u51fa\u73b0 \u201c\u51fa\u73b0\u4e24\u4e2a\u9f20\u6807\u6307\u9488\u201d \u201c\u6309\u5b89\u88c5\u540e\u65e0\u54cd\u5e94\u201d \u7b49\u95ee\u9898","title":"\u5361 TLP / \u65e0\u6cd5\u8fdb GUI Installer"},{"location":"tools/pd/#parallels-tools","text":"\u7ec8\u7aef\u6302\u4ee3\u7406 \u914d\u7f6e\u6e90 1 2 3 sudo pacman-mirrors -g sudo pacman -Syyu reboot \u6253\u5f00\u7ec8\u7aef\uff0c\u8f93\u5165 sudo \uff0c\u6253\u5f00 Parallels Tools \u7684\u955c\u50cf\uff0c\u628a\u5b89\u88c5\u811a\u672c\u62d6\u5165\u7ec8\u7aef\uff0c\u56de\u8f66\uff0c\u8f93\u5bc6\u7801\uff0c\u5f00\u59cb\u5b89\u88c5 Warning \u4e0d\u6302\u4ee3\u7406\u8bbe\u7f6e\u6e90\u4f1a\u975e\u5e38\u6162 reboot \u540e\u53ef\u80fd\u955c\u50cf\u540d\u8fd8\u662f Manjaro KDE \u4f46\u6253\u5f00\u5c31\u4f1a\u53d1\u73b0\u5df2\u7ecf\u6302\u8f7d\u4e0a Parallels Tools \u5b89\u88c5\u76d8\u4e86 \u6e90\u914d\u7f6e\u5b8c\u53ef\u4ee5\u987a\u4fbf\u5b89\u88c5\u4e0b\u5b57\u4f53 1 sudo pacman -S wqy-microhei \u7b2c\u4e94\u6b65\u5b89\u88c5 Parallels Tools \u5f88\u6162\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\uff0c \u5343\u4e07\u522b\u624b\u8d31\u70b9\u9000\u51fa","title":"\u5b89\u88c5 Parallels Tools"},{"location":"tools/pd/#parallels-tools_1","text":"","title":"\u5b89\u88c5 Parallels Tools \u540e\u91cd\u542f\u9ed1\u5c4f\uff08\u53ea\u80fd\u8f93\u5165\u5b57\u7b26\uff09"},{"location":"tools/pd/#_1","text":"\u7f51\u7edc\u6539\u4e3a \u201c\u6865\u63a5\u6a21\u5f0f\u201d \u5bbf\u4e3b\u673a\u4ee3\u7406\u8f6f\u4ef6\u9009\u4e2d \u201c\u5141\u8bb8\u5c40\u57df\u7f51\u8fde\u63a5\u201d \u865a\u62df\u673a\u4e2d\u4f7f\u7528 \u5bbf\u4e3b\u673a IP \u548c \u76d1\u542c port \u5373\u53ef \u53c2\u8003\uff1a\u865a\u62df\u673a\u4f7f\u7528\u4ee3\u7406\u65b9\u6848","title":"\u865a\u62df\u673a\u4f7f\u7528\u5bbf\u4e3b\u673a\u4ee3\u7406"},{"location":"tools/pd/#_2","text":"1 export ALL_PROXY=socks5://proxyAdress:port \u6d4b\u8bd5\uff1a 1 curl cip.cc \u53c2\u8003\uff1a\u8ba9\u7ec8\u7aef\u8d70\u4ee3\u7406\u7684\u51e0\u79cd\u65b9\u6cd5","title":"\u8ba9\u7ec8\u7aef\u8d70\u4ee3\u7406"},{"location":"tools/vscode/","text":"vscode \u00b6 \u5355\u6587\u4ef6\u8c03\u8bd5 \u00b6 Warning \u5148\u5b89\u88c5\u63d2\u4ef6 CodeLLDB \u66ff\u4ee3 vscode \u81ea\u5e26\u7684 LLDB \u63d2\u4ef6\uff0c\u529f\u80fd\u66f4\u5f3a\u5927\uff0c\u8fd8\u80fd\u5728 \u96c6\u6210\u7ec8\u7aef\u4e2d\u8f93\u5165\u8f93\u51fa \uff0c\u800c\u4e0d\u5fc5\u6253\u5f00\u5916\u90e8\u7ec8\u7aef tasks.json \u7528\u6765\u6267\u884c\u8c03\u8bd5\u524d \u7f16\u8bd1 \u7684\u914d\u7f6e\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"clang++ build active file\" , \"type\" : \"shell\" , \"command\" : \"clang++\" , \"args\" : [ \"${fileBasename}\" , \"-o\" , \"${fileBasenameNoExtension}\" , \"-g\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true } } ] } launch.json \u7528\u6765\u6267\u884c \u8c03\u8bd5 \u7684\u542f\u52a8\u914d\u7f6e\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"lldb\" , \"type\" : \"lldb\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}/${fileBasenameNoExtension}\" , \"args\" : [], \"cwd\" : \"${workspaceFolder}\" , \"preLaunchTask\" : \"clang++ build active file\" } ] } Note \"program\" \uff1a\u53ef\u6267\u884c\u6587\u4ef6\u4f4d\u7f6e \"preLaunchTask\" \uff1a\u6267\u884c launch.json \u4e4b\u524d\u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\uff08\u4e00\u822c\u4e3a\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u6545\u5e94\u4fdd\u6301\u4e0e tasks.json \u4e2d\u7684 \"label\" \u9879\u4e00\u81f4\uff09 CMake \u8c03\u8bd5 \u00b6 \u5b89\u88c5\u63d2\u4ef6 CMake Tools tasks.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"make\" , \"type\" : \"shell\" , \"options\" : { \"cwd\" : \"${workspaceRoot}/build\" }, \"command\" : \"make\" , \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true } } ] } \u4e0a\u9762\u7684\u4ee3\u7801\u7b49\u4ef7\u4e8e 1 2 cd build make Note \u5176\u5b9e\u5728\u6267\u884c\u4e0a\u9762\u7684 make \u4e4b\u524d\uff0c\u8fd8\u9700\u8981\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u521b\u5efa\u7f16\u8bd1\u9879\u76ee\u6240\u9700\u7684makefile\u6587\u4ef6\u53ca\u5176\u4ed6\u76f8\u5173\u6587\u4ef6 1 2 3 mkdir build cd build cmake .. \u4f46 CMake Tools \u63d2\u4ef6\u53ef\u4ee5\u5e2e\u6211\u4eec\u5feb\u901f\u5b8c\u6210\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u53ea\u9700\u6309\u952e\uff1a command + P \uff0c\u5728\u8f93\u5165\u6846\u4e2d\u8f93\u5165 1 >cmake \u9009\u62e9 CMake: Clean Rebuild \u6267\u884c\u5373\u53ef launch.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"lldb\" , \"type\" : \"lldb\" , \"request\" : \"launch\" , \"program\" : \"${workspaceFolder}/build/main\" , \"args\" : [], \"cwd\" : \"${workspaceFolder}\" , \"preLaunchTask\" : \"make\" } ] } Note \u4f7f\u7528 CMake \u7f16\u8bd1\uff0c\u4fee\u6539 \"preLaunchTask\" \u9879\u4e3a make \uff0c program \u9879\u4fee\u6539\u4e3a CMakeLists.txt \u4e2d\u751f\u6210\u6587\u4ef6\u4f4d\u7f6e \u5feb\u6377\u952e \u00b6 \u91cd\u547d\u540d\u51fd\u6570 or \u53d8\u91cf \u00b6 f2 \u8df3\u8f6c\u5230\u7279\u5b9a\u884c \u00b6 control + g \u8df3\u8f6c\u5230\u7279\u5b9a\u7b26\u53f7\u5757 \u00b6 command + shift + o \u8df3\u8f6c\u5230\u5de5\u4f5c\u533a\u4e2d\u53d8\u91cf\u6216\u51fd\u6570 \u00b6 command + t \u4ee3\u7801\u683c\u5f0f\u6574\u7406 \u00b6 shift + option + F","title":"vscode"},{"location":"tools/vscode/#vscode","text":"","title":"vscode"},{"location":"tools/vscode/#_1","text":"Warning \u5148\u5b89\u88c5\u63d2\u4ef6 CodeLLDB \u66ff\u4ee3 vscode \u81ea\u5e26\u7684 LLDB \u63d2\u4ef6\uff0c\u529f\u80fd\u66f4\u5f3a\u5927\uff0c\u8fd8\u80fd\u5728 \u96c6\u6210\u7ec8\u7aef\u4e2d\u8f93\u5165\u8f93\u51fa \uff0c\u800c\u4e0d\u5fc5\u6253\u5f00\u5916\u90e8\u7ec8\u7aef tasks.json \u7528\u6765\u6267\u884c\u8c03\u8bd5\u524d \u7f16\u8bd1 \u7684\u914d\u7f6e\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"clang++ build active file\" , \"type\" : \"shell\" , \"command\" : \"clang++\" , \"args\" : [ \"${fileBasename}\" , \"-o\" , \"${fileBasenameNoExtension}\" , \"-g\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true } } ] } launch.json \u7528\u6765\u6267\u884c \u8c03\u8bd5 \u7684\u542f\u52a8\u914d\u7f6e\u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"lldb\" , \"type\" : \"lldb\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}/${fileBasenameNoExtension}\" , \"args\" : [], \"cwd\" : \"${workspaceFolder}\" , \"preLaunchTask\" : \"clang++ build active file\" } ] } Note \"program\" \uff1a\u53ef\u6267\u884c\u6587\u4ef6\u4f4d\u7f6e \"preLaunchTask\" \uff1a\u6267\u884c launch.json \u4e4b\u524d\u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\uff08\u4e00\u822c\u4e3a\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u6545\u5e94\u4fdd\u6301\u4e0e tasks.json \u4e2d\u7684 \"label\" \u9879\u4e00\u81f4\uff09","title":"\u5355\u6587\u4ef6\u8c03\u8bd5"},{"location":"tools/vscode/#cmake","text":"\u5b89\u88c5\u63d2\u4ef6 CMake Tools tasks.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"make\" , \"type\" : \"shell\" , \"options\" : { \"cwd\" : \"${workspaceRoot}/build\" }, \"command\" : \"make\" , \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true } } ] } \u4e0a\u9762\u7684\u4ee3\u7801\u7b49\u4ef7\u4e8e 1 2 cd build make Note \u5176\u5b9e\u5728\u6267\u884c\u4e0a\u9762\u7684 make \u4e4b\u524d\uff0c\u8fd8\u9700\u8981\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u521b\u5efa\u7f16\u8bd1\u9879\u76ee\u6240\u9700\u7684makefile\u6587\u4ef6\u53ca\u5176\u4ed6\u76f8\u5173\u6587\u4ef6 1 2 3 mkdir build cd build cmake .. \u4f46 CMake Tools \u63d2\u4ef6\u53ef\u4ee5\u5e2e\u6211\u4eec\u5feb\u901f\u5b8c\u6210\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u53ea\u9700\u6309\u952e\uff1a command + P \uff0c\u5728\u8f93\u5165\u6846\u4e2d\u8f93\u5165 1 >cmake \u9009\u62e9 CMake: Clean Rebuild \u6267\u884c\u5373\u53ef launch.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"lldb\" , \"type\" : \"lldb\" , \"request\" : \"launch\" , \"program\" : \"${workspaceFolder}/build/main\" , \"args\" : [], \"cwd\" : \"${workspaceFolder}\" , \"preLaunchTask\" : \"make\" } ] } Note \u4f7f\u7528 CMake \u7f16\u8bd1\uff0c\u4fee\u6539 \"preLaunchTask\" \u9879\u4e3a make \uff0c program \u9879\u4fee\u6539\u4e3a CMakeLists.txt \u4e2d\u751f\u6210\u6587\u4ef6\u4f4d\u7f6e","title":"CMake \u8c03\u8bd5"},{"location":"tools/vscode/#_2","text":"","title":"\u5feb\u6377\u952e"},{"location":"tools/vscode/#or","text":"f2","title":"\u91cd\u547d\u540d\u51fd\u6570 or \u53d8\u91cf"},{"location":"tools/vscode/#_3","text":"control + g","title":"\u8df3\u8f6c\u5230\u7279\u5b9a\u884c"},{"location":"tools/vscode/#_4","text":"command + shift + o","title":"\u8df3\u8f6c\u5230\u7279\u5b9a\u7b26\u53f7\u5757"},{"location":"tools/vscode/#_5","text":"command + t","title":"\u8df3\u8f6c\u5230\u5de5\u4f5c\u533a\u4e2d\u53d8\u91cf\u6216\u51fd\u6570"},{"location":"tools/vscode/#_6","text":"shift + option + F","title":"\u4ee3\u7801\u683c\u5f0f\u6574\u7406"}]}